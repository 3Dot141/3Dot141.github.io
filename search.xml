<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mood -- 19接续18</title>
      <link href="/blogs/3e5d6152.html"/>
      <url>/blogs/3e5d6152.html</url>
      
        <content type="html"><![CDATA[<h1 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h1><p>又是一年起始。18年匆匆而过。有些人还是走丢了。有些事还是没完成。<br>想说些什么。但似乎又不知从何说起。</p><p>这一年，自己过的还好吗？<br>身体依旧是不好。工作还可以，身边的人也都挺好的。还遇到了一个自己喜欢的姑娘，虽然之后还是分手了。</p><h2 id="恋爱"><a href="#恋爱" class="headerlink" title="恋爱"></a>恋爱</h2><p>好像自己不适合恋爱。每次恋爱都是以失败告终。而且最长的那个，也不过是 1 年。<br>虽然那个女孩还喜欢自己。但是，自己不能再继续了。</p><p>我也希望。自己能够奋不顾身的投入一段恋情当中。陪着这个姑娘从咫尺到天涯。<br>又奈何自己孑然一身，哪里有资本去追求爱情这种飘渺的东西。在一起时开心就好。不在一起。那也祝你安好。</p><p>这两天，父上大人帮我找了一个相亲对象。我还挺开心的。竟然没有抵触的情绪。可能真的是不想折腾了吧。</p><p>从过年到现在，两件事情对自己的冲击最大。<br>一个是我的堂妹告诉我，其实别看我爸表面上不着急，其实可希望我找到一个女孩子了。<br>另一个就是我的同事说，今年要找到一个女朋友，我问他为什么这么着急。他说，他父亲身体不是很好。我父亲的身体又何尝好呢。从我记事起，我父亲就是一个病秧子。可能，我身体不好，一部分就是遗传的我父亲吧。</p><p>虽然我知道，自己如果想要恋爱，还是找得到女朋友的。但是。自己想恋爱吗？</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>至于代码上的进步。。。<br>如果有，那应该是对整个代码的设计上的吧。<br>从一开始的不断的修改 bug, 然后自己开始接受模块，对模块中的一部分进行优化。<br>然后，现在可以往其中加入一些自己的模块。甚至于说重构了一些底层模块。这种进步是显而易见的。<br>除此之外，还有的就是经验上的积累。不过是对代码的熟悉程度，还有的就是对架构的熟悉程度。</p><p>但是，总体而言还是不满意的，因为自己想做一个数据工程师，而非单纯的开发工程师。</p><p>前两天看的一篇文章中，讲的很有道理。很多能够成功的人，都有一个共通的素质。或者说能力。<br>那就是能够看穿一件事务的本质。</p><p>就像我的领路人 ju , 每次我和他交流的时候，他都会说，这个东西，我的理解，他的本质是什么什么。你应该这样去解决。而不是怎么怎么样。这些话有时候，我需要自己去慢慢琢磨，甚至琢磨不透。<br>我想，这是我最应该学习的本领。</p><h2 id="友情"><a href="#友情" class="headerlink" title="友情"></a>友情</h2><p>1.21 - 06：26 分， 冷艇哥的女儿冷诺晨出生了。 艇哥的媳妇叫做朱晓佳。 也是一个温婉如水的女孩子呢。<br>借着去看冷诺晨的机会，我们大学的几个朋友又聚到了一起。说说笑笑，好不热闹。<br>让我感到欣慰的是，大家能够在一起敞开的谈论自己的近况。月薪吖，年终吖，而不是藏着掖着。这种感觉让我知道，你们还是你们，没变。真好。<br>年假的时候，在家里，也匆匆忙忙的见了几个好友。但真的也就是匆匆一面。然后就是各种琐事。一恍神，就是 2019 。<br>我还没有和你们痛快地喝酒聊天。你们和我就各奔东西。<br>原先重逢的喜悦一瞬间就被离别的悲愁搅浑了池水。原先的镜面上的光洁，现在只有涟漪。看不见你们，也看不见自己。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>所以说啊，人生呢，就是要和自己喜欢的人，做喜欢的事情。不要管太多。不要想太多。<br>不爱了，就分手。累了，就出去走走。<br>年轻人，不要有压力。死后一捧黄土。谁能逃得过。<br>开心一点。嗯，我说的是每天。</p><p>今年的目标：</p><ol><li>Coding upupup, 看完去年屯的书。</li><li>找到可以一起吃喝玩乐的你。</li><li>存一点点钱。嗯。3万就可以。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 内置序列化的三种方式</title>
      <link href="/blogs/38ecb4b6.html"/>
      <url>/blogs/38ecb4b6.html</url>
      
        <content type="html"><![CDATA[<p>Java序列化就是把Java对象按照一定的格式存到文件或者磁盘当中，那么Java内置的序列化有几种方式呢？每种方式的相同点和不同点是什么呢？</p><p>序列化的进阶：即三种方式，任何一种方式都可以进行序列化和反序列化</p><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><p>使用默认的序列化机制，即实现Serializable接口即可，不需要实现任何方法。</p><p>该接口没有任何方法，只是一个标记而已，告诉Java虚拟机该类可以被序列化了。然后利用ObjectOutputStream进行序列化和用ObjectInputStream进行反序列化。</p><p><strong>注意：</strong></p><p>该方式下序列化机制会自动保存该对象的成员变量，static成员变量和transient关键字修饰的成员变量不会被序列化保存。</p><p>这是最简单的一种方式，因为这种方式让序列化机制看起来很方便（然后，我们在进行对象序列化时，只需要使用ObjectOutputStream和ObjectInputStream的writeObject(object)方法和readObject()方法，就可以把传入的对象参数序列化和反序列化了，其他不用管）。有时候想自己来控制序列化哪些成员，还有如何保存static和transient成员？</p><p><strong>再注意</strong>：</p><p>该方式下，反序列化时不会调用该对象的构造器，但是会调用父类的构造器，如果父类没有默认构造器则会报错。<strong>static字段是类共享的字段，当该类的一个对象被序列化后，这个static变量可能会被另一个对象改变，所以这就决定了静态变量是不能序列化的，但如果再加上final修饰，就可以被序列化了，因为这是一个常量，不会改变。</strong></p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p>实现Externalizable接口。</p><p>Externalizable 接口是继承自 Serializable 接口的，我们在实现 Externalizable 接口时，必须实现writeExternal(ObjectOutput)和readExternal(ObjectInput)方法，在这两个方法下我们可以手动的进行序列化和反序列化那些需要保存的成员变量。</p><p>反序列化时，首先会调用对象的默认构造器（没有则报错，如果默认构造器不是public的也会报错），然后再调用readExternal方法。</p><p>这种方式一定要显式的序列化成员变量，使得整个序列化过程是可控制的，可以自己选择将哪些部分序列化。</p><p>第三种</p><p>实现Serializable接口，在该实现类中再增加writeObject方法和readObject方法。该方式要严格遵循以下两个方法的方法签名：</p><p>writeObject和readObject</p><p>在这两个方法里面需要使用stream.defaultWriteObject()序列化那些非static和非transient修饰的成员变量，<strong>static的和transient的变量则用stream.writeObject(object)显式序列化。</strong></p><p>在序列化输出的时候，writeObject(object)会检查object参数，如果object拥有自己的writeObject()方法，那么就会使用它自己的writeObject()方法进行序列化。readObject()也采用了类似的步骤进行处理。</p><p><strong>如果object参数没有writeObject()方法，在readObject方法中就不能调用stream.readObject()，否则会报错。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Class + Static 代码块</title>
      <link href="/blogs/90ab9288.html"/>
      <url>/blogs/90ab9288.html</url>
      
        <content type="html"><![CDATA[<h1 id="Class-Static-代码块"><a href="#Class-Static-代码块" class="headerlink" title="Class + Static 代码块"></a>Class + Static 代码块</h1><h2 id="Class-forName-VS-LoadClass"><a href="#Class-forName-VS-LoadClass" class="headerlink" title="Class.forName VS LoadClass"></a>Class.forName VS LoadClass</h2><p><strong>区别：</strong><br>LoadClass 不初始化类。<br>Class.forName 初始化类。</p><p><strong>tips:</strong><br>只要出现了 xx.Class ， 这个 Class 就已经加入了 JVM 中。</p><h2 id="静态代码块什么时候执行的。"><a href="#静态代码块什么时候执行的。" class="headerlink" title="静态代码块什么时候执行的。"></a>静态代码块什么时候执行的。</h2><p>装载 – 链接 – 初始化 – 实例化。</p><p>初始化后 开始执行静态代码块。</p><h2 id="对象初始化顺序"><a href="#对象初始化顺序" class="headerlink" title="对象初始化顺序"></a>对象初始化顺序</h2><p>对象初始化，顺序：</p><ol><li>父类静态对象，静态代码块</li><li>子类静态对象，静态代码块</li><li>父类非静态对象，非静态代码块</li><li>父类构造函数</li><li>子类非静态对象，非静态代码块</li><li>子类构造函数</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常处理</title>
      <link href="/blogs/28877bf.html"/>
      <url>/blogs/28877bf.html</url>
      
        <content type="html"><![CDATA[<h1 id="异常是否要处理"><a href="#异常是否要处理" class="headerlink" title="异常是否要处理"></a>异常是否要处理</h1><p>运行时异常是RuntimeException类及其子类的异常，是非受检异常，<br>如NullPointerException、IndexOutOfBoundsException等。由于这类异常要么是系统异常，无法处理，如网络问题；<br>要么是程序逻辑错误，如空指针异常；JVM必须停止运行以改正这种错误，所以运行时异常可以不进行处理（捕获或向上抛出，当然也可以处理），而由JVM自行处理。Java Runtime会自动catch到程序throw的RuntimeException，然后<strong>停止线程</strong>，打印异常。</p><p>非运行时异常是RuntimeException以外的异常，类型上都属于Exception类及其子类，是受检异常。<br>非运行时异常必须进行处理（捕获或向上抛出），如果不处理，程序将出现<strong>编译错误</strong>。一般情况下，API中写了throws的Exception都不是RuntimeException。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>即所有的异常都要捕获，受检异常默认捕获，不然不编译通过。<br>非受检异常非逻辑问题外是不可控的。尽量捕获，如果不能捕获，则会出现问题，停止程序。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ProtectionDomain 与 Url 的区别</title>
      <link href="/blogs/7c998ba2.html"/>
      <url>/blogs/7c998ba2.html</url>
      
        <content type="html"><![CDATA[<h1 id="class-getProtectionDomain"><a href="#class-getProtectionDomain" class="headerlink" title="class.getProtectionDomain()"></a>class.getProtectionDomain()</h1><p><a href="https://docstore.mik.ua/orelly/java-ent/security/ch05_04.htm" target="_blank" rel="noopener">ProtectionDomain 介绍</a></p><p>可以查看运行时某个类文件<strong>所在jar</strong>的位置<br>和 -verbose 命令相似。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getEnvPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (underlying.getIdentity().equals(ProjectConstants.WAR)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/WEB-INF"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String envPath = WorkContext.getCurrent().getPath();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(envPath)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = ResourceIOUtils.class.getProtectionDomain().getCodeSource().getLocation();</span><br><span class="line">            envPath = URLDecoder.decode(url.getPath(), EncodeConstants.ENCODING_UTF_8);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException ignored) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> idx = envPath.indexOf(ProjectConstants.WEBINF_NAME);</span><br><span class="line">        <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            idx = envPath.indexOf(<span class="string">"classes"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            idx = envPath.indexOf(<span class="string">"lib"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (idx &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            envPath = envPath.substring(<span class="number">0</span>, idx + ProjectConstants.WEBINF_NAME.length() + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            envPath = RepositoryUtils.getParent(envPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> envPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码的优点，就是无论什么情况，都能读取到 web-inf 的值。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取本机的 UUID</title>
      <link href="/blogs/ae01c73b.html"/>
      <url>/blogs/ae01c73b.html</url>
      
        <content type="html"><![CDATA[<h1 id="DMI-获取本机的-uuid"><a href="#DMI-获取本机的-uuid" class="headerlink" title="DMI - 获取本机的 uuid"></a>DMI - 获取本机的 uuid</h1><p> DMI 是英文单词 Desktop Management Interface 的缩写，也就是桌面管理界面，它含有关于系统硬件的配置信息。计算机每次启动时都对 DMI 数据进行校验，如果该数据出错或硬件有所变动，就会对机器进行检测，并把测试的数据写入 BIOS 芯片保存。所以如果我们在 BIOS 设置中禁止了 BIOS 芯片的刷新功能或者在主板使用跳线禁止了 BIOS 芯片的刷新功能，那这台机器的 DMI 数据将不能被更新。如果你更换了硬件配置，那么在进行 WINDOWS 系统时，机器仍旧按老系统的配置进行工作。这样就不能充分发挥新添加硬件的性能，有时还会出现这样或那样的故障。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sys/devices/virtual/dmi/id/product_uuid</span><br></pre></td></tr></table></figure><p> 备用方案<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/lib/dbus/machine-id</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>killPython_字符串相关</title>
      <link href="/blogs/56bb9de.html"/>
      <url>/blogs/56bb9de.html</url>
      
        <content type="html"><![CDATA[<h2 id="字符串-API"><a href="#字符串-API" class="headerlink" title="字符串 API"></a>字符串 API</h2><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"I'm %s. I'm %d year old"</span> % (<span class="string">'Vamei'</span>, <span class="number">99</span>))</span><br></pre></td></tr></table></figure><p><code>&quot;I&#39;m %s. I&#39;m %d year old&quot;</code> 为我们的模板。<code>%s</code> 为第一个格式符，表示一个字符串。<code>%d</code>为第二个格式符，表示一个整数。<code>(&#39;Vamei&#39;, 99)</code>的两个元素 <code>&#39;Vamei&#39;</code> 和 <code>9</code> 为替换 <code>%s和%d</code> 的真实值。<br>在模板和tuple之间，有一个 <code>%</code> 号分隔，它代表了格式化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%s    字符串 (采用str()的显示)</span><br><span class="line">%r    字符串 (采用repr()的显示)</span><br><span class="line">%c    单个字符</span><br><span class="line">%b    二进制整数</span><br><span class="line">%d    十进制整数</span><br><span class="line">%i    十进制整数</span><br><span class="line">%o    八进制整数</span><br><span class="line">%x    十六进制整数</span><br><span class="line">%e    指数 (基底写为e)</span><br><span class="line">%E    指数 (基底写为E)</span><br><span class="line">%f    浮点数</span><br><span class="line">%F    浮点数，与上相同</span><br><span class="line">%g    指数(e)或浮点数 (根据显示长度)</span><br><span class="line">%G    指数(E)或浮点数 (根据显示长度)</span><br><span class="line">%%    字符<span class="string">"%"</span></span><br></pre></td></tr></table></figure><h2 id="判断是否含有中文字符"><a href="#判断是否含有中文字符" class="headerlink" title="判断是否含有中文字符"></a>判断是否含有中文字符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_contain_chinese</span><span class="params">(check_str)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> check_str.decode(<span class="string">'utf-8'</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">u'\u4e00'</span> &lt;= ch &lt;= <span class="string">u'\u9fff'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>注意， ptn 加入了一个 <code>r</code> 作为正则表达式的<strong>标志</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ptn = <span class="string">r"r[au]n"</span>       <span class="comment"># start with "r" means raw string</span></span><br><span class="line">print(re.search(ptn, <span class="string">"dog runs to cat"</span>))    <span class="comment"># &lt;_sre.SRE_Match object; span=(4, 7), match='run'&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killPython </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Thread Dump</title>
      <link href="/blogs/e13c32e8.html"/>
      <url>/blogs/e13c32e8.html</url>
      
        <content type="html"><![CDATA[<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ol><li>tid - Java-Level Thread Id</li><li>nid - Native Thread Id</li></ol><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>dump 文件里，值得关注的线程状态有：</p><ol><li>死锁，Deadlock（<strong>重点关注</strong>） </li><li>执行中，Runnable   </li><li>等待资源，Waiting on condition（<strong>重点关注</strong>） </li><li>等待获取监视器，Waiting on monitor entry（<strong>重点关注</strong>）</li><li>暂停，Suspended</li><li>对象等待中，Object.wait() 或 TIMED_WAITING</li><li>阻塞，Blocked（<strong>重点关注</strong>）  </li><li>停止，Parked</li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>综合示范一：Waiting to lock 和 Blocked<br>实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;RMI TCP Connection(267865)-172.16.5.25&quot; daemon prio=10 tid=0x00007fd508371000 nid=0x55ae waiting for monitor entry [0x00007fd4f8684000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">at org.apache.log4j.Category.callAppenders(Category.java:201)</span><br><span class="line">- waiting to lock &lt;0x00000000acf4d0c0&gt; (a org.apache.log4j.Logger)</span><br><span class="line">at org.apache.log4j.Category.forcedLog(Category.java:388)</span><br><span class="line">at org.apache.log4j.Category.log(Category.java:853)</span><br><span class="line">at org.apache.commons.logging.impl.Log4JLogger.warn(Log4JLogger.java:234)</span><br><span class="line">at com.tuan.core.common.lang.cache.remote.SpyMemcachedClient.get(SpyMemcachedClient.java:110)</span><br></pre></td></tr></table></figure><p>1）线程状态是 Blocked，阻塞状态。说明线程等待资源超时！<br>2）“ waiting to lock <0x00000000acf4d0c0>”指，线程在等待给这个 0x00000000acf4d0c0 地址上锁（英文可描述为：trying to obtain  0x00000000acf4d0c0 lock）。<br>3）在 dump 日志里查找字符串 0x00000000acf4d0c0，发现有大量线程都在等待给这个地址上锁。如果能在日志里找到谁获得了这个锁（如locked &lt; 0x00000000acf4d0c0 &gt;），就可以顺藤摸瓜了。<br>4）“waiting for monitor entry”说明此线程通过 synchronized(obj) {……} 申请进入了临界区，从而进入了下图1中的“Entry Set”队列，但该 obj 对应的 monitor 被其他线程拥有，所以本线程在 Entry Set 队列中等待。<br>5）第一行里，”RMI TCP Connection(267865)-172.16.5.25”是 Thread Name 。tid指Java Thread id。nid指native线程的id。prio是线程优先级。[0x00007fd4f8684000]是线程栈起始地址。</0x00000000acf4d0c0></p><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><ol><li>Deadlock：死锁线程，一般指多个线程调用间，进入相互资源占用，导致一直等待无法释放的情况。</li><li>Runnable：一般指该线程正在执行状态中，该线程占用了资源，正在处理某个请求，有可能正在传递SQL到数据库执行，有可能在对某个文件操作，有可能进行数据类型等转换。</li><li>Waiting on condition：等待资源，或等待某个条件的发生。具体原因需结合 stacktrace来分析。<ol><li>如果堆栈信息明确是应用代码，则证明该线程正在等待资源。一般是大量读取某资源，且该资源采用了资源锁的情况下，线程进入等待状态，等待资源的读取。</li><li>又或者，正在等待其他线程的执行等。</li><li>如果发现有大量的线程都在处在 Wait on condition，从线程 stack看，正等待网络读写，这可能是一个网络瓶颈的征兆。因为网络阻塞导致线程无法执行。<ol><li>一种情况是网络非常忙，几乎消耗了所有的带宽，仍然有大量数据等待网络读写；</li><li>另一种情况也可能是网络空闲，但由于路由等问题，导致包无法正常的到达。</li></ol></li><li>另外一种出现 Wait on condition的常见情况是该线程在 sleep，等待 sleep的时间到了时候，将被唤醒。</li></ol></li><li>Blocked：线程阻塞，是指当前线程执行过程中，所需要的资源长时间等待却一直未能获取到，被容器的线程管理器标识为阻塞状态，可以理解为等待资源超时的线程。</li><li>Waiting for monitor entry 和 in Object.wait()：<ol><li>Monitor是 Java中用以实现线程之间的互斥与协作的主要手段，它可以看成是对象或者 Class的锁。每一个对象都有，也仅有一个 monitor。从下图1中可以看出，每个 Monitor在某个时刻，只能被一个线程拥有，该线程就是 “Active Thread”，而其它线程都是 “Waiting Thread”，分别在两个队列 “ Entry Set”和 “Wait Set”里面等候。在 “Entry Set”中等待的线程状态是 “Waiting for monitor entry”，而在 “Wait Set”中等待的线程状态是 “in Object.wait()”。</li></ol></li></ol><p><img src="media/15422828203917/15422834898884.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>耦合与内聚。</title>
      <link href="/blogs/e59253ce.html"/>
      <url>/blogs/e59253ce.html</url>
      
        <content type="html"><![CDATA[<h1 id="耦合-VS-内聚"><a href="#耦合-VS-内聚" class="headerlink" title="耦合 VS 内聚"></a>耦合 VS 内聚</h1><h2 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h2><p>耦合是对coupling的中文翻译。而coupling是couple的变形，指a connection (like a clamp or vise) between two things so they move together。</p><p>存在一种连接在两事物之间，以至于这两事物相互影响。</p><p>在本文中，耦合可以是一个名词——耦合度的同义词，也可以作为形容词——耦合性的同义词。</p><p>不少书籍都告诉我们要追求<strong>高内聚（High Cohesion）及低耦合（Low Coupling）</strong>的软件？高内聚和低耦合可以给我们软件开发人员带来可读性、复用性、可维护性和易变更性。</p><p>低耦合代表的是在软件不同级别的概念上只依赖它需要依赖的，从而达到它本身的修改不至于造成其它系统的非必要影响，反之亦然。</p><p>事实上，在软件开发过程中，耦合的本质是<strong>假设</strong>。</p><ol><li>在设计软件过程，在业务级别上，对与其交互的业务的假设是什么？</li><li>它需要使用哪些具体技术，可否将这些具体技术隔离出去，以至于我可以低成本的更换实现，也就是减少对具体技术的假设。</li><li>在写代码时，方法级别上它是不是对其它方法的处理结果进行假设了？类级别的设计有什么假设？等等。</li></ol><p>总的来说，就是找到软件开发过程中每个环节可能的假设，并问：如果这个假设并打破了，系统会受到什么影响？</p><p>以上，是传统意义上的低耦合。</p><p>我感觉上面这种概念很难理解。并且在写代码的时候，需要考虑很多的东西。</p><p>非常的复杂，可能，对于一个富有经验的老手来说，简单一点，但对于我来说，我很难在自己去编写代码的时候，考虑这么多的内容。</p><p>我在写代码的时候更多的是靠以下的概念。</p><p>我认为这是低耦合的一种变种。</p><p>下面有相关概念的变种。　－－&gt;&gt; 　依赖。</p><h2 id="依赖-＋-正交-＋-紧凑"><a href="#依赖-＋-正交-＋-紧凑" class="headerlink" title="依赖　＋　正交　＋　紧凑"></a>依赖　＋　正交　＋　紧凑</h2><ol><li>依赖<br><strong>依赖</strong>和耦合的最大区别在于，当我们说“A和B耦合”时，在字面含义中，A和B二者平等。然而，正确的模块关系根本不应该平等，而应该是单向依赖才对。所以我们应该说“A依赖B”，这样含义要清楚得多。A依赖B意味着，A模块可以调用B模块暴露的API，但B模块绝不允许调用A模块的API。<br><strong>单向依赖</strong>是红线，好的设计一定不会违反这条红线。<br>只要程序员编写模块A时，需要知道模块B的存在，需要知道模块B提供哪些功能，A对B依赖就存在。</li><li>正交<br><strong>正交性</strong>是指一个模块提供的API中，多个方法之间是否有重复的功能。如果有重复功能，正交性就差。<br>通常，正交性高的模块更稳定，不会因为上层业务变化而被迫修改代码。好的API内部的多个方法之间不应该有任何重复功能，只实现正交的机制。<br>如果感觉拆得太细使用不便，应该在底层API之外包装出一层Helper、Utility组成的<strong>胶水层</strong>。<br>胶水层调用底层原语API来实现常用模式供上层使用。对于胶水层中的模块，对正交性的要求可以稍低一些。注意上层代码既可以直接调用正交的底层API，又可以调用胶水层的常用模式。</li><li>紧凑<br><strong>紧凑性</strong>是指一段程序提供的API中，公有方法总数必须很少，每个方法的参数也必须很少。<br>《代码大全》上说一个类应该将参数的类型限制为 7 个。多了，就需要考虑这个类的作用，功能，然后拆分。</li></ol><p>通过这三个指标，将一段程序给量化。</p><p>正交： 方便程序的复用，并减少对程序本身单一功能的污染</p><p>依赖：理解每一段代码的功能与另一端代码功能之间的关系。可以帮助这一段代码的整体逻辑更加的清楚。</p><p>紧凑：是为了方便理解这个类的功能。</p><h2 id="依赖注入-DI-控制反转-IOC"><a href="#依赖注入-DI-控制反转-IOC" class="headerlink" title="依赖注入　DI + 控制反转　IOC"></a>依赖注入　DI + 控制反转　IOC</h2><p> <strong>控制反转</strong>　：　<br>a　依赖　b, 但　a 不控制　b　的创建和销毁。交由第三方控制。<br> <strong>依赖注入</strong>　：<br>a 依赖　b,　必然使用　b 的 instance。使用的方法有三种：</p><p>1.　通过　a 的接口传入<br>2.　通过　a 的构造传入<br>3.　通过设置　a 的属性将　b 传入</p><p>当时，在面试的时候，就问我这个问题， 这两个名词作用就是减少耦合。</p><p>一段生动形象的比喻是这样的。</p><p>正常的造一辆车，是先造轮子，然后底盘，然后外壳，发动机，最后建成一辆车。</p><p>但是如果轮子换了，上面的底盘，外壳，发动机可能都要改变，因为这整个车都是依赖于底层的轮子建造起来的。</p><p>而 DI + IOC 的逻辑是，</p><p>先有一辆车，然后传入发动机，发动机传入外壳，外壳传入底盘，底盘传入轮子。、</p><p>这样一来，即便轮子换了，只需要改变轮子的形状，样式，然后传入底盘就可以了，完全影响不到上层模块的构建。</p><p>这样上层模块（车）就和下层模块（轮子）解耦了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上就是我理解的耦合，很浅显，还有很多要学习的地方。</p><p>并且只有不断的实践才能帮助自己真正理解这个概念。</p><p>代码之路，才刚刚启程~~</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《见识》 读书笔记</title>
      <link href="/blogs/3adec6d9.html"/>
      <url>/blogs/3adec6d9.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-序言"><a href="#0-序言" class="headerlink" title="0. 序言"></a>0. 序言</h2><p>注意你的想法，因为它能决定你的言辞和行动<br>注意你的言辞和行动，因为它能主导你的行为<br>注意你的行为，因为它能变成你的习惯<br>注意你的习惯，因为它能塑造你的性格<br>注意你的性格，因为它能决定你的命运<br>– 撒切尔夫人</p><h2 id="1-商业的本质"><a href="#1-商业的本质" class="headerlink" title="1. 商业的本质"></a>1. 商业的本质</h2><p>商业的本质是让人花钱，不是省钱。<br>第一个趋势，<br>    从线上到线下，从实体到虚拟。目的是为了省时间，省钱。<br>    但是，2016年，互联网企业的销售额3800亿美元。<br>    而传统意义上的电信行业有35000亿美元。<br>第二个趋势<br>    从线上回到线下，则是为了花时间，花钱。只有花钱才能拓宽道路。</p><p>没有选择的好处。<br>苹果的定位是为了给大家争面子。通过苹果的优秀的品牌推广，苹果是将自己的品牌溢价出一个合理的区间。每次只推出两个产品。选择的余地少，但是往往这两个产品就代表着手机行业的最顶尖的水平。苹果的iphone5c，是为了拓宽商品线，而为了做出的改变。是当年的苹果最便宜的商品。但是，市场效果并不好。在中国更是将“多样”的c 戏称为 “廉价” 的c 。</p><p>产品的三个阶段。</p><ol><li>革命性发明的出现。</li><li>方便使用但价格昂贵。</li><li>解决价格问题，普及大众。</li></ol><p>未来商业的本质</p><ol><li>共享经济： 什么叫共享经济。不是让大家减少消费，而是通过这个概念，让大家增加消费。</li><li>跟踪经济:  根据每一个人的生活习惯，量身定做相应的东西，贴合每个人的要求，这样才能成为一个日用品。</li><li>合作经济： 原先的互联网＋的概念很是狭隘，准确的来说，应该是＋互联网。现在是一个新的时代，从农业时代，蒸汽时代，电气时代，然后是Pc端的过渡，现在是互联网时代。</li><li>众筹经济： 让大家参与进来，不光是参与到这个设计的方面，还要直接问用户，买还是不买。小米的饥饿营销就是这个套路。</li></ol><h2 id="2-创业的n-1"><a href="#2-创业的n-1" class="headerlink" title="2. 创业的n+1"></a>2. 创业的n+1</h2><p>对创始人来说，</p><ol><li>你应该成为公司的刹车，而不是引擎。</li><li>你最主要的工作是招人。</li><li>你最大的作用是成为一个信仰，或者说为公司找到一个信仰。也就是确立公司的文化。</li><li>确立一个公司的期望最大化函数。<br>以物理学层面上讲，各物质之间有四种基本力，强核力，形成原子核。弱核力保证原子核还要太大。电磁力保证原子核和电子能够形成原子。万有引力保证物质能够形成星球。宇宙通过这几条规则，不断的演化，最后孕育出生命。<br>一个公司的基本规则就是期望最大化函数。谷歌的规则是 engineer &gt; product manager ，所以在公司里 产品经理的权力要小于 工程师。腾讯的则相反是注重用户的体验，所以 腾讯内部 product manager &gt; engineer .</li></ol><p>对产品来说，一个好的产品需要注意以下几点。</p><ol><li>好产品的目标必须明确</li><li>好产品没有绝对的正确答案，只能在当时的情况下寻找最好的解决方法。就像你在做测试的时候，有时候即使发现了bug，也会为了因为优先级原因而让步。对于一个工程师而言，他不能等待条件的成熟，而是要尽可能地利用现有技术解决实际问题。</li><li>随着一个问题的解决，还会随之出现新的问题，因此，工程师要和产品经理不断协商，作出取舍。</li><li>当目标改变时，要学会舍弃，改变原先的架构，或者直接舍弃这个产品。避免尾大不掉。</li></ol><p>对方向来说，为了战胜大公司，除了上面<strong>商业的本质</strong>不能违反，还要注意以下几点：</p><ol><li>大公司已经涉及的领域是很难被打败的，找不到相应的方向前，可以选择那些大公司不愿意干的脏货，累活。<br>因为在人工智能领域时代创业，三类公司会得到大量的机会，<br>一是谷歌，微软，BATJ等平台型公司，拥有大量的人力财力，拥有自己的得天独厚的优势，别人很难撼动，相当于处在很长一段时间的舒适发展期。<br>二是传统电信产业，银行产业等，拥有大量的数据，但不知道如何使用或者商业规模老旧一时无法转型的公司<br>三是掌握新技术的创业公司，拥有技术专长，但没有第一类公司的水平，业务水平也低于第一类公司人综合实力。但是在第一类公司和第二类公司存在利益冲突的情况下，完全可以凭借着这个优势，得到大量的发展机会。</li><li>找到那些具有颠覆性的技术。<br>硅谷的企业往往不是技术的创世人，但是他们能够将原来的技术转化为自己的东西。并且他们往往具有的叛逆与执拗支撑着这个技术的不断突破。这样的技术是洋枪洋炮，拥有这样技术的企业将成为新时代的行业领袖。如此这般，你才能将整个时代的推动力化为自己的助推力。你与那些大企业的争斗，将是两个时代的争斗。拥有一个时代力量的新企业，将不断收益于不断发展的技术，只有这样，你才能将原先那些占据着行业魁首的企业打败。</li><li>进攻是最好的防守。<br>二战时期德军领袖曼施泰因，发明了闪电战的打法。凭借这种打法，他在德国与苏联的战争中，在德国遭受斯大林格勒战役惨败后，力挽狂澜，带领7万德国军队，大胆奇袭，重创35万苏联军队，歼灭对方52个师。<br>回到现在，谈到技术，专利是离不开的一个话题，经常会在网络上看到哪家公司告哪家公司侵权之类的话题。但是，当一个公司拥有着强劲的势头的时候，他往往不会注意这个东西。<br>在硅谷最富创新的公司在最富创新的时期往往专利数量并不多，无论是facebook,google,apple都是这样。因为专利是用来防守的，一个极富创新力的公司会用极快的速度将技术转化为产品，然后引领行业。但是当一个公司的发展势头放缓的时候，就需要通过专利权减缓竞争对手的势头，保护她的侧翼和后方。</li></ol><p>谷歌的创世人– 拉里佩奇的智慧</p><ol><li>薪尽火传<br>对公司来说，一个公司想要成为一个百年老店的可能性微乎其微，无论是欧洲的豪门还是日本的企业，他们即便真正让品牌存活下上百年的时间，其背后的掌权人往往也会变了几番。<br>所以做一个公司的理念，应该放宽。要首先认识到公司是很可能死的。<br>要努力寻找下一次机会，开创一个专而精的有活力的公司，生前站在时代浪巅，死后将资产经验传递给下一任，下一代的公司。<br>就比如谷歌。谷歌是做搜索起家，后来拉里佩奇决定成立alphbet 公司，将原先谷歌的业务打包分出去，成立一个子公司交给 皮柴 掌管。 现在，alphbet 的领域涉及医疗（calico) , 风投（google ventures） , 资本（google capital) , 智能家庭（nest) etc.. 但是，拉里佩奇很精髓的一点是，他并没有安排其他人去开创新的业务，而是交给自己这个困难的问题。为什么？因为，基因决定论。只有一个公司的创始人才能深刻知道自己想创办的公司是一家什么样的公司，什么样的文化，什么样的基因。他通过这种一以贯之的文化传播，让这些子公司都鲜明的带着 google 的血液。 通过这种方式来传承一个公司的基因和文化。</li><li>“牙刷” 产品<br>将产品做成牙刷，这是打了一个比喻，是因为每家每户每一个人都需要使用牙刷，这是一个习惯。而习惯是一个非常可怕的力量。<br>想要让产品成为牙刷需要：<ol><li>可靠性和稳定性。</li><li>爆款。<br>由于牙刷式产品的功能简单，容易被同类型的产品取代。而人总是有好奇的心理，希望能够多多尝试新的东西。所以要每过一段时间给大家一个惊喜，提醒大家他的存在。这就是可口可乐公司和宝洁公司的产品这么有名，他们还要每年花上百亿美元做广告的原因。<br>再举一个例子，就是英特尔公司。当年英特尔公司 x86 架构的处理器和摩托罗拉的 RISC 架构的处理器竞争。RISC 架构的处理器明明架构更合理确依然失败了。 英特尔的首席执行官 安迪格鲁夫是这么解释的。英特尔公司的处理器 产品线是 18 个月一更新。 而其他公司是 36个月一更新。 36个月 这个过程太长，用户已经慢慢把产品给遗忘了，而18 个月却能不断的刷新用户的记忆。 这就是致胜的原因。<br>这个道理在如今的移动互联网社会也是共通的。app的不断更新，除了弥补之前的问题，推出新的功能，提高用户粘性，还有一部分原因是为了刷存在感。让用户意识到这个app 的存在。<br>这个道理一样可以适用在职场上，每周做一次工作总结，不要多，<strong>固定数量</strong>的几句话就可以，然后周一早上汇报。每半年到一年，给出一个惊喜的成果。这样是刷存在感，最合适的方式。</li></ol></li><li>寻求商业本质<br>《智能时代》中讲，连接比拥有更重要。对于谷歌来说，就是将<strong>有用</strong>的信息送达到每一个用户。注意，这里的有用很重要，谷歌使用算法严格控制搜索结果的质量。保证用户看到的信息是客观公正的，权威的。虽然会采用广告，但会与自然搜索的结果严格的区分来，表示自然搜索的结果是不沾染任何商业利益的。<br>这种模式在互联网时代很常见，比如阿里巴巴，所销售的商品都不是自己的，作用只是把商品信息送达用户。<br>但是，当你不能突破原有的水平时，你所奉献的就不是<strong>有用</strong>的东西。比如必应搜索虽然也是在做相似的事情，但是，谷歌已经做了这件事，微软的必应就违背了“有用”这个原则。</li></ol>]]></content>
      
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>final 变量的修改与问题</title>
      <link href="/blogs/ce574744.html"/>
      <url>/blogs/ce574744.html</url>
      
        <content type="html"><![CDATA[<h1 id="Final-变量反射修改"><a href="#Final-变量反射修改" class="headerlink" title="Final 变量反射修改"></a>Final 变量反射修改</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">field = Comtest.class.getDeclaredField(<span class="string">"value1"</span>);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Field modifiersField = Field.class.getDeclaredField(<span class="string">"modifiers"</span>);</span><br><span class="line">modifiersField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">modifiersField.setInt(field,field.getModifiers()&amp;~Modifier.FINAL);</span><br><span class="line">field.set(<span class="keyword">null</span>, <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>&#125;);</span><br></pre></td></tr></table></figure><p>field.getModifiers()&amp;~Modifier.FINAL 这句话就是去掉final。其实java的访问权限信息啥的都是以2的N次幂来作为表示的，具体都是在java.lang.reflect.Modifier这个类里。getModifiers()&amp;~Modifier.FINAL  具体看下问运算，如果有（111111&amp;000000=000000.）抹去了16这个final标识。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>int/float/String 等不能使用变量反射修改。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>live_Win_IPv6Setting</title>
      <link href="/blogs/d482faa4.html"/>
      <url>/blogs/d482faa4.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-开启-ipv4-到-ipv6-的转换"><a href="#1-开启-ipv4-到-ipv6-的转换" class="headerlink" title="1. 开启 ipv4 到 ipv6 的转换"></a>1. 开启 ipv4 到 ipv6 的转换</h4><p>将以下代码保存为 <strong>.bat</strong> 格式，并以管理员方式运行<br>@echo off<br>netsh interface isatap set state default<br>netsh interface teredo set state default<br>netsh interface teredo set state server=teredo.remlab.net<br>netsh interface ipv6 set teredo enterpriseclient</p><h2 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h2><h4 id="2-开启路由的-ipv6-功能"><a href="#2-开启路由的-ipv6-功能" class="headerlink" title="2. 开启路由的 ipv6 功能"></a>2. 开启路由的 ipv6 功能</h4><p>netsh int ipv6 add route ::/0 “有效的Teredo接口名称”,<strong>成功会提示 “确定”</strong></p><p>有效的接口名称查看方法：<br>这里的有效接口就是你的网络适配器的名称。如下图：<br><img src="http://ovmspkp0s.bkt.clouddn.com/201711162032_700.png" alt=""><br>我是使用的 “ 无线网络连接 ” 。<br>所以我应该在 命令行中输入 ：<br><code>netsh int ipv6 add route ::/0 &quot;无线网络连接&quot;</code><br>设置好后，可以通过如下命令查看<br><code>netsh int ipv6 show route</code> , 效果图如下：<br><img src="http://ovmspkp0s.bkt.clouddn.com/201711162035_906.png" alt=""></p><p>然后就可以登入这个网站进行 <a href="http://test-ipv6.com/" target="_blank" rel="noopener">ipv6测试</a></p><hr><h4 id="3-Teredo-驱动问题"><a href="#3-Teredo-驱动问题" class="headerlink" title="3. Teredo 驱动问题"></a>3. Teredo 驱动问题</h4><p>失败的情况<br><img src="http://ovmspkp0s.bkt.clouddn.com/201711162038_895.png" alt=""><br>我原先这个驱动 <code>Microsoft Teredo Tunneling Adapter</code> 是无法启动的。上面显示一个黄色的图标。</p><p>通过以下方式，可以解决。</p><pre><code>1. 使用管理员账号打开的命令提示符；2. 输入netsh并按回车键；3. 输入int teredo并回车；4. 输入 set state disabled 并回车；5. 然后打开设备管理器并卸载&quot; Microsoft Teredo Tunneling Adapter&quot;；6. 再重新用管理员身份进入命令提示符下；7. 输入netsh并回车；8. 输入int ipv6并回车；9. 输入set teredo client并回车；10. 打开设备管理器---操作---添加过时硬件。 11. 安装驱动 &quot;Microsoft Teredo Tunneling Adapter&quot;</code></pre><p>然后重新使用上面的方式，就可以进行测试。</p>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象葵花宝典</title>
      <link href="/blogs/325dab97.html"/>
      <url>/blogs/325dab97.html</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>结构化设计</p><p>结构化程序设计的主要特点是抛弃goto语句，采取“自顶向下、逐步细化、模块化”的指导思想</p><p>人脑存在人类短期记忆一般一次只能记住5-9个事物，这就是著名的 7+- 2原理</p><p>面向过程</p><p>面向过程是一种以“过程”作为中心的编程思想，其中过程的含义就是“完成一件事情的步骤</p><p>面向对象</p><p>更加侧重于对现实世界的模拟</p><p><strong>面向过程</strong>中有“程序=算法+数据结构”的经典总结，</p><p><strong>面向对象</strong>也有类似的总结：“程序=对象 + 交互”。其中对象就是具体存在的事物，而交互则是事物之间的相互作用、互动等。 </p><p>中文<strong>“可扩展性”</strong>对应英文有两种解释：extensibility 和 scalability，extensibility指系统需求变化后，能够比较容易的扩展以支持新需求；scalability指系统访问压力增加后，能够通过简单的增加更多硬件设备以支撑访问压力，又翻译为“可伸缩性”。 本文的可扩展性是指extensibility。</p><p><img src="https://img-blog.csdn.net/20131217102801859" alt="软件质量"></p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类是本，代码是末，只有清晰地掌握了类的概念，才能写出好的代码。</p><p><strong>那究竟何为类呢？ </strong></p><p>物以类聚人以群分。</p><p><strong>类就是一组相似事物的统称。</strong></p><p>首先：请看“<strong>一组</strong>”，思考一下为什么是“一组”，不是“一个”？</p><p>其次：请看“<strong>相似</strong>”，思考一下为什么是“相似”，不是“相同”？</p><p>最后：请看“<strong>统称</strong>”，思考一下为什么是“统称”，不是“名称”？ </p><p>第一个玄机——“一组”：一组的玄机在于“多个“，单个事物无法成为类。</p><p>一个很简单的例子：“人“可以是一类，但“我”就不是一个类（那又是什么呢，请看后文分解？） </p><p>第二个玄机——“相似”：相似的玄机在于“比较像，但不完全相同”。</p><p>还是“人”这个例子：奥巴马和克林顿都是美国总统，都是人，有很多相似的地方，但他们两个绝对不是完全相同的。 </p><p>第三个玄机——“统称”：统称的玄机在于“统”，也可以叫做“通称”，统称要能够概括这多个事物。</p><p>还是上一个例子：奥巴马和克林顿的统称可以为“人”、“男人”、“总统”，但不会统称为“奥巴马”，因为奥巴马是一个具体的人了。 </p><p>类的定义玄机我们已经基本解读，看起来已经比较清晰了，但不要高兴太早，还有一个更大的玄机：<strong>我们怎么划分类？</strong></p><p><strong>只要有相似点的就是同一类</strong></p><p><strong>站在你的观察角度，具有相似点的事物就是同一类</strong>！</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>定义对象为“一个具体的类”，但这是否意味着必须是先有类后有对象呢？</p><ul><li>现实对象：你能看到的物体都可以称为现实对象；</li><li>现实类：对现实对象的归纳总结；</li><li>软件对象：软件实际运行过程中存在的对象；</li><li>软件类：软件设计过程中归纳总结出来的类；</li></ul><p><img src="/Users/3dot141/Documents/葵花宝典_07.01.png" alt="葵花宝典_07.01"></p><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p><strong>第一个层次：对象 抽象成 类。</strong></p><p>例如奥巴马和梅西抽象成“人”，这一层的抽象主要是将“属性类似”的对象抽取成类。</p><p><strong>第二个层次（或更高层次）：将 类 抽象成超类</strong></p><p>例如人和猪抽象成“动物”，这一层的抽象主要是将“行为类似”的类抽象成父类。</p><p>抽象最主要的作用是“划分类别”，而划分类别的主要目的其实还是“隔离关注点，降低复杂度”</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>第一个问题是：我们要封装什么？</p><p>第二个问题是：我们为什么要封装？</p><ul><li>封装数据的主要原因是“<strong>保护隐私</strong>”</li><li>封装方法的主要原因是“<strong>隔离复杂度</strong>”</li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>抽象：是分析和设计过程中的一个动作，一个技巧，通过抽象得出类</p><p>继承：是实现过程中的一个动作，基于抽象结果，通过编程语言的特性，完成抽象图的模拟。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态屏蔽了子类对象的差异，使得调用者可以写出通用性的代码，而无需针对每个子类都需要写不同的代码。</p><h2 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h2><h3 id="1-管理流程"><a href="#1-管理流程" class="headerlink" title="1. 管理流程"></a>1. 管理流程</h3><p>瀑布模型、螺旋模型、迭代开发、敏捷、RUP</p><h3 id="2-技术流程"><a href="#2-技术流程" class="headerlink" title="2.  技术流程"></a>2.  技术流程</h3><p>需求模型 -&gt; 领域模型 -&gt; 设计模型 -&gt; 实现模型</p><p>l 需求模型</p><p>通过和客户沟通，结合行业经验和知识，明确要求客户的需求。</p><p>l 领域模型</p><p>基于需求模型，提炼出领域相关的概念，为后面的面向对象设计打下基础。</p><p>l 设计模型</p><p>以领域模型为基础，综合面向对象的各种设计技巧，完成类的设计。</p><p>l 实现模型</p><p>以设计模型为基础，将设计模型翻译为具体的语言实现，完成编码。</p><h2 id="需求模型"><a href="#需求模型" class="headerlink" title="需求模型"></a>需求模型</h2><p>需求：对客户来说有价值的事情；</p><p>功能：系统为了实现客户价值而提供的能力；</p><p><strong>例子</strong></p><p>POS机：“买单”是需求，“商品扫描”、“金额汇总”、“收银”等是功能，因为买完单后顾客就能将产品拿走；</p><p>汽车：“驾驶”是需求，“发动机”、“刹车”、“加速”等是功能；</p><p>打印机：“打印”是需求，“进纸”、“设定”、“与电脑连接”等是功能；</p><p><strong>需求分析 518 方法</strong></p><p>5：5W，即When、Where、Who、What、Why</p><p>1：1H，即How</p><p>8：8C，即8个Constraint，包括性能Performance、成本Cost、时间Time、可靠性Reliability、安全性Security、合规性Compliance、技术性Technology、兼容性Compatibility    </p><p><strong>提取功能点</strong></p><p>是动词——提取出来，就成为了系统的功能。</p><p><strong>用例 use case</strong></p><p>NEA 方法</p><p>1） 正常处理（Normal）：通过和客户沟通，分析需求的正常流程；</p><p>2） 异常处理（Exception）：在正常处理流程的步骤上，分析每一步的各种异常情况和对应的处理；</p><p>3） 替代处理（Alternative）：在正常处理流程的步骤上，分析每一步是否有其它替代方法，以及替代方法如何做；</p><h2 id="领域模型"><a href="#领域模型" class="headerlink" title="领域模型"></a>领域模型</h2><p>1）发掘重要的业务领域概念</p><p>2）建立业务领域概念之间的关系</p><p><strong>总结</strong> ： <strong>找名词、加属性、连关系</strong>。</p><table><thead><tr><th>名词</th><th>属性</th><th>备注</th></tr></thead><tbody><tr><td>顾客</td><td>NA</td><td>对于POS机来说，并不需要识别顾客的相关信息，因此在领域模型中，顾客是没有属性的</td></tr><tr><td>收银员</td><td>国籍、编号</td><td>“国籍”由找名词步骤中的“中国人”提炼</td></tr><tr><td>商品</td><td>条形码、名称、价格</td><td>名称和价格并没有在用例中体现，但毫无疑问这是商品最基本的属性</td></tr><tr><td>扫描仪</td><td>NA</td><td>扫描仪是POS机的一个输入设备，POS机不需要识别扫描仪的相关信息，因此在领域模型中，扫描仪也是没有属性的</td></tr><tr><td>钱（现金）</td><td>数量，币别</td><td>从领域分析的角度来讲，“现金”更专业一些</td></tr><tr><td>信用卡</td><td>卡号</td><td>NA</td></tr><tr><td>会员卡</td><td>会员号、积分、有效期</td><td>NA</td></tr><tr><td>小票</td><td>交易信息、POS机信息、收银员信息</td><td>小票的属性在用例中并没有详细体现，但有经验的分析师能够很容易识别出来</td></tr><tr><td>买单（交易）</td><td>商品列表、日期时间、总额、支付信息</td><td>这里的属性看起来和“小票”一样，是因为“小票”本质上是给客户的一个交易记录。这里为了更加符合软件系统的属于习惯，可以将“买单“改为“交易”。</td></tr><tr><td>键盘</td><td>NA</td><td>和扫描仪类似，POS机不需要识别键盘信息</td></tr><tr><td>屏幕</td><td>NA</td></tr></tbody></table><h2 id="设计模型"><a href="#设计模型" class="headerlink" title="设计模型"></a>设计模型</h2><p><strong>静态模型</strong>又可以称为“类模型”，主要关注系统的“静态”结构，描述了系统包含的类， 以及类的名称、职责、属性、方法，类与类之间的关系。</p><p><strong>动态模型</strong>关注系统的“动态”行为，描述类本身的一些动作或者状态变化，以及类之间如何配合以完成最终的业务功能。只有结合静态模型和动态模型，我们才能够真正的将一个系统描述清楚。</p><p><strong>静态模型和动态模型</strong>对于后续的编码也具有不同的指导意义。静态模型主要用于指导类的声明，包括类名称，属性名，方法名；而动态模型主要用于指导类的实现，主要就是每个方法内部的具体实现。</p><h2 id="类模型"><a href="#类模型" class="headerlink" title="类模型"></a>类模型</h2><p><strong>问题</strong><br>对象从哪里来？</p><p>什么时候用设计模式？</p><p>如何判断设计是否正确？</p><p>什么样的设计才是优秀的设计？</p><p>第一步（照猫画虎）：领域类映射 — 告诉你类从哪里来</p><p>领域模型找名词，用例分析找动词。</p><p>第二步（精雕细琢）：应用设计原则和设计模式   —告诉你如何设计“好”类</p><table><thead><tr><th>首字母</th><th>英文简写</th><th>英文名称</th><th>中文名称</th><th>说明</th></tr></thead><tbody><tr><td>S</td><td>SRP</td><td>Single Responsibility Principle</td><td>单一职责原则</td><td>对象应该只具备单一职责</td></tr><tr><td>O</td><td>OCP</td><td>Open/Close Principle</td><td>开放/封闭原则</td><td>认为“软件体应该是对于扩展开放的，但是对于修改封闭的”的概念。</td></tr><tr><td>L</td><td>LSP</td><td>Liskov Substitution Principle</td><td>Liskov替换原则</td><td>认为“程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的”的概念</td></tr><tr><td>I</td><td>ISP</td><td>Interface Segregation Principle</td><td><a href="http://zh.wikipedia.org/w/index.php?title=%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">接口隔离原则</a></td><td>多个特定客户端接口要好于一个宽泛用途的接口</td></tr><tr><td>D</td><td>DIP</td><td>Dependency Inversion Principle</td><td><a href="http://zh.wikipedia.org/wiki/%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC%E5%8E%9F%E5%88%99" target="_blank" rel="noopener">依赖反转原则</a></td><td>依赖于抽象而不是一个实例</td></tr></tbody></table><p><strong>设计原则主要用于指导“类的定义”的设计，而设计模式主要用于指导“类的行为”的设计</strong></p><p>第三步（照本宣科）：拆分辅助类   —告诉你如何和你的开发框架结合起来</p><h2 id="内聚和耦合"><a href="#内聚和耦合" class="headerlink" title="内聚和耦合"></a>内聚和耦合</h2><p>内聚关注模块内部的元素结合程度，耦合关注模块之间的依赖程度。</p><h3 id="1-内聚"><a href="#1-内聚" class="headerlink" title="1. 内聚"></a>1. 内聚</h3><p>cohesion refers to the degree to which the elements of a <a href="http://en.wikipedia.org/wiki/Module_(programming" target="_blank" rel="noopener">module</a>) belong together.</p><p>（<a href="http://en.wikipedia.org/wiki/Cohesion_(computer_science)）" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Cohesion_(computer_science)）</a></p><p>cohension 也指 凝聚力。</p><p>l 判断团队凝聚力时，我们关注团队成员是否都专注于团队的目标；判断面向对象模块的凝聚力时，我们同样关注元素是否专注于模块的目标，即：模块本身的职责！</p><p>l 判断团队凝聚力时，我们还会关注团队成员之间是否互相吸引和帮助；判断面向对象模块凝聚力时，我们同样关注元素间的结合关系；</p><p>像 DAO 层，都是依赖于其他模块完成本模块的工作。</p><h3 id="2-耦合"><a href="#2-耦合" class="headerlink" title="2. 耦合"></a>2. 耦合</h3><p> coupling or dependency is the degree to which each <a href="http://en.wikipedia.org/wiki/Module_(programming" target="_blank" rel="noopener">program module</a>) relies on each one of the other modules</p><p>（<a href="http://en.wikipedia.org/wiki/Coupling_(computer_science)）" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Coupling_(computer_science)）</a></p><h3 id="3-高内聚低耦合"><a href="#3-高内聚低耦合" class="headerlink" title="3. 高内聚低耦合"></a>3. 高内聚低耦合</h3><p>低内聚:</p><p>Person类改变后，虽然这个改动和Coach、Director都没有关系，但Coach和Director类都需要重新编译测试部署</p><p>高耦合：</p><p>对于高耦合的模块，<strong>可能本身并不需要修改</strong>(低内聚是每次自己都要修改)，但每次其它模块修改，当前模块都要编译、测试、部署，工作量同样不小。</p><h3 id="4-冲突"><a href="#4-冲突" class="headerlink" title="4. 冲突"></a>4. 冲突</h3><p>我们详细来分析一下为什么高内聚和低耦合是冲突的。</p><p>对于内聚，在一个类的层面上，一个类只有一个方法，这个模块内部内聚性很高。但是在这个类同一层的抽象上，这个模块（以类为模块）的需要大量依赖其他的模块。这是一个高内聚高耦合的模块。</p><p>同理，对于耦合来说，最弱的耦合是一个类将所有的函数都包含了，这样类完全不依赖其它类，耦合性是最低的。但这样会带来一个明显的问题：内聚性很低，于是整个设计就变成了“低耦合低内聚”了。由于低内聚，整个类的变动同样非常频繁。</p><p>对于“低耦合低内聚”来说，还有另外一个明显的问题：几乎无法被其它类重用。原因很简单，类本身太庞大了，要么实现很复杂，要么数据很大，其它类无法明确该如何重用这个类。</p><h2 id="SRP-原则-–-单一职责原则"><a href="#SRP-原则-–-单一职责原则" class="headerlink" title="SRP 原则 – 单一职责原则"></a>SRP 原则 – 单一职责原则</h2><p>有很多翻译叫做： 一个类只做一件事。一个类只有一个变化的原因。</p><p>但是这个太难满足了。</p><p>我们从语义上说。什么叫职责？ </p><p>“职责”是站在他人的角度来定义的，而不是自己定义的。</p><p>所以类的职责：</p><p>1） 类的职责是站在其它类的角度来定义的；</p><p>2） 类的职责包含多个<strong>相关功能</strong>；</p><p><strong>一个类只负责一组相关的事情</strong></p><p>SRP不能应用于聚合类，那么如何保证聚合类的设计质量呢？</p><h2 id="OCP-原则-？？？-–-还是不能理解。。"><a href="#OCP-原则-？？？-–-还是不能理解。。" class="headerlink" title="OCP 原则 ？？？ – 还是不能理解。。"></a>OCP 原则 ？？？ – 还是不能理解。。</h2><p>open for <strong>provider</strong> extension，closed for <strong>consumer</strong> modification</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>book -- 学会提问</title>
      <link href="/blogs/bbd7ce62.html"/>
      <url>/blogs/bbd7ce62.html</url>
      
        <content type="html"><![CDATA[<ol><li>淘金式思维与海绵式思维</li><li>弱者批判性思维与强者批判性思维</li><li>关键问题<ol><li>论题和结论是什么</li><li>理由是什么</li><li>哪些词语的意思不明确</li><li>什么是价值观假设和描述性假设</li><li>推理过程中有没有谬误</li><li>证据的效力如何</li><li>有没有替代原因</li><li>数据有没有欺骗性</li><li>有什么重要信息被省略了</li><li>能得出哪些合理的结论</li></ol></li><li>提问之前学会分析，关我什么事</li><li>下结论时，有理有据，然后信心百倍。但留有余地，三思后行。</li></ol><p>两种论题：</p><pre><code>1. 描述性论题：对过去、现在或将来的各种描述是否精确的命题2. 规定性论题：我更想称之为是社科类命题</code></pre><p>词语的解释方法： 举例-忧虑</p><pre><code>1. 同义替换：忧虑就是感到紧张不安2. 举例说明：忧虑就是候选人打开电视收看选举结果公布时的心情3. 具体标准定义：忧虑是一种主观上的不适感，伴随有自主神经系统越来越强的感受。</code></pre><p>如果判断价值观假设：</p><pre><code>1. 从身份信息2. 从其推论的结果。核电厂污染环境 vs 核电厂提高供电量</code></pre><p>描述性假设：对过去，现在与未来是什么样的想法。</p>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>killBase系列 -- 设计模式</title>
      <link href="/blogs/5b269d9f.html"/>
      <url>/blogs/5b269d9f.html</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>过去，曾经看过一本书， Head First 设计模式。<br>那是第一次真正意义上的接触设计模式上面的东西。生动形象加上贴图作为例子。<br>可以说是对设计模式有了一点初步的了解，但是，碍于时间原因，不过是浅尝辄止吧。<br>不过，现在入职后，因为要阅读大量的源码，所以，需要对代码结构有更深层次的了解。<br>因此，通过设计模式进行对照，一方面方便源码的阅读，一方面加深自己对设计模式的印象。</p><p>不过这一次的博客，不能像过去那样，只是作为一个知识的储存场所。应该是整理思维脉络的时候。<br>所以，这一次的大概逻辑是</p><ol><li>先把自己能想象到的设计模式列出来。</li><li>然后把作用列出来。</li><li>然后是 Uml 图。</li><li>最后做补充。</li></ol><h2 id="Factory-Method"><a href="#Factory-Method" class="headerlink" title="Factory Method"></a>Factory Method</h2><p>生成实例的工厂。 有别于静态工厂。</p><h2 id="Template-Method"><a href="#Template-Method" class="headerlink" title="Template Method"></a>Template Method</h2><p>将逻辑写到抽象类中，然后具体实现由子类实现</p><h2 id="Iterator-模式"><a href="#Iterator-模式" class="headerlink" title="Iterator 模式"></a>Iterator 模式</h2><p>帮助遍历整个集合</p><h2 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h2><p>将两个不同的类，组合起来。并对外界表现为其中一个的模样</p><h2 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h2><p>桥接，说明有两个岸。分别代表功能层次与实现层次</p><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>取消 if 语句</p><h2 id="Builder"><a href="#Builder" class="headerlink" title="Builder"></a>Builder</h2><p>灵活的创建相应的对象。</p><h2 id="Composite"><a href="#Composite" class="headerlink" title="Composite"></a>Composite</h2><p>File 与 Directory ， 但是同属于 Item</p><h2 id="Abstract-Factory"><a href="#Abstract-Factory" class="headerlink" title="Abstract Factory"></a>Abstract Factory</h2><p>上面的工厂是生成不同的实例，而这里的工厂是生成不同的工厂。</p><h2 id="Visitor-模式"><a href="#Visitor-模式" class="headerlink" title="Visitor 模式"></a>Visitor 模式</h2><p>交给 拜访者 做某些事情。</p><h2 id="Chain-of-Responsibility"><a href="#Chain-of-Responsibility" class="headerlink" title="Chain of Responsibility"></a>Chain of Responsibility</h2><p>一层层的向下推卸责任。</p><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><p>这里的主体，是 Command , 但往往每个命令存在单一的指令。。不是单一的策略。而是可以多个命令顺序执行。并且是由命令执行。 <code>execute</code></p><h2 id="Strategy"><a href="#Strategy" class="headerlink" title="Strategy"></a>Strategy</h2><p>这里的策略内的方法是实现上一层逻辑的基础，内部可能存在多个方法，只要替换了这个类，整个逻辑就不一样了。</p><h2 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h2><h2 id="Mediator-模式"><a href="#Mediator-模式" class="headerlink" title="Mediator 模式"></a>Mediator 模式</h2><p>交给中立者仲裁</p><h2 id="Decorator-模式"><a href="#Decorator-模式" class="headerlink" title="Decorator 模式"></a>Decorator 模式</h2><p>添加装饰<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new SideBorder(</span><br><span class="line">    new FullBorder(</span><br><span class="line">        new SideBoder(</span><br><span class="line">            new SideBoder()</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>类似于这种，可以一致持续下去。</p><h2 id="Facade-模式"><a href="#Facade-模式" class="headerlink" title="Facade 模式"></a>Facade 模式</h2><p>将处理的逻辑隐藏起来。·</p><h2 id="Memento-模式"><a href="#Memento-模式" class="headerlink" title="Memento 模式"></a>Memento 模式</h2><p>储存 snapshot</p><h2 id="Protype-模式"><a href="#Protype-模式" class="headerlink" title="Protype 模式"></a>Protype 模式</h2><p>基于原型的模式上，加入一些新功能。<br>利用了 clone() 方法 – 默认浅拷贝</p><ol><li>使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。</li><li>使用原型模式的另一个好处是简化对象的创建，使得创建对象就像我们在编辑文档时的复制粘贴一样简单。</li><li>因为以上优点，所以在需要重复地创建相似对象时可以考虑使用原型模式。比如需要在一个循环体内创建对象，假如对象创建过程比较复杂或者循环次数很多的话，使用原型模式不但可以简化创建过程，而且可以使系统的整体性能提高很多。</li></ol><h2 id="Flyweight-模式"><a href="#Flyweight-模式" class="headerlink" title="Flyweight 模式"></a>Flyweight 模式</h2><h2 id="Proxy-模式"><a href="#Proxy-模式" class="headerlink" title="Proxy 模式"></a>Proxy 模式</h2>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>book -- 人月神话</title>
      <link href="/blogs/b493d1fd.html"/>
      <url>/blogs/b493d1fd.html</url>
      
        <content type="html"><![CDATA[<p>不要相进度落后的队伍增添人手</p><p>注意沟通和交流。并且及时的沟通和交流</p><p>配备精良的外科团队。</p><p>一个优秀的大脑。</p><p>清晰明确的文档。规划目标，里程碑，交流，分歧。</p><p>好的自顶向下设计从几个方面避免了bug。<br>首先，清晰的结构和表达方式更容易对需求和模块功能进行精确的描述。<br>其次，模块分割和模块独立性避免了系统级的bug。<br>另外，细节的隐藏使结构上的缺陷更加容易识别。<br>最后，设计在每个精化步骤的层次上是可以测试的，所以测试可以尽早开始，并且每个步骤的重点可以放在合适的级别上。</p><p>进度的透明可见</p><ol><li>减少角色冲突和鼓励状态共享 – 不对他人权限内的东西过多干涉</li><li>评审机制</li></ol><p>总结：<br>这是一本作为项目经理，如何去管理团队，保证项目的按时完成的管理书籍。</p>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>killWork -- bug&#39;s party -- 180729</title>
      <link href="/blogs/84398cd3.html"/>
      <url>/blogs/84398cd3.html</url>
      
        <content type="html"><![CDATA[<h1 id="class-的热替换"><a href="#class-的热替换" class="headerlink" title="class 的热替换"></a>class 的热替换</h1><ol><li>class 的热替换包含 tomcat<br><a href="http://www.importnew.com/22462.html" target="_blank" rel="noopener">http://www.importnew.com/22462.html</a><br>jar 包的读取<br><a href="https://blog.csdn.net/hy_timer/article/details/76268759" target="_blank" rel="noopener">https://blog.csdn.net/hy_timer/article/details/76268759</a><h1 id="netty-selector-原理"><a href="#netty-selector-原理" class="headerlink" title="netty selector 原理"></a>netty selector 原理</h1></li><li>NIO 中 selector 是通过 epoll 实现<br><a href="https://cloud.tencent.com/developer/article/1005481" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1005481</a></li></ol><p>[1]select、poll、epoll_wait 陷入内核，判断监控的socket是否有关心的事件发生了，如果没，则为当前 process 构建一个 wait_entry 节点，然后插入到监控 socket 的 sleep_list<br>[2]进入循环的schedule 直到关心的事件发生了<br>[3]关心的事件发生后，将当前 process 的 wait_entry 节点从 socket 的 sleep_list 中删除。</p><p>[1]socket 的事件发生了，然后 socket 顺序遍历其睡眠队列，依次调用每个 wait_entry 节点的 callback 函数<br>[2]直到完成队列的遍历或遇到某个 wait_entry 节点是排他的才停止。<br>[3]一般情况下callback 包含两个逻辑：<br>1.wait_entry自定义的私有逻辑；<br>2.唤醒的公共逻辑，主要用于将该 wait_entry 的 process 放入CPU的就绪队列，让CPU随后可以调度其执行。</p><h2 id="select-逻辑"><a href="#select-逻辑" class="headerlink" title="select 逻辑"></a>select 逻辑</h2><ol><li>我们应该block在等待事件的发生上，这个事件简单点就是”关心的N个socket中一个或多个socket有数据可读了”，当block解除的时候，就意味着，我们一定可以找到一个或多个socket上有可读的数据。</li><li>另一方面，根据上面的socket wakeup callback机制，我们不知道什么时候，哪个socket会有读事件发生，于是，process需要同时插入到这N个socket的sleep_list上等待任意一个socket可读事件发生而被唤醒，当时process被唤醒的时候，其callback里面应该有个逻辑去检查具体那些socket可读了。</li></ol><p>当用户process调用select的时候，<br>select会将需要监控的readfds集合拷贝到 <strong>内核空间</strong>（假设监控的仅仅是socket可读），<br>然后遍历自己监控的socket_sk，挨个调用sk的poll逻辑以便检查该sk是否有可读事件，<br>遍历完所有的sk后, 如果没有任何一个sk可读，那么select会调用schedule_timeout进入schedule循环，使得process进入睡眠。<br>如果在timeout时间内某个sk上有数据可读了，或者等待timeout了，则调用select的process会被唤醒，接下来select就是遍历监控的sk集合，挨个收集可读事件并返回给用户了</p><h2 id="epoll-逻辑"><a href="#epoll-逻辑" class="headerlink" title="epoll 逻辑"></a>epoll 逻辑</h2><h3 id="fds集合拷贝问题的解决"><a href="#fds集合拷贝问题的解决" class="headerlink" title="fds集合拷贝问题的解决"></a>fds集合拷贝问题的解决</h3><p>epoll引入了epoll_ctl系统调用，将高频调用的epoll_wait和低频的epoll_ctl隔离开。<br>epoll_ctl通过(EPOLL_CTL_ADD、EPOLL_CTL_MOD、EPOLL_CTL_DEL)三个操作来分散对需要监控的fds集合的修改，做到了有变化才变更，<br>将select或poll高频、大块内存拷贝(集中处理)变成epoll_ctl的低频、小块内存的拷贝(分散处理)，避免了大量的内存拷贝。</p><p>同时，对于高频epoll_wait的可读就绪的fd集合返回的拷贝问题，epoll通过内核与用户空间mmap(内存映射)同一块内存来解决。mmap将用户空间的一块地址和内核空间的一块地址同时映射到相同的一块物理内存地址（不管是用户空间还是内核空间都是虚拟地址，最终要通过地址映射映射到物理地址），使得这块物理内存对内核和对用户均可见，减少用户态和内核态之间的数据交换。</p><p>epoll通过epoll_ctl来对监控的fds集合来进行增、删、改，那么必须涉及到fd的快速查找问题，于是，一个低时间复杂度的增、删、改、查的数据结构来组织被监控的fds集合是必不可少的了。<br>fds 集合为红黑树。</p><h3 id="按需遍历就绪的fds集合"><a href="#按需遍历就绪的fds集合" class="headerlink" title="按需遍历就绪的fds集合"></a>按需遍历就绪的fds集合</h3><p>通过上面的socket的睡眠队列唤醒逻辑我们知道，socket唤醒睡眠在其睡眠队列的 wait_entry(process )的时候会调用wait_entry的回调函数callback，<br>并且，我们可以在callback中做任何事情。为了做到只遍历就绪的fd，我们需要有个地方来组织那些已经就绪的fd。<br>为此，epoll引入了一个中间层，一个双向链表(ready_list)<strong>作为</strong>一个单独的<strong>睡眠队列(single_epoll_wait_list)</strong>，<br>并且，与select或poll不同的是，epoll的process不需要同时插入到多路复用的socket集合的所有睡眠队列中，<br>相反process只是插入到中间层的epoll的单独睡眠队列中，process睡眠在epoll的单独队列上，等待事件的发生。</p><p>同时，引入一个中间的wait_entry_sk，它与某个socket_sk密切相关，wait_entry_sk睡眠在sk的睡眠队列上，<br>其callback函数逻辑是将当前sk排入到epoll的ready_list中，并唤醒epoll的single_epoll_wait_list。<br>而single_epoll_wait_list上睡眠的process的回调函数就明朗了：遍历 ready_list 上的所有sk，挨个调用sk的poll函数收集事件，然后唤醒 process 从 epoll_wait 返回。</p><h3 id="ET-Edge-Triggered-边沿触发-vs-LT-Level-Triggered-水平触发"><a href="#ET-Edge-Triggered-边沿触发-vs-LT-Level-Triggered-水平触发" class="headerlink" title="ET(Edge Triggered 边沿触发) vs LT(Level Triggered 水平触发)"></a>ET(Edge Triggered 边沿触发) vs LT(Level Triggered 水平触发)</h3><p>Edge Triggered (ET) 边沿触发</p><ol><li>socket的接收缓冲区状态变化时触发读事件，即空的接收缓冲区刚接收到数据时触发读事件</li><li>socket的发送缓冲区状态变化时触发写事件，即满的缓冲区刚空出空间时触发读事件<br>仅在缓冲区状态变化时触发事件，比如数据缓冲去从无到有的时候(不可读-可读)</li></ol><p>Level Triggered (LT) 水平触发</p><ol><li>socket接收缓冲区不为空，有数据可读，则读事件一直触发</li><li>socket发送缓冲区不满可以继续写入数据，则写事件一直触发</li></ol><h1 id="ifcfg-eth33-prefix-参数"><a href="#ifcfg-eth33-prefix-参数" class="headerlink" title="ifcfg-eth33 prefix 参数"></a>ifcfg-eth33 prefix 参数</h1><p>为了自己的虚拟机里的 Linux 可以连接上网，不知道在哪拷贝了一段代码，<br>加入到了自己的文件里。<br>但是还是连接不上，经过排错后，发现是 因为 prefix 参数的问题。<br>如果 prefix 参数设置不对，那么 ip 地址和 网关 不管怎么修改，都不对。<br>最简单的方法，删除 prefix 参数。</p><h1 id="isAssignableFrom-与-instanceof-区别"><a href="#isAssignableFrom-与-instanceof-区别" class="headerlink" title="isAssignableFrom() 与 instanceof() 区别"></a>isAssignableFrom() 与 instanceof() 区别</h1><ul><li>isAssignableFrom()方法是从类继承的角度去判断，instanceof()方法是从实例继承的角度去判断。</li><li>isAssignableFrom()方法是判断是否为某个类的父类，instanceof()方法是判断是否某个类的子类。</li></ul><h1 id="JDK-自带的监控器模式"><a href="#JDK-自带的监控器模式" class="headerlink" title="JDK 自带的监控器模式"></a>JDK 自带的监控器模式</h1><p>在Java中通过Observable类和Observer接口实现了观察者模式。Observer对象是观察者，Observable对象是被观察者。<br>实现观察者模式非常简单，<br>[1]创建被观察者类，它继承自java.util.Observable类；<br>[2]创建观察者类，它实现java.util.Observer接口；<br>[3]对于被观察者类，<br>添加它的观察者：<br>void addObserver(Observer o)</p><p>addObserver()方法把观察者对象添加到观察者对象列表中。</p><p>当被观察事件发生时，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setChanged();</span><br><span class="line">notifyObservers();</span><br></pre></td></tr></table></figure></p><p>setChange()方法用来设置一个内部标志位注明数据发生了变化；notifyObservers()方法会去调用观察者对象列表中所有的Observer的update()方法，通知它们数据发生了变化。<br>只有在setChange()被调用后，notifyObservers()才会去调用update()。</p><p>[4]对于观察者类，实现Observer接口的唯一方法update<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void update(Observable o, Object arg)</span><br></pre></td></tr></table></figure></p><p>形参Object arg，对应一个由notifyObservers(Object arg);传递来的参数，当执行的是notifyObservers();时，arg为null。</p><h1 id="获取-Annotation-相关的注解"><a href="#获取-Annotation-相关的注解" class="headerlink" title="获取 Annotation 相关的注解"></a>获取 Annotation 相关的注解</h1><p><a href="http://liuxi.name/blog/20161227/java-annotations-api.html" target="_blank" rel="noopener">http://liuxi.name/blog/20161227/java-annotations-api.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getAnnotation</span><br><span class="line">getAnnotations</span><br><span class="line">getAnnotationByType</span><br><span class="line">// 1. 忽略继承</span><br><span class="line">// 2. JDK 1.8 以下没用</span><br><span class="line">getDeclaredAnnotation</span><br><span class="line">getDeclaredAnnotations</span><br><span class="line">getDeclaredAnnotationByType</span><br></pre></td></tr></table></figure><h1 id="getResourceAsStream-–-getSystemResourceAsStream"><a href="#getResourceAsStream-–-getSystemResourceAsStream" class="headerlink" title="getResourceAsStream – getSystemResourceAsStream"></a>getResourceAsStream – getSystemResourceAsStream</h1><p>ClassLoader().getSystemResource()<br>只能获取 jvm 的 ClassLoader, 获取不到 tomcat 的 ClassLoader</p><p>this.getClass().getClassLoader().getResource()<br>获取当前类的 ClassLoader – 随环境改变</p><p>this.getClass().getResource()<br>相对路径，会判断文件路径 “/” 还是 “./” <strong>必须加入 /</strong></p><p>Thread.currentThread().getContextClasLoader().getResource()<br>加载当前线程的 ClassLoader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(ClassLoader.getSystemResource(&quot;&quot;).getPath());</span><br><span class="line">// 当前类目录</span><br><span class="line">System.out.println(getClass().getResource(&quot;&quot;).getPath());</span><br><span class="line">// 根目录</span><br><span class="line">System.out.println(getClass().getResource(&quot;/&quot;).getPath());</span><br><span class="line">// 相对目录</span><br><span class="line">System.out.println(getClass().getResource(&quot;./&quot;).getPath());</span><br><span class="line">System.out.println(getClass().getResource(&quot;../&quot;).getPath());</span><br><span class="line"></span><br><span class="line">System.out.println(getClass().getClassLoader().getResource(&quot;&quot;).getPath());</span><br><span class="line">System.out.println(getClass().getClassLoader().getResource(&quot;&quot;).getPath());</span><br></pre></td></tr></table></figure><p><strong> 输出 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/D:/Programme/Tomcat-8/webapps/FR/WEB-INF/classes/</span><br><span class="line">/D:/Programme/Tomcat-8/webapps/FR/WEB-INF/classes/com/fr/env/util/</span><br><span class="line">/D:/Programme/Tomcat-8/webapps/FR/WEB-INF/classes/</span><br><span class="line">/D:/Programme/Tomcat-8/webapps/FR/WEB-INF/classes/com/fr/env/util/</span><br><span class="line">/D:/Programme/Tomcat-8/webapps/FR/WEB-INF/classes/com/fr/env/</span><br><span class="line">/D:/Programme/Tomcat-8/webapps/FR/WEB-INF/classes/</span><br><span class="line">/D:/Programme/Tomcat-8/webapps/FR/WEB-INF/classes/</span><br></pre></td></tr></table></figure><h1 id="双重校验锁的-volatie-变量"><a href="#双重校验锁的-volatie-变量" class="headerlink" title="双重校验锁的 volatie 变量"></a>双重校验锁的 volatie 变量</h1><p>申请内存空间，<br>初始化默认值（区别于构造器方法的初始化），<br>执行构造器方法<br>连接引用和实例。</p><p>这4个步骤后两个有可能会重排序，1234 1243都有可能，造成未初始化完全的对象发布。<br>volatile可以禁止指令重排序，从而避免这个问题。</p><h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><p>new File(String Path)<br>path 不能为这种形式。<br>Tomcat 8.</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killWork </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>killWork -- bug&#39;s party -- 180723</title>
      <link href="/blogs/64ec65cd.html"/>
      <url>/blogs/64ec65cd.html</url>
      
        <content type="html"><![CDATA[<h2 id="180722-问题总结"><a href="#180722-问题总结" class="headerlink" title="180722 问题总结"></a>180722 问题总结</h2><h3 id="文件服务器路径问题。"><a href="#文件服务器路径问题。" class="headerlink" title="文件服务器路径问题。"></a>文件服务器路径问题。</h3><p>目录不能写 /<br>要写 /home/3dot141/pics<br>因为 ../backup 是这种形式</p><p>cd /usr/local/nginx/../redis_test</p><p>进入 /usr/local/nginx/<br>然后上一个文件夹 即 /usr/local/<br>最后进入 redis_test</p><h3 id="tomcat-部署不了项目"><a href="#tomcat-部署不了项目" class="headerlink" title="tomcat 部署不了项目"></a>tomcat 部署不了项目</h3><p>因为自己在 catalina.bat 上写了 jvm 的参数</p><h2 id="localhost-8080-没反应"><a href="#localhost-8080-没反应" class="headerlink" title="localhost:8080 没反应"></a>localhost:8080 没反应</h2><p>localhost:8080 没反应的原因<br>我们的项目的工件输出目录在下图红色矩形框出来的地方，而不是在安装的tomcat的Apache-tomcat的webapps的目录下。<br>所以就相当于，IDEA在H:\IdeaProjects\DialogeEngine\out\artifacts虚拟了一个Tomcat，<br>而在H:\IdeaProjects\DialogeEngine\out\artifacts下又没有Tomcat首页的工程。而此时并没有把Tomcat首页的工程部署到服务器，所以就访问不到Tomcat首页，而访问到的是我们项目里的其他页面信息。<br>![](<a href="http://ovmspkp0s.bkt.clouddn.com/201807170952_57.png" target="_blank" rel="noopener">http://ovmspkp0s.bkt.clouddn.com/201807170952_57.png</a></p><h2 id="Xshell-Socket-error-Event-32-Error-10053"><a href="#Xshell-Socket-error-Event-32-Error-10053" class="headerlink" title="Xshell Socket error Event: 32 Error: 10053"></a>Xshell Socket error Event: 32 Error: 10053</h2><p>重新更改权限(系统配置文件请勿随意开放为所有权限，切记)<br>chmod 400 /etc/ssh/*<br>重启SSH<br>service sshd restart<br>重启网关<br>service network restart</p><p><a href="https://www.codetd.com/article/354498" target="_blank" rel="noopener">原文链接</a></p><h2 id="Tomcat-停机过程分析"><a href="#Tomcat-停机过程分析" class="headerlink" title="Tomcat 停机过程分析"></a>Tomcat 停机过程分析</h2><h2 id="文件或字符串-MD5-校验"><a href="#文件或字符串-MD5-校验" class="headerlink" title="文件或字符串 MD5 校验"></a>文件或字符串 MD5 校验</h2><p>获取文件的MD5码：<br>System.out.println(DigestUtils.md5Hex(new FileInputStream(new File(“C:/ttt/new1328505655521”))));</p><p>获取字符串MD5码：<br>System.out.println(DigestUtils.md5Hex(string));</p><h2 id="redis集群-报错"><a href="#redis集群-报错" class="headerlink" title="redis集群 报错"></a>redis集群 报错</h2><p>[ERR] Node is not empty. Either the node already knows other nodes</p><p>解决方法：</p><ol><li>将需要新增的节点下aof、rdb等本地备份文件删除；</li><li>同时将新Node的集群配置文件删除,即：删除你redis.conf里面cluster-config-file所在的文件；</li><li>再次添加新节点如果还是报错，则登录新Node,./redis-cli–h x –p对数据库进行清除：<br> 172.168.63.201:7001&gt;  flushdb      #清空当前数据库<br><strong>注：</strong> 每一个集群中的节点都需要还原。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killWork </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mood -- 不能这样</title>
      <link href="/blogs/5ba33d35.html"/>
      <url>/blogs/5ba33d35.html</url>
      
        <content type="html"><![CDATA[<h2 id="不自律"><a href="#不自律" class="headerlink" title="不自律"></a>不自律</h2><p>没有一个规律的作息，让生活过得挺让人遗憾的。<br>生命的长度就这么一点，但是自己还不能完美的使用他，多让人遗憾。</p><p>之前，在学校的时候，自己没有什么必须完成的任务，所以，每天该做什么事情的时候，可以不考虑这么多，直接去做就是了。<br>但是入职后不一样了。<br>首先要完成自己的任务，才能够放心的去做自己的事情。<br>但是起冲突的一点是任务的时限往往不是一天。因此，自己如果想要完成后再做这件事情，就会误了之前几天的时间。<br>所以想要解决这个问题的一个方法是，将任务细化，每天完成一点，而不是赶着完成。<br>精神有一点点的紧绷，是有助于自身的学习的。<br>这种紧绷的感觉会带动整个身体，大到头脑的控制中枢，小到细胞的活跃程度。都会有不同程度的提升。<br>但是，这种紧绷的感觉是不能持续太久的。这是以消耗自身的能量储备为前提的一种兴奋刺激。<br>因此，一晚上优质的睡眠 + 自己喜欢的事情 + 规律的锻炼 = 能量的恢复<br>所以必须好好安排这一切。</p><p>另外现在的这种时间安排是没有安排自己的阅读时间的。这一点是非常不友好的，尤其是对一个阅读爱好者来说。<br>所以自己的<strong>时间安排</strong>，和<strong>心态调整</strong>必须尽早提上日程。刻不容缓。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201807141030_644.png" alt="之前的时间安排"></p><h2 id="杂乱的知识"><a href="#杂乱的知识" class="headerlink" title="杂乱的知识"></a>杂乱的知识</h2><p>现在自己的 pocket/evernote 中还存储着大量的未阅读知识。<br>这些东西现在只是一个知识的储存工具。<br>但是， pocket 知识过滤的作用没起到。<br>并且， evernote 对知识的二次加工效果也不是很好。这些都需要进一步的去整合。</p>]]></content>
      
      
      <categories>
          
          <category> Live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>serendipity -- 0714</title>
      <link href="/blogs/f5134600.html"/>
      <url>/blogs/f5134600.html</url>
      
        <content type="html"><![CDATA[<h2 id="冯小刚十问谬误"><a href="#冯小刚十问谬误" class="headerlink" title="冯小刚十问谬误"></a>冯小刚十问谬误</h2><p>这是一个逻辑题目。很有意思 。<br>比较适合之后在商场中和别人交锋。</p><p>第1段：《手机》主角严守一没娘、离过婚···他干的所有事你崔永元没有干过、人物关系也和你不同，因此，严守一≠崔永元，所以构不成对你的影射伤害，因此你是碰瓷；<br>    <strong>混淆概念：</strong> 这里说的是一个精确的概念和大众概念的理解问题。大众对一部电影的人物的理解是什么？是找角色和现实人物的共通点，而不是找不同点。<br>第2段：既然你觉得受了伤害，为什么不起诉；因为你不起诉，所以你更是碰瓷；<br>    <strong>循环论证：</strong> 预设一个前提 A ,然后得到一个结论 B ，根据这个结论 B , 反过来推论这个 前提 A.<br>第3段：文艺作品切忌对号入座，意大利黑帮都没有找《教父》，你就更不应该找了；<br>    <strong>个人怀疑，诉诸权威</strong> 1. 意大利的黑帮找过 教父。2. 即便没找过，我也可以找你。<br>第4段：你反基因是为了卖你的产品；你不能光举报别人漏税，你也要晒你的税单；<br>    <strong>诉诸动机，斥之虚伪</strong> 别人有没有错，和你有没有错，不是一回事。<br>第5段：中国电影发展不易，你却恶意抹黑电影行业和明星，明星做的善事比你多多了；<br>第8段：你用一个合同，引起股市下滑，让亿万股民蒙受损失；<br>    <strong>诉诸情感</strong> 将股民和电影业拉到自己这一边。<br>第6段：你不善良，因此你不是好丈夫和好父亲；<br>第7段：刘震云教育女儿、你说刘震云给你道歉，实际是断章取义，说假话；<br>    <strong>谬误谬误</strong> 你发现一个人的某一点不好，从而否定这整个人。说这个人就是不好的。<br>第9段：你不体面、你不如流氓、你是小人；<br>第10段：你没能力让《手机2》停拍，《手机2》已经杀青，永远存在。</p><h2 id="我不是药神"><a href="#我不是药神" class="headerlink" title="我不是药神"></a>我不是药神</h2><p>进口药为什么贵？</p><ol><li>研发成本 + 专利权 + 市场竞争 + 受众<br>在中国为什么更贵？</li><li>5% 关税 + 17% 增值税</li><li>中国不承认美国药监局的测试，需要自己测试，加大了成本。</li><li>中国政策漏洞，进口药自主定价，使得本土药利润低，对生产商，医院的收益不好。<br>并且可以在 20 年产权后，继续自主定价。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>killWork -- 入职一周查缺补漏</title>
      <link href="/blogs/1181d157.html"/>
      <url>/blogs/1181d157.html</url>
      
        <content type="html"><![CDATA[<h2 id="res-45-ViusalVM"><a href="#res-45-ViusalVM" class="headerlink" title="res-45 ViusalVM"></a>res-45 ViusalVM</h2><p>布置的任务是通过 VisualVM api 的源码，输出相应的 JVM 信息。</p><ol><li>这里首先记录源码阅读的思路。</li><li>其次记录源码涉及到的一些 api 的使用</li><li>然后总结一下，下一次如果还要阅读源码，应该如何开始。</li></ol><h3 id="1-源码阅读的思路"><a href="#1-源码阅读的思路" class="headerlink" title="1. 源码阅读的思路"></a>1. 源码阅读的思路</h3><p>这里编译出来的源码是一个图形界面。<br>所以，根据图形界面，找后台对应的 Bean – {1. DataSource, 2. Model }<br>以及之后细分的那些 Bean , xxImpl;<br>找到 xxProvider , xxSupport , xxModelFactory 的逻辑。<br>然后分析 xxImpl 如何生成的。<br>    <strong>注意：</strong> 这里要注意一个问题就是 要将这个类里引用的外部的包给搞清楚。<br>更改源码，从而可以通过外部调用。</p><h3 id="2-Attach-API-amp-amp-JMX-API-amp-amp-Instrumentation-API"><a href="#2-Attach-API-amp-amp-JMX-API-amp-amp-Instrumentation-API" class="headerlink" title="2. Attach API &amp;&amp; JMX API &amp;&amp; Instrumentation API"></a>2. Attach API &amp;&amp; JMX API &amp;&amp; Instrumentation API</h3><h4 id="2-1-Attach-API"><a href="#2-1-Attach-API" class="headerlink" title="2.1 Attach API"></a>2.1 Attach API</h4><p>提供 JVM 的一些基本信息。<br>并且提供动态加载 class 的方法。 <strong>loadAgent()</strong><br><strong>这里使用的 agent 非常重要，之后会介绍相关的内容。</strong></p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201807091118_760.png" alt=""></p><p><strong> 网址如下： </strong><br><a href="https://docs.oracle.com/javase/8/docs/jdk/api/attach/spec/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/jdk/api/attach/spec/index.html</a></p><h4 id="2-2-Instrumentation-API"><a href="#2-2-Instrumentation-API" class="headerlink" title="2.2 Instrumentation API"></a>2.2 Instrumentation API</h4><p><a href="http://ayufox.iteye.com/blog/655619" target="_blank" rel="noopener">http://ayufox.iteye.com/blog/655619</a><br><a href="https://blog.csdn.net/conquer0715/article/details/5177474" target="_blank" rel="noopener">https://blog.csdn.net/conquer0715/article/details/5177474</a></p><h4 id="2-3-loadAgent"><a href="#2-3-loadAgent" class="headerlink" title="2.3 loadAgent"></a>2.3 loadAgent</h4><p>涉及到代理类的问题。可以从 <a href=""></a> 找到相应的解释</p><h4 id="2-4-JMX-API"><a href="#2-4-JMX-API" class="headerlink" title="2.4 JMX API"></a>2.4 JMX API</h4><p>the Java Management Extensions.<br>提供 对 JVM 各种参数的解析功能。<br>api :<br><a href="https://docs.oracle.com/javase/8/docs/api/javax/management/package-summary.htm" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/api/javax/management/package-summary.htm</a></p><h4 id="2-5-System-getProperties"><a href="#2-5-System-getProperties" class="headerlink" title="2.5 System.getProperties()"></a>2.5 System.getProperties()</h4><p>—|—<br>java.version | Java 运行时环境版本<br>java.vendor | Java 运行时环境供应商<br>java.vendor.url | Java 供应商的 URL<br>java.home | Java 安装目录<br>java.vm.specification.version | Java 虚拟机规范版本<br>java.vm.specification.vendor | Java 虚拟机规范供应商<br>java.vm.specification.name | Java 虚拟机规范名称<br>java.vm.version | Java 虚拟机实现版本<br>java.vm.vendor | Java 虚拟机实现供应商<br>java.vm.name | Java 虚拟机实现名称<br>java.specification.version | Java 运行时环境规范版本<br>java.specification.vendor | Java 运行时环境规范供应商<br>java.specification.name | Java 运行时环境规范名称<br>java.class.version | Java 类格式版本号<br>java.class.path | Java 类路径<br>java.library.path | 加载库时搜索的路径列表<br>java.io.tmpdir | 默认的临时文件路径<br>java.compiler | 要使用的 JIT 编译器的名称<br>java.ext.dirs | 一个或多个扩展目录的路径<br>os.name | 操作系统的名称<br>os.arch | 操作系统的架构<br>os.version | 操作系统的版本<br>file.separator | 文件分隔符（在 UNIX 系统中是“/”）<br>path.separator | 路径分隔符（在 UNIX 系统中是“:”）<br>line.separator | 行分隔符（在 UNIX 系统中是“/n”）<br>user.name | 用户的账户名称<br>user.home | 用户的主目录<br>user.dir | 用户的当前工作目</p><h4 id="3-学会阅读源码"><a href="#3-学会阅读源码" class="headerlink" title="3 学会阅读源码"></a>3 学会阅读源码</h4><ol><li>首先读 core / base 目录</li><li>分析设计模式</li></ol><h2 id="入职双选会查缺补漏"><a href="#入职双选会查缺补漏" class="headerlink" title="入职双选会查缺补漏"></a>入职双选会查缺补漏</h2><p>今天进行了一波面试，发现了一些自己的问题。所以需要进行总结一波。加深一下印象。</p><h3 id="1-常见反问总结"><a href="#1-常见反问总结" class="headerlink" title="1. 常见反问总结"></a>1. 常见反问总结</h3><ol><li>想听听您对这个产品下一步发展的想法，以及未来几年内希望达到的高度</li><li>希望听一下您对这个岗位的理想人选的要求。</li></ol><h3 id="2-问题总结"><a href="#2-问题总结" class="headerlink" title="2. 问题总结"></a>2. 问题总结</h3><p>1 spring ioc 有什么作用<br><strong>低耦合</strong></p><p><a href="https://www.zhihu.com/question/23277575" target="_blank" rel="noopener">https://www.zhihu.com/question/23277575</a><br><a href="https://blog.csdn.net/javazejian/article/details/54561302" target="_blank" rel="noopener">https://blog.csdn.net/javazejian/article/details/54561302</a></p><p>2 spring aop 有什么作用<br><strong>减少核心代码的复杂度，降低对代码的入侵</strong></p><p><a href="https://blog.csdn.net/javazejian/article/details/56267036" target="_blank" rel="noopener">https://blog.csdn.net/javazejian/article/details/56267036</a></p><p>3 jvm 标记整理算法<br>gc roots 遍历对象，然后区分存活以及死去的。<br>标记的存活对象将会被整理，<strong>按照内存地址依次排列</strong>，而未被标记的内存会被清理掉。</p><p>4 jvm 青年代的空间 100， 老年代的空间 10. minor gc 后，老年代空间不够，怎么办？<br>这里缺少了 major gc 的知识。<br><a href="http://www.importnew.com/15820.html" target="_blank" rel="noopener">http://www.importnew.com/15820.html</a></p><p>5 你在工作中遇到的最大的问题是什么。是怎么解决的。</p><p>6 你在工作中常用的 jar 包有哪些？</p><p>7 多线程<br>volatie 如何保持原子性，可见性…<br>内存屏障。</p><p>8 算法<br>25匹马，一个赛道，一次只能跑 5 匹。得到速度，问跑几次可以得到最前面的 3 个<br><strong>答</strong> 这就不是一道算法题目，这是一道智力题目。很尴尬。我没往这方向想。同学说，可以多从慕课网上，看 <strong>Java 智力题</strong></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killWork </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>killJava -- JVM 基础知识</title>
      <link href="/blogs/f9222ed6.html"/>
      <url>/blogs/f9222ed6.html</url>
      
        <content type="html"><![CDATA[<h2 id="jvm-基础知识"><a href="#jvm-基础知识" class="headerlink" title="jvm 基础知识"></a>jvm 基础知识</h2><ol><li>如何自定义默认的 类加载器。</li></ol><p>loadclass – 双亲委派模型<br><a href="http://blog.csdn.net/seu_calvin/article/details/52315125" target="_blank" rel="noopener">loadclass 源码</a></p><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-classloader/</a><br><a href="https://www.cnblogs.com/xrq730/p/4847337.html" target="_blank" rel="noopener">https://www.cnblogs.com/xrq730/p/4847337.html</a></p><ol start="2"><li><p>JVM 表示一个类是同一个类有两个条件，</p><ol><li>类的完整类名</li><li>加载这个类的 classloader 是否是同一个实例。</li></ol></li><li><p>如何实现 java 的热部署<br>因为java 不能加载重复的类， 但是 只要classloader 不同，就不是重复，所以可以创建同一个 classloader 的不同实例，从而达到 java 热部署的目的。 </p></li></ol><h2 id="jvm-类的加载"><a href="#jvm-类的加载" class="headerlink" title="jvm 类的加载"></a>jvm 类的加载</h2><h3 id="预先加载以及按需加载"><a href="#预先加载以及按需加载" class="headerlink" title="预先加载以及按需加载"></a>预先加载以及按需加载</h3><p>1 预先加载<br>Java 运行环境为了优化系统，提高程序的执行速度，在 JRE 运行的开始会将 Java 运行所需要的基本类采用预先加载（ pre-loading ）的方法全部加载要内存当中，因为这些单元在 Java 程序运行的过程当中经常要使用的，主要包括 JRE 的 rt.jar 文件里面所有的 .class 文件<br>当 java.exe 虚拟机开始运行以后，它会找到安装在机器上的 JRE 环境，然后把控制权交给 JRE ， JRE 的类加载器会将 lib 目录下的 rt.jar 基础类别文件库加载进内存，这些文件是 Java 程序执行所必须的，所以系统在开始就将这些文件加载，避免以后的多次 IO 操作，从而提高程序执行效率。<br><strong>注：</strong> 这里应该是使用 启动类加载器(BootStrap)</p><p>2 按需加载<br>我们在定义一个类实例的时候，比如 TestClassA testClassA ，这个时候 testClassA 的值为 null ，也就是说还没有初始化，没有调用 TestClassA 的构造函数，只有当执行 testClassA = new TestClassA() 以后， JRE 才正真把 TestClassA 加载进来。</p><h3 id="隐式加载和显示加载"><a href="#隐式加载和显示加载" class="headerlink" title="隐式加载和显示加载"></a>隐式加载和显示加载</h3><ol><li>隐式加载<br>new 一个对象</li><li>显示加载<br>class.forName()</li></ol><h3 id="加载流程"><a href="#加载流程" class="headerlink" title="加载流程"></a>加载流程</h3><p>当执行 java .class **<br>的时候， java.exe 会帮助我们找到 JRE ，接着找到位于 JRE 内部的 jvm.dll ，这才是真正的 Java 虚拟机器 , 最后加载动态库，激活 Java 虚拟机器。<br>虚拟机器激活以后，会先做一些初始化的动作，比如说读取系统参数等。<br>一旦初始化动作完成之后，就会产生第一个类加载器―― Bootstrap Loader ， Bootstrap Loader 是由 C++ 所撰写而成，<br>这个 Bootstrap Loader 所做的初始工作中，除了一些基本的初始化动作之外，最重要的就是加载 Launcher.java 之中的 ExtClassLoader ，并设定其 Parent 为 null ，代表其父加载器为 BootstrapLoader 。<br>然后 Bootstrap Loader 再要求加载 Launcher.java 之中的 AppClassLoader ，并设定其 Parent 为之前产生的 ExtClassLoader 实体。<br>这两个加载器都是以静态类的形式存在的。这里要请大家注意的是， Launcher$ExtClassLoader.class 与 Launcher$AppClassLoader.class 都是由 Bootstrap Loader 所加载，所以 Parent 和由哪个类加载器加载没有关系。</p><h3 id="动态编译"><a href="#动态编译" class="headerlink" title="动态编译"></a>动态编译</h3><p>java中早就提供了用java方式去动态编译java源文件的接口，有关java动态编译的API都在javax.tools包中。本文主要使用jdk1.6以上版本提供的JavaCompiler工具来动态编译java源文件。<br>我们可以通过ToolProvider类的静态方法getSystemJavaCompiler得到JavaCompiler对象实例。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 获取编译器实例    </span><br><span class="line">JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();</span><br></pre></td></tr></table></figure><p>得到JavaCompiler对象实例后，<br>我们可以调用该工具的<br>getTask(Writer out, JavaFileManager fileManager, DiagnosticListener&lt;? super JavaFileObject&gt; diagnosticListener, Iterable<string> options, Iterable<string> classes, Iterable&lt;? extends JavaFileObject&gt; compilationUnits)<br>方法获取一个编译任务对象。 </string></string></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CompilationTask compilationTask = compiler.getTask(null, fileManager, diagnostics, options, null, compilationUnits);</span><br></pre></td></tr></table></figure><p>该方法<br><strong>第一个参数</strong>为文件输出，这里我们可以不指定，<br><strong>第二个参数</strong>为文件管理器实例 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 获取标准文件管理器实例    </span><br><span class="line">StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);</span><br></pre></td></tr></table></figure><p>该文件管理器实例的作用就是将我们需要动态编译的java源文件转换为getTask需要的编译单元。 </p><p><strong>第三个参数</strong>DiagnosticCollector<javafileobject> diagnostics是在编译出错时，存放编译错误信息。 </javafileobject></p><p><strong>第四个参数</strong>为编译命令选项，就是javac命令的可选项，这里我们主要使用了-d和-sourcepath这两个选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**  </span><br><span class="line">* 编译选项，在编译java文件时，编译程序会自动的去寻找java文件引用的其他的java源文件或者class。 -sourcepath选项就是定义java源文件的查找目录， -classpath选项就是定义class文件的查找目录，-d就是编译文件的输出目录。  </span><br><span class="line">*/    </span><br><span class="line">Iterable&lt;String&gt; options = Arrays.asList(&quot;-d&quot;, targetDir, &quot;-sourcepath&quot;, sourceDir);</span><br></pre></td></tr></table></figure><p>第五个参数为类名称，具体作用没研究清楚。<br>第六个参数为上面提到的编译单元，就是我们需要编译的java源文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 获取要编译的编译单元    </span><br><span class="line">Iterable&lt;? extends JavaFileObject&gt; compilationUnits = fileManager.getJavaFileObjectsFromFiles(sourceFileList);</span><br></pre></td></tr></table></figure><p>当我们得到CompilationTask compilationTask编译任务后，我们就可以调用compilationTask.call()方法进行编译工作 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 运行编译任务   </span><br><span class="line">compilationTask.call()</span><br></pre></td></tr></table></figure><h3 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h3><p>VirtualMachine + Attach + Agent + Instrumentation + ClassFileTransformer</p><p>这里的主要重点是 <strong>Instrumentation</strong></p><h4 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h4><p>Java Instrutment只提供了JVM TI中非常小的一个功能子集，<br>一个是允许在类加载之前，修改类字节(ClassFileTransformer)(JDK5中开始提供，即使随JVM启动的Agent)，<br>另外一个是在类加载之后，触发JVM重新进行类加载(JDK6中开始提供，用于JVM启动之后通过Attach去加载Agent)。<br><strong>第二种方法</strong> 主要是用于 loadAgent 生成 Agent 类</p><p>下面是通过 <code>ViusalMachine.attach()</code> 方法后得到 <code>VisualMachine</code> 类。<br>然后加载 JMX Agent 得到本地的 JMX 链接地址。<br>然后创建 相应的 JMXConnetor 。从而得到相应的信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 被监控jvm的pid(windows上可以通过任务管理器查看)  </span><br><span class="line">            String targetVmPid = &quot;5936&quot;;  </span><br><span class="line">            // Attach到被监控的JVM进程上  </span><br><span class="line">            VirtualMachine virtualmachine = VirtualMachine.attach(targetVmPid);  </span><br><span class="line">  </span><br><span class="line">            // 让JVM加载jmx Agent  </span><br><span class="line">            String javaHome = virtualmachine.getSystemProperties().getProperty(&quot;java.home&quot;);  </span><br><span class="line">            String jmxAgent = javaHome + File.separator + &quot;lib&quot; + File.separator + &quot;management-agent.jar&quot;;  </span><br><span class="line">            virtualmachine.loadAgent(jmxAgent, &quot;com.sun.management.jmxremote&quot;);  </span><br><span class="line">  </span><br><span class="line">            // 获得连接地址  </span><br><span class="line">            Properties properties = virtualmachine.getAgentProperties();  </span><br><span class="line">            String address = (String) properties.get(&quot;com.sun.management.jmxremote.localConnectorAddress&quot;);  </span><br><span class="line">  </span><br><span class="line">            // Detach  </span><br><span class="line">            virtualmachine.detach();  </span><br><span class="line">            // 通过jxm address来获取RuntimeMXBean对象，从而得到虚拟机运行时相关信息  </span><br><span class="line">            JMXServiceURL url = new JMXServiceURL(address);  </span><br><span class="line">            JMXConnector connector = JMXConnectorFactory.connect(url);  </span><br><span class="line">            RuntimeMXBean rmxb = ManagementFactory.newPlatformMXBeanProxy(connector.getMBeanServerConnection(), &quot;java.lang:type=Runtime&quot;,  </span><br><span class="line">                    RuntimeMXBean.class);  </span><br><span class="line">            // 得到目标虚拟机占用cpu时间  </span><br><span class="line">            System.out.println(rmxb.getUptime());</span><br></pre></td></tr></table></figure></p><h4 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h4><p>目前Agent类的启动有两种方式，<br>一种是在JDK5版本中提供随JVM启动的Agent，我们称之为premain方式。<br>另一种是在JDK6中在JDK5的基础之上又提供了JVM启动之后通过Attach去加载的Agent类，我们称之为agentmain方式。<br>Agent类的两种实现方式：<br>在这两种启动方式下，Agent JAR文件中的代理类中都必须实现特定的方法，如下所示： </p><p><strong>1、随JVM启动的Agent方式必须实现下面两个方法中的其中一个： </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public static void premain(String agentArgs, Instrumentation inst);[1]  </span><br><span class="line">public static void premain(String agentArgs);[2]</span><br></pre></td></tr></table></figure><p>JVM 首先尝试在代理类上调用以下方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void premain(String agentArgs, Instrumentation inst);</span><br></pre></td></tr></table></figure></p><p>如果代理类没有实现此方法，那么 JVM 将尝试调用： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void premain(String agentArgs);</span><br></pre></td></tr></table></figure><p><strong>2、通过Attach去启动Agent类方式必须实现下面两个方法中的其中一个： </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public static void agentmain (String agentArgs, Instrumentation inst);[1]   </span><br><span class="line">public static void agentmain (String agentArgs);[2]</span><br></pre></td></tr></table></figure><p>代理类必须实现公共静态agentmain方法。系统类加载器（ClassLoader.getSystemClassLoader）必须支持将代理 JAR 文件添加到系统类路径的机制。代理 JAR 将被添加到系统类路径。系统类路径是通常加载包含应用程序 main 方法的类的类路径。代理类将被加载，JVM 尝试调用agentmain 方法。JVM 首先尝试对代理类调用以下方法： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void agentmain(String agentArgs, Instrumentation inst);</span><br></pre></td></tr></table></figure><p>如果代理类没有实现此方法，那么 JVM 将尝试调用： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void agentmain(String agentArgs);</span><br></pre></td></tr></table></figure><p><strong>如果是使用命令行选项启动代理，那么agentmain方法将不会被调用。 </strong></p><p>代理类agent的加载：<br>代理类将被系统类加载器加载（参见 ClassLoader.getSystemClassLoader），系统类加载器是通常加载包含应用程序main方法的类的类加载器。 </p><p>MANIFEST.MF文件配置：<br>Agent类(又称为代理类）必须被部署为JAR 文件。Agent代理类jar包中的MANIFEST.MF文件中，必须指定Premain-Class或者Agent-Class参数。MANIFEST.MF文件内容如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0  </span><br><span class="line">Created-By: 1.6.0 (Sun Microsystems Inc.)  </span><br><span class="line">Agent-Class: sun.management.Agent  </span><br><span class="line">Premain-Class: sun.management.Agent</span><br></pre></td></tr></table></figure><h4 id="ClassFileTransformer"><a href="#ClassFileTransformer" class="headerlink" title="ClassFileTransformer"></a>ClassFileTransformer</h4><p>该类主要和 Instrumentation 类有关系，主要是为其添加一个更换字节码的转换器，从而在每次类加载之前，替换字节码，改变其作用。</p><p>主要方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byte[] transform(ClassLoader loader,String className, Class&lt;?&gt; classBeingRedefined,ProtectionDomain protectionDomain, byte[] classfileBuffer)throws IllegalClassFormatException</span><br></pre></td></tr></table></figure><p>该接口只定义个一个方法transform，该方法会在加载新class类或者重新加载class类时，调用。例如，inst.addTransformer(new SdlTransformer(), true)当代码中增加了一个<strong>可重转换转换器</strong>后，每次类加载之前，就会调用transform方法。<br>若该方法返回null，则不改变加载的class字节码，若返回一个byte[]数组，则jvm将会用返回的byte[]数组替换掉原先应该加载的字节码。 </p><p>byte[] transform(ClassLoader loader,<br>                 String className,<br>                 Class&lt;?&gt; classBeingRedefined,<br>                 ProtectionDomain protectionDomain,<br>                 byte[] classfileBuffer)<br>                 throws IllegalClassFormatException此方法的实现可以转换提供的类文件，并返回一个新的替换类文件。<br>有两种装换器，由 Instrumentation.addTransformer(ClassFileTransformer,boolean) 的 canRetransform 参数确定： </p><p>可重转换 转换器，将 canRetransform 设为 true 可添加这种转换器<br>不可重转换 转换器，将 canRetransform 设为 false 或者使用 Instrumentation.addTransformer(ClassFileTransformer) 可添加这种转换器<br>在转换器使用 addTransformer 注册之后，每次定义新类和重定义类时都将调用该转换器。每次重转换类时还将调用可重转换转换器。对新类定义的请求通过 ClassLoader.defineClass 或其本机等价方法进行。对类重定义的请求通过 Instrumentation.redefineClasses 或其本机等价方法进行。对类重转换的请求将通过 Instrumentation.retransformClasses 或其本机等价方法进行。转换器是在验证或应用类文件字节之前的请求处理过程中调用的。 当存在多个转换器时，转换将由 transform 调用链组成。也就是说，一个 transform 调用返回的 byte 数组将成为下一个调用的输入（通过 classfileBuffer 参数）。 </p><p>转换将按以下顺序应用： </p><p>不可重转换转换器<br>不可重转换本机转换器<br>可重转换转换器<br>可重转换本机转换器<br>对于重转换，不会调用不可重转换转换器，而是重用前一个转换的结果。对于所有其他情况，调用此方法。在每个这种调用组中，转换器将按照注册的顺序调用。本机转换器由 Java 虚拟机 Tool 接口中的 ClassFileLoadHook 事件提供。 </p><p>第一个转换器的输入（通过 classfileBuffer 参数）如下： </p><p>对于新的类定义，是传递给 ClassLoader.defineClass 的 byte<br>对于类重定义，是 definitions.getDefinitionClassFile()，其中 definitions 是 Instrumentation.redefineClasses 的参数<br>对于类重转换，是传递给新类定义的 byte，或者是最后一个重定义（如果有重定义），所有不可转换转换器进行的转换都将自动重新应用并保持不变；有关细节，请参阅 Instrumentation.retransformClasses<br>如果实现方法确定不需要进行转换，则应返回 null。否则，它将创建一个新的 byte[] 数组，将输入 classfileBuffer 连同所有需要的转换复制到其中，并返回这个新数组。不得修改输入 classfileBuffer。 </p><p>在重转换和重定义中，转换器必须支持重定义语义：如果转换器在初始定义期间更改的类在以后要重转换或重定义，那么转换器必须确保第二个输出类文件是第一个输出类文件的合法重定义文件。 </p><p>如果转换器抛出异常（未捕获的异常），后续转换器仍然将被调用并加载，仍然将尝试重定义或重转换。因此，抛出异常与返回 null 的效果相同。若要使用转换器代码在生成未检验异常时防止不希望发生的行为，可以让转换器捕获 Throwable。如果转换器认为 classFileBuffer 不表示一个有效格式的类文件，则将抛出 IllegalClassFormatException；尽管这与返回 null 的效果相同，但它便于对格式毁坏进行记录或调试。 </p><h2 id="jvm-内存管理"><a href="#jvm-内存管理" class="headerlink" title="jvm_内存管理"></a>jvm_内存管理</h2><ol><li>堆</li><li>线程</li><li>类和类加载器 – permgen</li><li>NIO – direct memory<br>system.gc() – –XX:DisableExplictGC</li><li>JNI – native memory<br><strong>可以采用 openfiler 热点分析工具分析 当前系统执行的热点代码。</strong></li></ol><h2 id="GC-日志分析"><a href="#GC-日志分析" class="headerlink" title="GC 日志分析"></a>GC 日志分析</h2><p>1、 GC 输出参数：</p><blockquote><p>-verboes:gc<br>-XX:+PrintGCDetails<br>-XX:+PrintGCApplicationStoppedTime<br>-XX:+PrintGCDateStamps<br>-XX:+PrintHeapAtGC<br>-Xloggc:[file}</p></blockquote><p>2、 GC 日志格式</p><blockquote><p>[GC [<collector>:<starting occupancy1=""> -&gt; <ending occupancy1="">(total size1), <pause time1=""> secs] <starting occupancy2=""> -&gt; <ending occupancy2="">(total size2), <pause time2=""> secs]</pause></ending></starting></pause></ending></starting></collector></p><p><collector> GC 收集器名称</collector></p><p><starting occupancy1="">  Young 区在GC 前占用的内存</starting></p><p><ending occupancy2=""> Young 区在 GC 后 占用的内存</ending></p><p><pause time1=""> 表示  Young 区局部收集时 jvm 暂停处理的时间</pause></p><p><starting occupancy2=""> jvm heap 在 gc 前占用的内存</starting></p><p><ending occupancy2=""> jvm heap 在gc 后占用的内存</ending></p><p><pause time2=""> gc过程中 jvm 暂停处理的总时间</pause></p><p><ending occupancy1=""> - <starting occupancy1=""> = <endingoccupancy2> - <starting occupancy2=""> </starting></endingoccupancy2></starting></ending></p></blockquote><blockquote><p>jstat -gcutil[pid][intervel][count]]</p></blockquote><table><thead><tr><th>参数</th><th>解析</th></tr></thead><tbody><tr><td>S0</td><td>Heap 上  Survirvor space 0 已经使用的空间比</td></tr><tr><td>S1</td><td>Heap 上  Survirvor space 1 已经使用的空间比</td></tr><tr><td>E</td><td>Eden space 已经使用的空间比</td></tr><tr><td>O</td><td>Old space 已经使用的空间比</td></tr><tr><td>P</td><td>Perm space 已经使用的空间比</td></tr><tr><td>YGC</td><td>Young GC 次数</td></tr><tr><td>YGCT</td><td>Young GC 时间</td></tr><tr><td>FGC</td></tr><tr><td>FGCT</td></tr><tr><td>GCT</td></tr></tbody></table><p>3、 堆快照分析</p><blockquote><p>jamp -dump::format=b,file=[filename][pid]<br>-XX:+HeapDumpOnOutOfMemoryError 配置当内存耗尽时记录下的内存快照<br>-XX:+HeapDumpPath  指定文件路径</p></blockquote><p>4、 Jvm Crash 日志分析</p><blockquote><p>-XX:ErrorFile= 配置JVM 退出时在工作目录下产生日志文件<br>退出原因分类，退出的 Thread 信息，退出的 Process 状态信息， 退出时与操作系统相关的信息</p><ol><li>EXCEPTION_ACCESS_VIOLATION </li><li>SIGSEGV</li><li>EXCEPTION_STACK_OVERFLOW 涉及参数 -Xss , -XX:StackShadowPages=n</li></ol></blockquote><p>thread 部分</p><ol><li>instructions: 当前系统执行的机器指令 – udis86</li><li>stack: gbd + core文件</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mood -- 入职一周回顾_生活</title>
      <link href="/blogs/87784a66.html"/>
      <url>/blogs/87784a66.html</url>
      
        <content type="html"><![CDATA[<h2 id="过去"><a href="#过去" class="headerlink" title="过去"></a>过去</h2><p>从 6.28 号来到无锡，这一转眼已经一个多星期的时间了。但是还没有适应这种身份的转变。<br>从原来可以犯错的学生，到现在必须每一步都必须追求完美的职场人士。这种带来的压力，是我之前那种顺风顺水的生活没有体验过的。<br>刚开始那几天尤其的厉害。每天晚上 12 点睡觉。但是 5 点半左右就会醒过来。然后内心就会惶恐。开始焦虑。<br>从 7.6 号周五之后，整个人就放松了许多。<br>应该是积压很久的压力来源终于过去了。<br>因此无论结果如何，都感觉可以接受的这种样子。<br>但是。这种心情是不对的。<br>或者说这种想法是不对的。<br>怎么能这么想呢。<br>并不是一件事情过去之后，就与之后的生活没有多少联系了。<br>而是会影响的。只不过这个影响的轨迹可能大可能小而已。<br>自己究其惶恐的原因，还是自己不够强大。<br>与这个行业接触的比较少，因此对自己的水平没有一个清楚的认识。<br>但是根本上，还是自己之前的惰性，让自己感觉配不上这份工作。<br>一段时间的逃避后，突然需要开始面对之前的逃避所带来的结果了。<br>自己不知所措。慌张，慌乱。害怕原先因为距离带来的不熟悉到如今抽丝剥茧的拨开自己的一切之后，发现，自己只是一个空壳子。<br>害怕别人的评价。害怕即将到来的结果。<br>想再次的逃避，却无路可退。挂在悬崖边上，不敢上去面对现实，也不敢松开手纵身一跃坠入深渊。<br>因此，就在这徘徊着，迷茫着。<br>如果说今天的自己，最想说给自己听的一句话的吧。我想大概是，<strong>你活该。</strong></p><h2 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h2><p>7.8。<br>周末。<br>终于得了一天空闲。为了放松一下自己，我骑行去了南禅寺。以及鼋头渚。<br>风景挺好，除了路途有些艰辛以外，都挺放松的。<br>最大的感受就是身体真的不是很好。<br>刚开始精力很是充沛。但是之后到了大约 12 点左右，就开始疲惫。高高的太阳悬着，虽然还不到那种，路上的柏油马路都冒出阵阵热气的时候。<br>但依旧让我汗流不止。几十米的登山 再加上 10 公里左右的步行路程。就已经让我筋疲力竭。<br>中途还不得不找个地方歇息一下。恢复恢复体力。<br>身体是革命的本钱。整天坐在办公室里，一坐一天实在是让人的身体日渐松垮。<br>将锻炼身体提到日程上迫在眉睫了呢。</p><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p><blockquote class="blockquote-center"><br>不要追求平凡<br></blockquote><br>这是这两天看的一篇文章。<br>我回顾之前自己的生活，确实在得到 offer 后，对自己放松了要求。<br>没在多研究几本书，没再多去读别人的技术文章。<br>也没有继续加强自己技术栈的深度和广度。<br>自己好像对现状非常的满意。连一点对未来的希冀都没有了。<br>就这样，安于现状，混吃等死。<br>这让我惊愕。我还能够依稀的记得，自己当时为什么要转行。自己的雄心壮志，自己的满腔抱负。<br>但是好像现在都抛掷脑后了。<br><strong>平凡正一点点的吞噬自己</strong></p><p>不行，我还没有跨过山和大海，也没有看过人山人海，怎么能就这样，坐着一艘小船，顺着河流而下，离着那些山峰，那些人群，越来越远呢。<br>古之圣人常立宏愿，以督促自己的一生。<br><strong>我也要仔细思考一下，我的人生抱负是什么。到了什么样的地步，我才觉得此生无憾呢？</strong><br>这个抱负一定要大，大到要花半辈子的时间去完成。这样无论中途有什么样的阻碍，或是停顿。<br>我都可以在安排好一切后，重新整装出发。</p>]]></content>
      
      
      <categories>
          
          <category> Live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>book -- 谁动了我的奶酪</title>
      <link href="/blogs/b9a77aa4.html"/>
      <url>/blogs/b9a77aa4.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个故事中有4个虚构的角色：</p><ol><li>嗅嗅： 及早嗅出变化的端倪</li><li>匆匆： 立刻采取行动</li><li>哼哼： 担心事态变得更加糟糕而否认、抵制变化。</li><li>唧唧： 发现变化可以带来更好的生活后及时调整。</li></ol><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><ol><li>唧唧呀唧唧，看看你自己吧！你居然等到每天重复同样的错误，还总是奇怪、怀疑为什么情况还没有得到改善，还有什么比你 这种做法更可笑呢？这如果不是荒谬，就是滑稽。</li><li>有时候，恐惧是一件好事，因为当你担心自己的无所作为会导致事态严重时，恐惧会促使你立即采取行动。但是，如果恐惧已经束缚你的手脚，以至于你什么也做不好，就不好了。</li><li>改变自己最快捷的方式就是嘲笑自己的愚蠢，这样才能对自己的过去使然，并迅速朝着新的方向前进，从而发现新的奶酪</li><li>不管自己怎么样，变化总是会不断的出现。你可能认为变化会伤害到你，所以抵制它们，拒绝接受变化。或者你认为找到新的奶酪对你有益，所以热烈的欢迎。只要相信自己能够找到并且享用新的奶酪，你就会改变自己的行为，预测变化，密切关注变化，迅速适应变化，并享受变化。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>serendipity -- 1805</title>
      <link href="/blogs/28ef678f.html"/>
      <url>/blogs/28ef678f.html</url>
      
        <content type="html"><![CDATA[<h2 id="0502"><a href="#0502" class="headerlink" title="0502"></a>0502</h2><h3 id="徐焰少将-《解放军为什么能赢》"><a href="#徐焰少将-《解放军为什么能赢》" class="headerlink" title="徐焰少将 - 《解放军为什么能赢》"></a>徐焰少将 - 《解放军为什么能赢》</h3><ol><li>共产党为什么赢了。<br>依靠的是间谍战，而共产党的间谍战之所以比国民党优秀，是因为，我党的特务组织是由周恩来管理的，并且信条是绝对不搞对高层的暗杀，不腐败享受，不为情报搞色诱等等。</li><li>国民党为什么打不了游击战 。<br>因为对待军政的策略不一样。虽然国民党的高层军官大多是学历较高，但是相比较起来，共产党的整体军队素质是高于国民党的。因为国民党的军队策略是 “兵贵愚，将贵智”，蒋介石由一句   名言”  打仗就是打将  “ 。 这是中国自古以来的名将领兵之道。明朝的戚家军只招收农民，凡是脸色白皙，眼神轻灵，动作轻快的一律不招。清朝曾国藩的湘军也是如此。但是共产党不一样  共产党讲究“兵民是胜利之本”，需要发挥基层士兵的革命觉悟和积极性。为此，需要士兵认字。所以对于共产党来说，分出的小股部队由很高的文化素养和政治素养，因此可以脱离大部队进行行动，骚扰敌军，团结群众，并且隐蔽自己。<br><strong>sum:</strong> 创新的过程总结两点：</li><li>可能需要离经叛道</li><li>并且足够的离经叛道。</li></ol><h3 id="选择困难症"><a href="#选择困难症" class="headerlink" title="选择困难症"></a>选择困难症</h3><ol><li>上一次快速做出一个正确选择是什么时候。</li><li>之前哪些快速决策没有成功，但是早点发现比晚点发现要强</li><li>上一件你没有把握但是结果不错的事情是什么</li><li>如果不在这件事情上过度思考，省下来的时间精力可以做什么？</li></ol><h3 id="摄影"><a href="#摄影" class="headerlink" title="摄影"></a>摄影</h3><p>人像摄影 4 个方法</p><ol><li>巧用玻璃，进行反光的多层遮罩效果，或者破碎效果</li><li>利用霓虹灯的多种光线</li><li>图书馆，如果模特的脸部有瑕疵，可以通过透过书中间的方式径向的隐藏瑕疵.</li></ol><h2 id="0505"><a href="#0505" class="headerlink" title="0505"></a>0505</h2><h3 id="抑郁症"><a href="#抑郁症" class="headerlink" title="抑郁症"></a>抑郁症</h3><p>暴走大事件第五季 – 54 </p><p>如何鉴别抑郁症：</p><ol><li>反应过重</li><li>持续时间长 ， 两周以上</li></ol><p>抑郁症的危害：<br>除了产后抑郁症，其他的只是自己心情不好。</p><p>如何帮助：</p><ol><li>首先要知道单纯口头上的安慰是没有用处的。</li><li>将他们当作正常人一样，交流沟通。</li><li>帮助他们制定一个以任务量而统筹的时间表，将整个的一天贯穿起来。早上几点几点干什么，下午几点几点干什么。</li><li>在陪伴的时候，要告诉他们，我们去做什么，去做什么。</li></ol><h3 id="心理学"><a href="#心理学" class="headerlink" title="心理学"></a>心理学</h3><h4 id="什么影响了我们对一件物品的评价"><a href="#什么影响了我们对一件物品的评价" class="headerlink" title="什么影响了我们对一件物品的评价"></a>什么影响了我们对一件物品的评价</h4><p><strong>禀赋效应：</strong>当一个人一旦拥有某件物品，他对这件物品价值的评价，就会比之前未曾拥有时显著增加。</p><h4 id="贫穷的危害只是物质的匮乏吗"><a href="#贫穷的危害只是物质的匮乏吗" class="headerlink" title="贫穷的危害只是物质的匮乏吗"></a>贫穷的危害只是物质的匮乏吗</h4><p>贫穷不止危害物质，更会影响<strong>大脑的结构</strong>，<strong>高自尊</strong>可以帮助摆脱这种影响。<br><strong>结论</strong>：一个人只有不卑不亢，才能于人于己做到泰然处事。</p><h4 id="人的大脑与心理的发展是匀速的吗？"><a href="#人的大脑与心理的发展是匀速的吗？" class="headerlink" title="人的大脑与心理的发展是匀速的吗？"></a>人的大脑与心理的发展是匀速的吗？</h4><p>不是，每个阶段有不同的敏感能力，可能5岁的时候，大脑是敏感能力，开发大脑的功能，会事半功倍，而6岁的时候，心理的发展是敏感能力，在这一阶段，有意的加快心理的成熟，会事半功倍。</p><h4 id="自由意志决定人的动作吗？"><a href="#自由意志决定人的动作吗？" class="headerlink" title="自由意志决定人的动作吗？"></a>自由意志决定人的动作吗？</h4><p>不，自由意志是一个旁观者，帮助我们理解我们为什么做这件事。<br>当你试图摆动手指的时候，</p><ol><li>会先产生一个电信号，决定我要动一下手指</li><li>过了大约 300 毫秒， 我们会意识到 “ 我们想动一下手指 ”。</li><li>最后做出动作。<h4 id="年龄变大导致人们能力的衰退？"><a href="#年龄变大导致人们能力的衰退？" class="headerlink" title="年龄变大导致人们能力的衰退？"></a>年龄变大导致人们能力的衰退？</h4>并不完全是，老人能力的衰退，更多的是心理的衰退<br>哈佛大学的教授做一个实验，通过搭建“时空胶囊”，将房间布置得和16年前一模一样，然后邀请16位老人，在其中生活一个星期。<br>后来，这16位老人，生活一周后，身体都有不同程度的改善。视力，听力，记忆力和反应速度都有明显提高。</li></ol><h2 id="0506"><a href="#0506" class="headerlink" title="0506"></a>0506</h2><h3 id="亲密关系"><a href="#亲密关系" class="headerlink" title="亲密关系"></a>亲密关系</h3><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><ol><li>公式一： 结果 = 奖赏 - 代价<br>社会交换理论 (Social Exchange Theory) 结果是 奖赏(相处中正面积极的经历) 与 代价 (关系中具有惩罚性，不愉快的经历) 所衡量的。</li><li>公式二： 满意度 = 结果 - 比较水平<br>比较水平 (Comparison Level): 亲密关系中，人们多多少少会对这段关系有一定的期待，或是觉得自己应当得到某种结果。</li><li>公式三： 依赖度 = 结果 - 替代的比较水平<br>替代比较水平 (Comparison Level for Alternative)： 如果我们离开现有的亲密关系，选择我们所认为更好的伴侣或者情境所获得的结果。<h4 id="四种亲密关系"><a href="#四种亲密关系" class="headerlink" title="四种亲密关系"></a>四种亲密关系</h4></li><li>结果&gt;比较水平&gt;替代比较水平 = 稳定又幸福的亲密关系<br>对现有关系满意，并且用心维持。</li><li>比较水平&gt;结果&gt;替代比较水平 = 稳定但不幸福的亲密关系<br>对现有关系不满意，但是勉强维持。</li><li>替代比较水平&gt;结果&gt;比较水平 = 不稳定但幸福的亲密关系<br>对现有关系满意，但倾向于离去</li><li>余下所有<br>对现有关系不满意，将会离去。<h4 id="满意度的改变"><a href="#满意度的改变" class="headerlink" title="满意度的改变"></a>满意度的改变</h4>原因有二：</li><li>人们在感情的初期为了取悦伴侣会尽力展现出自己美好的一面，从而拉高了伴侣对亲密关系的期待成都。</li><li>当人们与自己的伴侣相处时间久后，会对伴侣越来越没有耐心，更容易向伴侣情绪化的发泄自己的不满。</li></ol><p>一旦我们对亲密关系的满意程度降低，我们会对身边的替代比较水平开始敏感，仔细观察身边是否有能够替代现有关系的可能。</p><h4 id="心理武器-解决方案"><a href="#心理武器-解决方案" class="headerlink" title="心理武器 - 解决方案"></a>心理武器 - 解决方案</h4><ol><li>第一人称陈述 (I-Statement)<br>以“我”开头的句子来表达个人对情境的反感。比如用 “我现在很生气” 代替 “你惹我生气了”</li><li>行为描述 (Behavior Description)<br>面对不满时，通过详细的指出惹怒我们的特定行为，从而避免牵扯到伴侣的人格与品质</li><li>XYZ 陈述 (XYZ Statement)<br>1 + 2 = 3</li><li>复述 (Paraphasing)<br>这样做的优点：<ol><li>伴侣知道我们在认真倾听</li><li>在伴侣讲完之前，不会打断</li><li>通过复述，减少误解的可能性，给对方以解释的机会。</li></ol></li></ol><h3 id="为什么粉笔划过黑板会让人难受"><a href="#为什么粉笔划过黑板会让人难受" class="headerlink" title="为什么粉笔划过黑板会让人难受"></a>为什么粉笔划过黑板会让人难受</h3><p>人耳的频率接受范围是 20 - 20000 hz<br>而根据分析 处于 2000 - 5000 hz 的声音会让人不舒服。</p><h3 id="从长远角度看利息"><a href="#从长远角度看利息" class="headerlink" title="从长远角度看利息"></a>从长远角度看利息</h3><ol><li>首先我们要理解，什么是利息。<br>100 万房贷， 年利率 6%， 贷款 30 年，利息会有 115 万。</li><li>为什么存在利息。<br>因为资源在整个时间维度上是稀缺的。<strong>利息就是提前享用资源的代价</strong><ul><li>早消费的人，需要给晚消费的人补偿，这个补偿就是利息。</li></ul></li><li>长远角度的折现率<br>考虑到通货膨胀，物品在时间维度上的价格的起伏。总结来说，早消费比晚消费花费的更多。<ul><li>因为同样的产品，未来的更加便宜，所以不能将两个时间维度进行直接比较，需要将未来的价格折现后与现在的价格进行比较。因此回到 <strong>1</strong> 的例子，房贷分期付款 + 利息 的总价值折现到现在，恰好等同于全款买房的价格。</li><li>折现值概念大量运用于商业和金融中，大致使用的方式就是将 现在所做的事情 与 未来所得到的回报进行折现后的价值 进行比较。 放在个人身上，就是一个人越是对自己有更高的要求和目标，则对自己的自律越强。因为现在做的事情在整个时间维度上是最优的。</li></ul></li></ol><h3 id="天人之际"><a href="#天人之际" class="headerlink" title="天人之际"></a>天人之际</h3><p>罗辑思维里讲了一个词 <strong>天人之际</strong><br>这个词出自 司马迁 的 史记 - “究天人之际，通古今之变，成一家之言”<br>什么是天人之际呢，罗辑思维里提出一个观点是 “不详”。<br>但是这个词语还是太过于宽泛。<br>在我的理解中，天人之际，代表的更多是人心所向。<br>古代帝王登基，往往有一句顺应天意。以天意为统治工具，对民众，百姓进行思想上的洗脑。告诉他们，我是天选之子，你们需要顺从我。<br>这种师出有名的大义，之所以重要，就是民意决定了你是否能够成功。<br>载舟覆舟，旨在民意一念之间。人心所向，方可披荆斩棘，战无不胜。</p><h2 id="0509"><a href="#0509" class="headerlink" title="0509"></a>0509</h2><h3 id="消费观的改变"><a href="#消费观的改变" class="headerlink" title="消费观的改变"></a>消费观的改变</h3><p><strong>第一阶段： 渴望凭借名贵物品衬托我的气质。</strong><br>然而真正有气质的人往往具有使廉价物品增值的能力。缺乏底气的人才会过度依赖奢侈品<br><strong>第二阶段： 追求单一奢华主义</strong><br>寺山修司(电影导演，前卫戏剧的代表人物)评价单一奢华主义： 有的人可以裹着毛毯蜗居在桥底下，却省下钱买来梦寐以求的运动跑车；有的人可以连续三天只靠面包和一罐牛奶度日，第四天却踏进了马克西姆西餐厅。(巴黎上流社会年轻人聚会的 “俱乐部”)<br>对平衡生活的突破以及制造更多的不可能。<br><strong>第三阶段： 彻底跟自己的消费能力和解</strong></p><p>如果只是有钱就可以做到的事情，那么门槛还是太低了，不高级。</p><h3 id="不要跳出心理舒适区"><a href="#不要跳出心理舒适区" class="headerlink" title="不要跳出心理舒适区"></a>不要跳出心理舒适区</h3><p>心理舒适区： 呆在这个圈子里很舒服。<br>一般来说，很多激励你不断学习的文章，会鼓励你跳出心理舒适区。</p><p>心理舒适区 + 自我追求 + 社会期待 的<strong>关系</strong></p><ol><li>心理舒适区 = 自我追求 = 社会期待。 不需要跳出心里舒适区。 此时需要 <strong> 扩大 </strong> 心理舒适区。</li><li>追求 不等于 期待 。此时会产生迷茫的心情，不知道是否需要跳出心里舒适区，因此，会极大的影响跳出的动力。</li></ol><h3 id="如何与领导相处"><a href="#如何与领导相处" class="headerlink" title="如何与领导相处"></a>如何与领导相处</h3><ol><li>努力完成自己的工作，并且正确评价。</li><li>建立直系领导的 “ 资料库 ” 和 “ 情报网 ”。做到不越雷池</li><li>汇报之前事先彩排，不打无准备之战。</li><li>汇报的着重点，是部门现状以及项目的推进情况。</li><li>面对大领导，不要急着表现。要做好自己的本职工作，因为你能够见到大领导，往往是直系领导带你一起汇报。<ol><li>大领导不会直接决定你的升职</li><li>直系领导往往希望你做好补充，这才是最重要的工作。</li></ol></li><li>保证自己的建设性。也就是全面性。要多角度考虑。想出两种解决方法，分别应对不同的情况。</li><li>面对极端的领导，要知道一件事，就是 “ 你自己已经做好了一切属于你的工作，你已经足够优秀 ”。</li><li>私下场合，可以和领导 <strong> 务虚 </strong> ， 谈谈人生谈谈理想。听听教诲可能会更好。</li><li>在和同事们一起面对领导时，注意后发优势。这就像无领导讨论，最后总结发言的人，也是一个很重要的展示自己的位置。</li></ol><h3 id="摄影-–-极简风格"><a href="#摄影-–-极简风格" class="headerlink" title="摄影 – 极简风格"></a>摄影 – 极简风格</h3><ol><li>做减法，观察环境，在脑海中复现，然后精简画面元素，让元素数量最小。</li><li>做加法，背景如果非常的干净整洁，可以加入一些高对比度的物体作为前面的主体元素。</li><li>色彩与对比度，极简风格一般色彩的改变很少，但是会很突兀，色彩对比度的差距较大。</li><li>纹理与重复图案。可以作为<strong>背景</strong>，因为这种大量的有序的图案或者纹理会让人觉得整洁，干净。而容易突出主体部分。</li><li>合理运用线条。除了可以作为<strong>背景</strong>，纵向延伸的线条，可以加剧纵深。而交错的线条，垂直的线条又会有不一样的感觉。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>serendipity -- 雷军-小米是谁</title>
      <link href="/blogs/7be8403e.html"/>
      <url>/blogs/7be8403e.html</url>
      
        <content type="html"><![CDATA[<h2 id="小米"><a href="#小米" class="headerlink" title="小米"></a>小米</h2><h3 id="内容摘录"><a href="#内容摘录" class="headerlink" title="内容摘录"></a>内容摘录</h3><p>“铁人三项”商业模式：硬件+新零售+互联网服务</p><p>小米前进的路上，我们一直在思考：从古至今，商业世界变化纷繁，跳出形形色色的商业模式话题之外，始终不变的是什么？</p><p>用户对“感动人心、价格厚道”的产品的期待，这就是小米的答案。</p><p>“德不孤，必有邻”，通过独特的“生态链模式”，小米投资、带动了更多志同道合的创业者，围绕手机业务构建起手机配件、智能硬件、生活消费产品三层产品矩阵。</p><p>许商业以敦厚，许科技以温暖，许大众以幸福，我们的征途是星辰大海</p><h3 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h3><p>蓝港 ：(蓝港互娱，娱乐方面的创业公司，设计游戏，动画等多个领域，杰出代表是 《十万个冷笑话》)<br>雷军是中国人的骄傲，他的成就，是这个时代无数个人奋斗者的榜样。</p><p>bilibili : (前不久刚刚上市，是一家以 UGC 驱动的内容网站，动漫为主，从炮姐起家，然后涉及鬼畜、直播等多个领域，多为年轻人喜爱。)<br>我2001年毕业就加入金山，在我成长的过程中，雷总一直是我的老师。他给我的不仅是事业上的指导，更重要的是教我如何为人。“做正直的人，做值得用户尊敬的公司”，这是雷总对我说的话，我一直铭记。</p><p>真格基金 ：(由新东方联合创始人 徐小平，王强，红杉资本中国创办)<br>他创办小米，物质层面是要为中国消费者创造世界级物美价廉的产品。但在本质上，他是要扭转中国制造连中国人都不屑使用的现状。雷军要改变中国制造“潮水的方向”</p><p>拉卡拉 ： (联想控股成员企业，为综合性互联网金融服务公司，具备征信资格，服务多为：便民支付，移动支付，pos 收单， 跨境支付 – 这个不是和支付宝冲突吗？ 还有征信是什么意思)</p><p>猎豹 ： (原名金山网络)<br>对小米而言，这是八年长跑梦想终于成真的时刻，对整个互联网而言，更是新生独角兽创造历史，改变行业格局的重要时刻。</p><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>毫无疑问，小米是一家离经叛道的公司。<br>在2010年，智能手机市场才刚刚起步的时候。中华酷联正当红。一步国产的旗舰机型至少是3000+。让大多数人望而却步。<br>是小米，通过开创独有的互联网模式，将整个手机产业吊打。<br>本来一片和谐的手机市场，因为小米的入局，开始大量的清洗。魅族， 努比亚， 锤子， 一加， 还有乐视大量模仿小米模式的手机开始了自己的道路。中兴没落，酷派被收购，联想取消手机业务。若不是华为依靠内部的荣耀在刚开始抵挡住小米的寝室，后面的市场鹿死谁手还未可知。<br>随着 oppo,vivo 的线下大量扩张，铺天盖地的广告吸引了大量中国人的眼球，小米的增长态势开始放缓。甚至一度被看衰。<br>当这种需要一个一锤定音的决策，决定接下来的道路应该怎么走的时候。<br>小米没有让我们失望。进军印度市场，开设小米之家，全面屏的开创。这一个又一个的决定，让小米从艰难的 15，16 年走了过来。<br>也让我们感受到来自于小米内部决策者的高瞻远瞩。<br>印度市场手机占有率第一，小米之家通过手机+配件+智能生活将这一切联系成一个整体，解决了线下门店的部分弊端。全面屏的首次亮相，让多少人惊呼，这是一次划时代的变革。<br>小米正是通过这种与大众选择看似违背的角度，走出了一条创新的道路，并且通过一系列优秀的决策，在每一个分岔路口走的很平稳，很顺畅。<br>上面说小米是一家工程师文化的公司。创始人 8 人， 6 个工程师，2 个设计师。<br>我曾经用过几个小米手机，小米手机的 miui 系统是国产最优秀的 os ， 没有之一。<br>我还记得我大二的时候，买了一个小米4c ， 刚开始触屏有一点问题， 上网查验后，发现是普遍问题， 就提意见，等修复。只用了一个星期的时间，在下一个小版本的更迭中，就成功改善了这个 bug ，提高了我的体验。<br>最近，小米还联合其他6家公司，推出了 快程序 这个对标 小程序的产品，试图改变 小程序 一家独大，从而侵蚀公司利益的行为。虽然我还不知道 快程序 体验如何，但是敢于领头做这件事情，足以说明这家以技术为推动的公司有着自己的底气与傲气。</p><p>然而，在我看来，小米现在的问题有哪些？？</p><ol><li>供应链的问题。<br>猴王的称号不是一天两天的。<br>每次发布新机的时候，尽管许诺的很好，但是你抢不到就成了最大的问题。<br>往往只有线下黄牛高价才能购入。<br>这是小米与黄牛的联手的套路吗？<br>我相信不是，以雷总的眼光，不会贪图这一点蝇头小利，这与公司的文化不符。<br>但是，没有自己的工厂，没有自己的芯片，总是会受制于人。<br>现在小米的销量是很不错，但是多是红米这种低端机型。<br>在消费升级的背景下，这种机型的寿命势必是短暂的。<br>以我周边的人为例，曾经用小米并坚持用下去的只有一人。<br>从没用过小米，想用小米的，但是没抢到的，一人。<br>其余都是放弃小米，或者从来不选择小米的人。<br>是什么导致小米的依赖度这么低？我想他的供应链是其中重要的一个因素。<br>相比较于隔壁友商， 发布华为 p20 后，抢购当天，现货充足，抢购 5 分钟内，都可以轻松入手。<br>而小米 Mix 2s 从第一次发售，到 4 个星期后，我和我寝室的四个室友仍旧抢购失败，别无他法，只好入手了 iphone 8.</li><li>硬件的创新问题。<br>小米近些年最杰出的创新就是小米 Mix 的全面屏，此后多是新瓶装旧酒，依次的更新迭代内部零件而已，澎湃处理器的出现，也只不过是一朵小浪花，距离那种大的震撼，还差的远。<br>而华为凭借自己在硬件方面的雄厚基础，从一开始的 cpu ,gpu 全面被吊打，到现在 cpu 的迎头赶上， npu 的率先发布。<br>积极与世界知名相机厂商徕卡合作，得到画质的相应调教。<br>最近 华为 P20 pro 更是通过与索尼的深度合作，从而制成的 imx 600 ,4000 万像素真正意义上第一次超越了外国厂商。<br>这些都是小米所不具备的。</li></ol><p>小米的根本仍旧是手机，其智能配件只是井上添花，根据统计，手机、lot、互联网服务及其他营收分别占比 70.3%， 20.5%， 8.6%， 0.6%。<br>如果不能抓住用户的痛点，将手机业务进一步铺展开来，小米之后的道路转型将异常艰难。</p>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mood -- 180430</title>
      <link href="/blogs/b775701c.html"/>
      <url>/blogs/b775701c.html</url>
      
        <content type="html"><![CDATA[<p>今天一天的天气都灰蒙蒙的，阴沉着一天的小脸终于在临近夜晚的时候，绷不住自己的情绪，泪珠哗啦啦的滚下。</p><p>趁着闲暇和父上大人打了一通电话，虽然都是些家长里短，但也不无尽兴。</p><p>过去和老爸都是会对一些问题产生分歧，然后进行辩证的讨论，从中得到营养，感悟。</p><p>但是，现在，可能是随着时间的流逝，老爸没有了之前的锐气，开始听从我的意见。</p><p>我们的话题从辩论赛转移到了生活上。</p><p>聊一聊谁家的姑娘该出嫁了，谁家又买了辆车，谁家的孩子又考上了学。</p><p>过去的我，从来没想过，能轻松，愉快的和父亲谈论这样的话题。<br>也没有想过，原来家长里短，也都不无趣味。</p><p>很喜欢今天的风，今天的云，今天阴沉的阳光与滚落的雨。</p>]]></content>
      
      
      <categories>
          
          <category> Live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>movie -- 后来的我们</title>
      <link href="/blogs/3738a5a.html"/>
      <url>/blogs/3738a5a.html</url>
      
        <content type="html"><![CDATA[<p>起始的时候，这部电影并不吸引我，老套的剧情。并不能触及我内心柔软的台词。周冬雨没有太多突破的演技。<br>失望。可能是我最大的感受。<br><a id="more"></a></p><p>因为感觉这样的电影，担负不起刘若英的后来，也担负不起我们。<br>之后随着剧情的跌进，这种感觉还是缭绕着。知道剧情来到男女主角跨年后，第一次发生关系，然后女主的离开。<br>才第一次让我觉得，这个剧情好像有点不一般。<br>后面男女主顺理成章的在一起，然后又合乎情理的分手。<br>让我第一次有了代入感，我认为这是这部电影的精髓。<br>因为在情侣之间，很有可能会发生类似的事情。因此，当再一次进入到类似的语境时，会不由自主的想到当时的自己。<br>这部电影，就像生活中的很平凡的小事情。你可能不关注，但是当需要记起的时候，你绝对不会遗忘。<br>挺羡慕那些说，看完之后找不到一个情节有共鸣的人的。因为这样代表着他们少了一段遗憾。<br>年少时的我们，总是不会在一起。这才是这个世界的常态。</p><p>总体而言，就人物的刻画上，这两个主角挺渣的。一个在开始的时候不断的换男友，一个在已经已婚后，还带着初恋来宾馆开房。如果不是恰好被同事撞见。可能又是一场激情。</p><blockquote><p>知乎上有个女生的高票答案是这么回答的，反正我不能忍受老公跟前女友共度一夜谈人生谈理想回忆过去喝个半死还差点啪啪啪，最后还送对方回家这种事情。这个应该是女生的感情总结的比较完善的了。<br>但是，她逃避了一个问题，如果是她相遇了她的前任，她能够那么洒脱的放下一切嘛。<br>看过一个视频。<br>一个小伙子失恋后，一直单身。<br>有一天，他意外得知前女友的婚期，于是自己一个人开着车跟在婚礼车队后面，默默送了一路。。。<br>他一边开车，一边嚎啕大哭，像个无助的孩子，看着自己喜爱的东西，却没有办法得到。理智一点点的剥离，而回忆以及回忆带来的伤痛铺天盖地。<br>直到收到前女友发来的短信： 对不起，别追了，就送到这里吧。<br>他才慢慢把车停下，目送着婚礼车队渐行渐远。而昔日里爱过的那个人啊，终于穿着婚纱，带着一脸的娇羞，嫁给了他人的妻子。</p></blockquote><p>所有的欲言又止、一言难尽，都被岁月这壶酒好好的沉淀着，直到”后来”将它启封，然后相忘。</p><p>曾经看“你的名字”的时候，有一个影评很打动我，所爱隔山海，山海亦可平。<br>但是，生活里更多的，是 所爱隔山海，山海不可平。<br>想起电影里，见清的父亲给小晓信里的那句话：缘分这个东西，不负对方就好，想不负此生，真的难。<br>我爱过的人啊，不知道，对你来说，我是否做到了不负如来不负卿。<br>但我想对你说，我想你过的比我好，也不想你比我过的坏，只要过的，比我坏一点点就好。</p><blockquote><p>电影里最打动我的场面是见清从出租屋里追到地铁站，和小晓隔着一扇地铁门相互对视。随着地铁的灯亮起，滴滴滴滴的提示音带走了小晓，也带走了十年。<br>十年之后，他们再相遇的时候。<br>见情问：“如果当时你没走，后来的我们会不会不一样？”<br>方小晓回答：“如果当时你有勇气上了地铁，我会跟你一辈子。”<br>很多人说，见清懦弱，没有责任感。我也这么觉得，因为我也是这么懦弱。</p></blockquote><p>和前任分手的时候，我们在山木楼的桥上坐着，安静着不说话。<br>我一直平静的看着她的侧脸，到最后也没敢说出一句挽留的话语。<br>懦弱吗？当然是的。可笑的是，自己当时还真的以为是为了她好。<br>因为未来的不确定，而放弃自己喜欢的人。是不值得爱的。<br>这是最近的一次聊天里，一个可爱的女孩子教会我的道理。</p><p>曾经，“有一个男孩爱着一个女孩” 是很好的开始，<br>后来，“有些人一旦错过就不再” 是很好的结局。<br>谢谢年少时相爱的人，教会了现在如何去爱。</p>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>serendipity -- 180430</title>
      <link href="/blogs/fd6475c4.html"/>
      <url>/blogs/fd6475c4.html</url>
      
        <content type="html"><![CDATA[<h2 id="投资观念"><a href="#投资观念" class="headerlink" title="投资观念"></a>投资观念</h2><p>玩币倾家荡产四大捷径：</p><ol><li>追涨杀跌</li><li>期货杠杆<br>由于期货是保证金交易，就是说，你只需要出一定比例的钱就可以做全部的买卖了。例如：假设铜每吨20000元，一手=5吨，那么一手单子的总价值就是5<em>20000=100000，如果保证金比例是10%，那么你只需要有1万做保证金就可以买入或卖出1手铜了。但是亏，盈都还是按一手单子货物的全价算，如果铜价跌到19000，那么5</em>19000=95000，如果这个时候平仓的话就是输5000元，相对1万的本金来说就是输50%了。所以说期货的杠杆是指1/保证金比例，保证金比例越高那么杠杆越低，反之，保证金比例越低杠杆越高。正规的期货品种杠杆倍数应该是大概8~12倍左右。一句话，杠杆效应就是有放大输赢倍数的作用。</li><li>融资融币</li><li>短线神操作</li></ol><p>人生巅峰四条大道：</p><ol><li>他是工作</li><li>闲钱投资</li><li>底部买进长线持有</li><li>按时吃饭睡觉</li></ol><p>张哥：<br>看不懂的钱，不赚也能保持心安理得是正确心态。<br>有人炒房赚钱了，有人买比特币赚钱了，有人买腾讯股票赚钱了，有人创业成功赚钱了。<br>这世界看不懂的赚钱方式太正常了。如果也想分一杯羹，就花精力了解，实践。<br>如果自己没能力了解，也没时间了解。就随它去。</p><h2 id="eos"><a href="#eos" class="headerlink" title="eos"></a>eos</h2><p>EOS ：<br>EOS并不是官方的缩写，你可以理解为 <strong>Enterprise Operation System</strong> ，即为商用分布式应用设计的一款区块链操作系统。<br>EOS是一种新的区块链架构，旨在实现分布式应用的性能扩展。</p><p>优势：<br>1、EOS通过创建一个对开发者友好的区块链底层平台，类似区块链的操作系统，性能强大，可以支持多个应用程序同时运，可以同时支持多种编程语言，为开发dApp的开发者提供底层模块，降低开发门槛，就像是微软的windows，你说微软值不值钱。<br>2、EOS通过并行链和DPOS的方式解决了延迟和数据吞吐量的难题。EOS能够实现每秒百万级的处理量，而目前比特币是每秒7笔，以太坊是30-40笔，EOS的这一超强能力吊打比特币和以太。如最近的CryptoKitties| Collect and breed digital cats! 这个特别火的ETH游戏，仅仅一个游戏就占了ETH 15%左右的吞吐量，要是同时上个七八个类似的游戏，ETH估计就要挂掉了，想想就很吓人。无法拓展带宽的ETH在吞吐量上会有很大的挑战，而EOS能解决上面的问题。<br>3、EOS没有手续费，会吸引更多普通用户。而且如果在EOS上开发dApp，需要用到的网络和计算资源是按照开发者拥有的EOS的比例分配的。简单来说，就是你拥有了EOS，就相当于拥有了一套房租给别人收房租，或者说拥有了一块地租给别人建房。</p>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>book -- 高效能人士的七个习惯</title>
      <link href="/blogs/1a0b30b6.html"/>
      <url>/blogs/1a0b30b6.html</url>
      
        <content type="html"><![CDATA[<p>上个周末，去书店看书，挑来挑去选了这一本书。算是缘分使然吧。从中得到了许多关于人生的建议。与诸君分享。<br><a id="more"></a></p><h2 id="0-总纲"><a href="#0-总纲" class="headerlink" title="0. 总纲"></a>0. 总纲</h2><p>习惯</p><ol><li>知识： 做什么，为何做</li><li>技巧： 如何做</li><li>意愿： 想要做</li></ol><p>七个习惯模型</p><ol><li>依赖期 – 独立期<ol><li>积极主动</li><li>以终为始</li><li>要事第一</li></ol></li><li>独立期 – 互赖期<ol><li>双赢思维</li><li>知彼解己</li><li>综合统效</li></ol></li><li>不断更新</li></ol><h2 id="1-积极主动"><a href="#1-积极主动" class="headerlink" title="1. 积极主动"></a>1. 积极主动</h2><p>人类独有的四种天赋：</p><ol><li>自我意识<br>人类具有选择的自由</li><li>想象力<br>超越现实而在头脑中进行创造的能力</li><li>良知<br>明辨是非，坚持行为原则，判断思想，言行正确与否的能力</li><li>独立意志<br>基于自我意识，不受外力影响而自行其是的能力</li></ol><p>积极主动的案例：</p><table><thead><tr><th>消极被动的语言</th><th>积极主动的语言</th></tr></thead><tbody><tr><td>我已无能为力</td><td>试试看有没有其他的可能性</td></tr><tr><td>我就是这样</td><td>我可以选择不同的作风</td></tr><tr><td>他把我气疯了</td><td>我可以控制自己的情绪</td></tr><tr><td>他们不会答应的</td><td>我可以想出有效的表达方式</td></tr><tr><td>我只能这样做</td><td>我能选择恰当的回应</td></tr><tr><td>我不能…</td><td>我选择…</td></tr><tr><td>我不得不…</td><td>我更愿意…</td></tr><tr><td>要是…就好了</td><td>我打算…</td></tr></tbody></table><p>影响圈与关注圈<br>积极主动的人专注于“影响圈”，专心做自己利索能力的事，使影响圈不断扩大。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804241425_194.png" alt=""></p><p>影响圈的核心：<br>做出承诺，与信守承诺的能力</p><blockquote><p>这里要说一句，最好承诺的事情，是举手之劳，并且把握与影响较大的事情，不然，请果断拒绝。</p></blockquote><h2 id="2-以终为始"><a href="#2-以终为始" class="headerlink" title="2. 以终为始"></a>2. 以终为始</h2><p>以终为始的原则</p><ol><li>两次创造的过程<ol><li>Mental/First Creation: 头脑构思</li><li>Physical/Second Creation: 付诸实践</li></ol></li><li>自我领导<ol><li>领导是第一次的创造，先于管理</li><li>管理是正确的做事情，领导是做正确的事情。</li></ol></li></ol><p>人格的组成：</p><ol><li>安全感 ： 代表价值观、认同、情感的归属，自尊自重与是否拥有个人的基本能力</li><li>人生方向 ： 地图和内心的准绳，人类以此为解释外界事物的理据以及决策与行为的原则和内在标准</li><li>智慧 : 人类对生命的认知，对平衡的感知，对事物间联系的理解，包括判断力，洞察力，理解力，是这些能力的统一。</li><li>力量 ： 采取行动，达成目标的能力。</li></ol><p>自我领导的方式：<br>心灵演练：以 个人、积极、果断、可视、情感 五个方面，进行模拟。<br><strong>例：</strong> 发现子女行为不当时，我（个人）能以智慧，爱心、坚定的立场以自制力(积极) 及时应对 (果断)， 结果让我深感欣慰。</p><p>使命宣言：<br>使命，目标，角色。<br>详细的使命宣言在附录</p><h2 id="3-要事第一"><a href="#3-要事第一" class="headerlink" title="3. 要事第一"></a>3. 要事第一</h2><p>四代时间理论</p><ol><li>第一代 ， 着重利用便条与备忘录, 在忙碌中调配时间与精力</li><li>第二代 ， 强调日程， 反映时间管理已经注意到未来的重要。</li><li>第三代 ， 一句轻重缓急设定 短、中、长期目标，再逐日制定目标的计划，将有限的时间、精力加以分配，争取最高的效率。</li><li>第四代 ， 主张个人管理，将重心维持到产出于产能的平衡上。</li></ol><p>时间管理矩阵</p><table><thead><tr><th></th><th>紧迫</th><th>不紧迫</th></tr></thead><tbody><tr><td>重要</td><td>危机<br>迫切问题<br>再限定时间内完成</td><td>预防性措施<br>建立关系<br>明确新的发展机会<br>制定计划和休闲</td></tr><tr><td>不重要</td><td>接待访客<br>某些信件、报告，会议<br>公共活动</td><td>令人愉快的活动<br>琐碎的工作</td></tr></tbody></table><p><strong>不紧迫 + 重要 是高效能人士，最应该注重的东西</strong></p><h2 id="4-双赢思维"><a href="#4-双赢思维" class="headerlink" title="4. 双赢思维"></a>4. 双赢思维</h2><p>不能双赢，就好聚好散。</p><h2 id="5-知彼解己"><a href="#5-知彼解己" class="headerlink" title="5. 知彼解己"></a>5. 知彼解己</h2><p>自传式回应(Autobiographical response)</p><ol><li>价值判断 – 对旁人的意见只有接受或不接受</li><li>追根究底 – 依自己的价值观探查别人的隐私</li><li>好为人师 – 以自己的经验提供忠告。</li><li>自以为是 – 根据自己的行为于动机衡量别人的行为于动机</li></ol><p>真正的交流方式：<br>复述+解释+感情</p><blockquote><p><strong>例：</strong><br>子： 上学真是无聊透了</p><ul><li>复述<br>父： 你已经受不了了，觉得上学太无聊</li><li>复述 + 解释<br>父： 你不想上学了</li><li>感情<br>父： 你感觉很有挫败感</li><li>复述 + 解释 + 感情<br>父： 你对上学有很深的挫败感。</li></ul></blockquote><p><strong>总结：</strong> 在日常交流中，应该养成的习惯： </p><ol><li>倾听 – 上学无聊</li><li>找出想法 – 不想上学</li><li>加以感情 ， 解释原因 – 因为有挫败感</li><li>最后陈述</li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><blockquote class="blockquote-center"><br>使命宣言：<br></blockquote><br><blockquote><br>我的使命：不恋过去，不畏将来，脚踏实地，有规划，有激情的走好每一步，并在生活中力所能及的给予他人关怀与爱。<br>需求：<br> - 自律：登峰造极的成就来源于自律。无论是智力，身体，精神，社会/情感，都需要自律的支持。<br> - 坚持：这里的坚持，是说在面对他人的不解与质疑的时候，能够走好自己的道路。不要太过于在意他人的眼光，从而打乱自己的节奏。<br> - 友善：在生活中，无论对待什么人，还是什么事，第一时间，应该是微笑，然后再考虑如何处理。第一印象的笑容，无论是平和自己的心情，还是抚平对方的焦躁，都是最有力的武器。<br> - 阳光：人生不如意之事，十之八九，然不幸各不相同。永远开心，阳光的去感染身边的人，做一颗发光发热的小太阳，也是极好的。<br>角色：<br> - 儿子：<br> - 丈夫<br> - 朋友<br> - 学生<br> - Coder<br></blockquote>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次讯飞平台的 api 使用问题。</title>
      <link href="/blogs/2bb530bc.html"/>
      <url>/blogs/2bb530bc.html</url>
      
        <content type="html"><![CDATA[<p>之前的便签，一直是 <code>google keep</code> ， 但是在 ios 系统上，同步不方便。每次打开都需要挂着 vpn 。<br>最近接触到了 workflow 与 讯飞听写 。有了一些新的想法。 本来是想通过 <code>url sceme</code> 直接调用 讯飞听写，从而快捷记录。但是这样记录还是将自己的想法分散的放到了不同的 app 里。不便于管理。<br>因此，开始将所有的 idea 通过 evernote 进行管理。通过 workflow 进行便捷记录。但是在使用的过程中，遇到了一个问题，就是想要模拟出<strong>讯飞听写</strong> 的效果，同时保存录音与文字。<br>在网上查了讯飞听写的文档，恰好最近开通了 web api , 所以就想要使用 web api 进行网络上的语音处理。<br><a id="more"></a></p><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>具体的使用过程，讯飞有着完整的文档。<a href="http://doc.xfyun.cn/rest_api/" target="_blank" rel="noopener">详情点击这里</a><br>下面我就说一下，我使用的时候，出现的问题。</p><h3 id="1-讯飞白名单。"><a href="#1-讯飞白名单。" class="headerlink" title="1. 讯飞白名单。"></a>1. 讯飞白名单。</h3><p>讯飞听写，需要为每个 ip 地址设置白名单，大约 5 分钟左右生效，所以，你刚开始提交请求是没有任何作用的。</p><h3 id="2-提交格式"><a href="#2-提交格式" class="headerlink" title="2. 提交格式"></a>2. 提交格式</h3><p>提交的 url 中，需要在 url 里 附加音频文件的 base64 转码后的文字。</p><h3 id="3-文件格式"><a href="#3-文件格式" class="headerlink" title="3. 文件格式"></a>3. 文件格式</h3><p>这里涉及到 录音文件的转码格式。<br>录音文件要求是 wav, 或者 pcm<br>ios 系统的录音在高质量的情况下，默认是 wav 格式的。<br>但是还有一个需要满足的条件是 采样率为 16000 hz<br>但是 ios 的录音文件默认是 48000 hz ， 并且只能是通过开发 app 的时候修改，所以无法满足相应的条件。</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p>上面的第三点问题，我有想过抓取 讯飞听见 的包，看看他调用的 api 是什么，进行一些相应的改动。<br>但是考虑到 一些问题，先留下思路，之后可以尝试改变一下。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killDev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>killBase系列 -- UML 图入门</title>
      <link href="/blogs/a3184c4f.html"/>
      <url>/blogs/a3184c4f.html</url>
      
        <content type="html"><![CDATA[<h2 id="UML-类"><a href="#UML-类" class="headerlink" title="UML 类"></a>UML 类</h2><p><img src="http://ovmspkp0s.bkt.clouddn.com/201804211726_419.png" alt=""></p><h2 id="UML-的多重性修饰"><a href="#UML-的多重性修饰" class="headerlink" title="UML 的多重性修饰"></a>UML 的多重性修饰</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0..*    0 个到多个</span><br><span class="line">*       0 个到多个</span><br><span class="line">1..*    1 个到多个</span><br><span class="line">6       刚好 6 个</span><br><span class="line">3，6    3 个或 6 个</span><br></pre></td></tr></table></figure><h2 id="UML-类间关系"><a href="#UML-类间关系" class="headerlink" title="UML 类间关系"></a>UML 类间关系</h2><ol><li>继承</li><li>实现</li><li><p>依赖<br>可以简单的理解，就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、、临时性的、非常弱的，但是B类的变化会影响到A；比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖；表现在代码层面，为类B作为参数被类A在某个method方法中使用；<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804211736_912.png" alt=""></p></li><li><p>关联<br>他体现的是两个类、或者类与接口之间语义级别的一种强依赖关系，比如我和我的朋友；这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的、关联可以是单向、双向的；表现在代码层面，为被关联类B以类属性的形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量；<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804230932_432.png" alt=""></p></li></ol><ol start="5"><li>聚合<br>聚合是关联关系的一种特例，他体现的是整体与部分、拥有的关系，即<strong>has-a</strong>的关系，<strong>此时整体与部分之间是可分离的，他们可以具有各自的生命周期</strong>，部分可以属于多个整体对象，也可以为多个整体对象共享；比如计算机与CPU、公司与员工的关系等；表现在代码层面，和关联关系是一致的，只能从语义级别来区分；<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804230944_281.png" alt=""></li></ol><ol start="6"><li>组合<br>组合也是关联关系的一种特例，他体现的是一种<strong>contains-a</strong>的关系，这种关系比聚合更强，也称为强聚合；他同样体现整体与部分间的关系，但<strong>此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束</strong>；比如你和你的大脑；表现在代码层面，和关联关系是一致的，只能从语义级别来区分；<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804230943_336.png" alt=""></li></ol><p><strong>强弱程度 ：</strong> 组合&gt;聚合&gt;关联&gt;依赖</p><h2 id="UML-时序图"><a href="#UML-时序图" class="headerlink" title="UML 时序图"></a>UML 时序图</h2><p><img src="http://ovmspkp0s.bkt.clouddn.com/201804231000_201.png" alt=""></p><h2 id="UML-状态图"><a href="#UML-状态图" class="headerlink" title="UML 状态图"></a>UML 状态图</h2><p><img src="http://ovmspkp0s.bkt.clouddn.com/201804231020_862.png" alt=""><br>状态是用圆角矩形表示。这个矩形可以有两个分隔栏。<br>顶部分隔栏是对状态进行命名。<br>底部分隔栏是状态的内部迁移。 使用 事件名/动作 表示<br>可以有两个特殊的事件，进入 – entry , 退出 – exit</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201804231012_370.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tool -- ios 中 url scheme 的使用</title>
      <link href="/blogs/1d89bf34.html"/>
      <url>/blogs/1d89bf34.html</url>
      
        <content type="html"><![CDATA[<p>由于自己最近从 android 叛变到了 ios 的阵营，所以，用了一天的时间来琢磨相关的效率工具，提高自己的工作效率。<br>作为一个程序员，那必须好好的折腾下，才合适。终于在我的不懈努力（折腾下），找到了一个 名词 <code>url scheme</code>。<br><code>url scheme</code> 是 ios 系统下，快捷启动应用与功能的一种方式。<br><a href="https://sspai.com/post/31500#09" target="_blank" rel="noopener">有关于 url scheme 的介绍可以从这类找</a><br><a id="more"></a></p><h2 id="不越狱寻找基本-url-scheme-的方法"><a href="#不越狱寻找基本-url-scheme-的方法" class="headerlink" title="不越狱寻找基本 url scheme 的方法"></a>不越狱寻找基本 url scheme 的方法</h2><p>在网上找了很多，但是都不符合自己的要求，不是要越狱，就是因为 ios11 的发布，所以不再合适这个版本。<br>大致有以下几种：</p><ol><li>通过 <a href="https://github.com/cyanzhong/Retriever" target="_blank" rel="noopener">Retriever</a> —— 快速查 URL Scheme<br>这是由 <strong>pin</strong> 的作者开发的，但是不适用于 <strong>ios 11</strong>.</li><li>通过 <a href="https://itunes.apple.com/cn/app/launch-center-pro-shortcut-launcher-workflows/id532016360?mt=8" target="_blank" rel="noopener">lcp – launch center pro</a> 进行自动查找，因为不是认为控制的，所以不能保证可以得到自己想要的工具。</li><li>使用 Itunes 安装应用，查找应用的安装包，然后进行解压，查找相应的 <strong>info.plist</strong>. Itunes 已经不再支持安装应用。</li></ol><p>通过自己对查找 url scheme 的了解，找到了一种方式，就是下载 越狱应用， 然后解压。<br>过程如下。<br>第一步、 安装电脑板 <a href="https://pro.25pp.com/" target="_blank" rel="noopener">pp 助手</a><br>第二步、 点击 找应用 -》 越狱应用 -》 搜索应用名 -》 <strong>直接安装</strong><br><strong>tips:</strong> 这一步好像会提示让你连接手机，不要连接，再说一次，不要连接，直接安装即可。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804142330_537.png" alt=""><br>第三步、 正常解压缩 <code>.ipa</code> 文件<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804142335_514.png" alt=""><br>第四步、 打开 <code>.\paload\*.app\info.plist</code> 文件，搜索 <code>urlschemes</code> 如下图，可以找到 <code>weixin , weixinapp</code> 等，这些就是 基本 url scheme<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804142338_915.png" alt=""></p><h2 id="寻找复杂-url-scheme"><a href="#寻找复杂-url-scheme" class="headerlink" title="寻找复杂 url scheme"></a>寻找复杂 url scheme</h2><ol><li>是从官网找，一般为了方便用户的使用，官网上会有相应的介绍。</li><li>是联系客服，尝试获取，我使用的 app 比较小众，所以正在尝试和客服沟通 ， 😰。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>book -- growth hacker</title>
      <link href="/blogs/55cdb191.html"/>
      <url>/blogs/55cdb191.html</url>
      
        <content type="html"><![CDATA[<p>通过阅读一本书，拓宽自己的知识面，是一件非常有趣的事情呢。<br><a id="more"></a></p><h2 id="增长黑客的介绍"><a href="#增长黑客的介绍" class="headerlink" title="增长黑客的介绍"></a>增长黑客的介绍</h2><p>增长黑客 ：<br>以数据驱动营销，以市场指导产品，通过技术化手段观察增长目标的人。<br>  这里的技术化手段包括但不限于 A/B测试， 搜索引擎优化， 电子邮件召回， 病毒应i笑傲。<br>  目标指 页面加载速度， 注册转化率， 电子邮件到达水品。</p><p>增长目标 – AARRR</p><ol><li>Acquisition – 获取用户</li><li>Activation – 激发活跃</li><li>Retention – 提高留存</li><li>Revenue – 增加收入</li><li>Referral – 传播推荐。</li></ol><p>合格的特质：</p><ol><li>数据为王 </li><li>专注目标</li><li>专注细节</li><li>富于创意</li><li>信息通透<br><strong>总结：</strong><br>以大量的数据为基础，通过数据分析， – 数据为王<br>来找到提高用户黏性，优化用户体验的方法，并且在这个复杂且单调的过程中，不断的挖掘新鲜且高效的方法， – 专注目标，富于创意。<br>时刻关注那些可能存在的细节问题，并随时准备优化解决， – 专注细节<br>还要具备一个宏观的市场角度来看待产品的发展， – 信息通透<br>从而达到产品的提升。</li></ol><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><p>一切用数据说话</p><ol><li>分析的目的。</li><li>数据来源的正确。</li><li>分析的方法：<ol><li>定性分析</li><li>定量分析</li></ol></li></ol><p>分析工具</p><ol><li>Google Analytics</li><li>Mixpanel</li><li>KissMetrics</li><li>UserCycle</li><li>统计分析（Trends）和用户分组（Cohorts）</li><li>生命周期维护(Lifecycle Messaging)</li><li>分组实验测试(Split-Test Experiments)</li><li>Customer.io – 邮件互动</li><li>Optimize.ly – A/B</li><li>Basecamp – 项目管理软件</li><li>友盟统计分析平台 – 国内的移动应用统计分析平台<br><strong>sum:</strong> 1-4 是<strong>获取</strong>分析指标， 5-9 是<strong>分析</strong>数据， 10 是统一管理项目的平台， 11 是主攻移动应用方面。</li></ol><p>分析需求：</p><ol><li>需求需要雪中送炭</li><li>刚需竞争激烈，但是可以减少前期的风险以及后期推广阻力。</li><li>需求量的研究问题<ol><li>估计目标用户的基数，消费能力，预算然后将这些数字相乘并与行业的公开报告进行比对验证。</li><li>评估市场的产值，然后通过更低的价格，更长的使用周期，从而提升效率，节省成本，最后折算出相对于原产值的全新规模</li></ol></li></ol><h2 id="相关的概念介绍"><a href="#相关的概念介绍" class="headerlink" title="相关的概念介绍"></a>相关的概念介绍</h2><h3 id="产品设计阶段"><a href="#产品设计阶段" class="headerlink" title="产品设计阶段"></a>产品设计阶段</h3><p>PMF (Product/Market Fit) 产品与市场契合：<br>这是一个目标，为了达成这个目标需要的是从早期用户那里获得反馈，并且持续的以低成本改进产品。</p><p>MVP (Minimum Viable Product) 最小化可行产品</p><ol><li>最小化可行产品： 将产品原型用最简洁的方式开发出来，过滤掉冗余的杂音和高级特性。推荐使用微信小程序</li><li>用户反馈： 从早期客户的上手使用中，得到相关的优化反馈。</li><li>快速迭代：结合反馈，迅速优化产品<br><strong>sum：</strong> 这样的优势在于前期的投入小，可以快速获得可沉淀的用户数据，劣势在于后期的转型比较麻烦，因为通过这种方式获得的用户，大都是因为前期参与了产品的迭代过程，每一次的更进都会让他们觉得自己在这个产品的生命周期中起到了至关重要的作用，然而当量大的时候，这种方式必然不在可取，因此如何进行这个方向的迭代是下一个要考虑的问题。</li></ol><p>A/B 测试：<br>简单来说 非 A 即 B 。 因为一个产品设计的时候，备选方案可能模棱两可，所以如何选择成为一个问题。<br>通过 A/B 测试， 让用户选择自己喜欢的方案，从而让一切简单化。</p><ol><li>提供两个方案并行测试</li><li>不同方案之间只存在一个变量。</li></ol><p>有损服务<br>刻意输出在品质上存在某些损失的服务。这是一种产品能力与用户需求之间的平衡与博弈。<br><strong>note:</strong> 这里最优秀的例子是 ov 大厂。oppo,vivo 的研究院都几千人，研究的一样是这个世界最先进最前沿的技术，然而他们并不会将之运用到自己的产品上，或者说完全运用到自己的产品上。这就是他们对自己的产品以及用户的定位有一个清晰的规划。这种对技术的妥协，也是一种意义上的有损服务。</p><h3 id="产品传播阶段"><a href="#产品传播阶段" class="headerlink" title="产品传播阶段"></a>产品传播阶段</h3><p>病毒式传播</p><ol><li>K 因子 – K factor<ul><li>= 感染率*转化率 ， 换句话说 1 个 K银子等于平均 1 个用户能带来的 1 个新用户</li></ul></li><li>病毒循环周期 – Virial Cycle Time<ul><li>用户从发出病毒邀请，到新用户完成转化所需时间。<br>利用的心理：</li></ul></li><li>喜欢</li><li>逐利，互惠：天下熙熙皆为利来，天下攘攘皆为利往</li><li>害怕错过：同样是利用利益的心理，将两种方式差异化，一个需要付费，一个免费但需要传播信息。</li><li>求助： 游戏中的体力槽机制，往往可以通过朋友的赠送补满</li><li>炫耀： 爱炫耀是人内心渴求被关注的一种外在现象，并且在某种深层的程度上来讲，可以产生权力的幻觉，让身处竞争的个体感觉更好。</li><li>稀缺：</li><li>懒惰： 这应该是优化产品体验的一种方法，借助于社交工具，一键分享或者一键登陆等。提高用户体验。</li></ol><h3 id="留存与流失"><a href="#留存与流失" class="headerlink" title="留存与流失"></a>留存与流失</h3><p>流失的原因：</p><ol><li>程序漏洞，性能瓶颈</li><li>用户在产品变现的过程中感到的反感</li><li>话题产品热度的衰减</li><li>更好的替代品</li></ol><p>留存率的常用指标：</p><ol><li>次日留存率 – 产品新版本的品质变动与渠道的优势</li><li>7日留存 – 完整体验周期的去留状况</li><li>30日留存 – 版本迭代后的稳定性。判断产品的演进方式是否合理。</li></ol><p>唤醒机制<br>为找回流失的用户而设计的产品机制。</p><ol><li>邮件唤醒： EDM(Email DirectMarketing , 电子邮件直接营销)</li><li>消息推送通知</li><li>移动网页唤醒应用</li></ol><h3 id="流量变现"><a href="#流量变现" class="headerlink" title="流量变现"></a>流量变现</h3><p>重定向广告<br>针对已经浏览过网站的人群进行再次营销的广告方式，让用户曾经看过的广告再次展示在其面前，通过这种不断的提醒来强化品牌印象，最终促成消费行为<br><strong>code:</strong> 在网站上插入一段追踪代码，当用户进入该页面后，代码将会在他们的电脑里植入一个 cookie , 它会标记出用户身份和感兴趣的商品信息，当这个用户访问其他网站时，只要该网站加入了重定向广告联盟，就有资格读取出 cookie 中记录的用户身份和商品信息，从而将动态的广告位替换成用户感兴趣的商品广告。</p><h3 id="经济学名词"><a href="#经济学名词" class="headerlink" title="经济学名词"></a>经济学名词</h3><p>边际成本 (marginal cost) ：厂商每增加一单位产量所增加的成本 ($\frac{\Delta TC}{\Delta Q}$)<br>　 在经济学和金融学中，边际成本（marginal cost）指的是每一单位新增生产的产品（或者购买的产品）带来到总成本的增量。<br>　 这个概念表明每一单位的产品的成本与总产品量有关。比如，仅生产一辆汽车的成本是极其巨大的，而生产第101辆汽车的成本就低得多，而生产第10000汽车的成本就更低了（这是因为规模经济）。<br>　 但是，考虑到机会成本，随着生产量的增加，边际成本可能会增加。还是这个例子，生产新的一辆汽车时，所用的材料可能有更好的用处，所以要尽量用最少的材料生产出最多的车，这样才能提高边际收益。</p>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tool -- hexo 博客搭建教程进阶</title>
      <link href="/blogs/804c9fef.html"/>
      <url>/blogs/804c9fef.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>因为要使用 hexo 搭建个人博客，而自己作为一个 code 路上的初学者，必然要对这么有趣的项目进行一些分析。掌握一些进阶的手段，才算是一个合格的 <code>coder</code> 。<br><a id="more"></a></p><h1 id="2-独立域名"><a href="#2-独立域名" class="headerlink" title="2. 独立域名"></a>2. 独立域名</h1><p>作为一名程序员，必须有自己的域名，才算帅。<br>下面就让我从最简单的方式一步步教大家注册域名。<br>包括 SSL ， CDN 等等 一站式配齐。<br><strong>注：</strong> 以下所有的方式都是以 <code>github pages</code> 为准。</p><h2 id="2-0-基本概念"><a href="#2-0-基本概念" class="headerlink" title="2.0 基本概念"></a>2.0 基本概念</h2><ol><li>名词介绍：  <ol><li>域名提供商 ： 在哪里购买，即哪里是域名提供商。</li><li>域名解析商 ： 提供 nameserver 服务器的厂家。</li><li>dns解析 : 请参看我的 <a href="https://3dot141.com/blogs/33506.html">killWeb – dns 介绍</a></li></ol></li><li>流程简介：<ol><li>首先是购买域名 – namesilo</li><li>然后是域名解析 – cloudflare</li><li>最后是上传 cname </li></ol></li></ol><h2 id="2-1-域名购买"><a href="#2-1-域名购买" class="headerlink" title="2.1 域名购买"></a>2.1 域名购买</h2><p>可以看 <a href="https://www.1deng.me/2017-best-domain-registrars.html" target="_blank" rel="noopener">这里的推荐</a><br>这里选择最便宜的 <a href="https://www.namesilo.com/index.php" target="_blank" rel="noopener">namesilo</a> 。<br>1、首先点我打开namesilo网站， 注册一个账户。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031618_263.png" alt=""><br>然后继续填写相关信息，因为大家都是在国内使用，所以尽量如实填写<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031619_789.png" alt=""><br>2、登陆刚创建的账户，在domain search框中输入你想买的域名，点击search。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031619_526.png" alt=""><br>3、选中你要买的域名后缀，点击REGISTER CHECKED DOMAINS进行注册。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031620_344.png" alt=""><br>4、进入购买页面，设置隐私保护和购买几年，在promotion code输入优惠码 vpsss，点submit即可优惠1USD。com域名默认8.99USD，使用优惠码之后变成7.99USD，设置完了以后点击continue。。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031632_533.png" alt=""><br>5、进入到付款页面，有多种付款方式可以选择，我们使用最方便的是支付宝，选择支付宝输入支付宝账号，点击GO就跳转到支付宝付款页面，付款后会自动跳转到namesilo注册成功提示页面，稍后你的注册邮箱会收到namesilo的邮件。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031633_133.png" alt=""></p><h2 id="2-2-域名解析"><a href="#2-2-域名解析" class="headerlink" title="2.2 域名解析"></a>2.2 域名解析</h2><p>这里选择免费的 cloudflare 。<br>自带 ssl, cdn , 并且可以抵御 ddos 攻击。<br>1、 打开 <a href="https://www.cloudflare.com/a/sign-up" target="_blank" rel="noopener">cloudflare</a> 官方网站 进行注册<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031636_237.png" alt=""><br>2、 注册成功，可以登陆打开控制台<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031637_910.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031637_886.png" alt=""><br>3、 选择 DNS, 然后等待导入 dns 记录，这里正常情况下，你是<strong>只有几个 namesilo 自带的 dns 记录</strong>的，可以直接将所有的 dns 记录删去。然后添加两个 cname 记录。</p><ol><li>一个是 3dot141.com , 指向 3dot141.github.io </li><li>一个是 www , 指向 3dot141.github.io<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031640_346.png" alt=""><br>cname 记录与其他记录的区别，可以看我博客里的 <a href="https://3dot141.com/blogs/33506.html">killWeb – dns 介绍</a><br>4、 回到 namesilo ， 更改域名解析商 nameserver<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031642_346.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031643_358.png" alt=""><br>这里的域名服务器 与 cloudflare 提供的一致。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031643_313.png" alt=""><br>5、 回到 本地的 blog 文件夹， 在 blog/source 下，新建一个  cname 文件。如下图<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031645_808.png" alt=""><br>写入 3dot141.com, 然后保存，上传。</li></ol><h2 id="2-3-开启-ssl"><a href="#2-3-开启-ssl" class="headerlink" title="2.3 开启 ssl"></a>2.3 开启 ssl</h2><p>1、 点击进入 Crypto<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031652_456.png" alt=""><br>2、 等待状态的转化<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031653_365.png" alt=""><br>刚注册的域名不是这样的状态， 大约要等待 1 小时左右，才会成为激活状态。<br>至于选择什么样的 方式， 这里有 full, flexible, full(strict) 三种可选，推荐 full ，一劳永逸。</p><h2 id="2-4-优化速度"><a href="#2-4-优化速度" class="headerlink" title="2.4 优化速度"></a>2.4 优化速度</h2><p>1、 开启 cdn<br>在 <code>dns</code> 下，可以看到 橘红色的 云标志，代表 cdn 开启。 灰色云标志，代表 cdn 关闭。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031657_617.png" alt=""><br>2、 开启 js,css,html 文件压缩<br>在 <code>speed</code> 下，可以看到第一个 Auto Minify. 点选全部<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031657_762.png" alt=""><br>3、 开启 Enable Accelerated Mobile Links<br>同样是 <code>speed</code> 下，可以看到 如下图， 开启后，可以加快 手机端的访问速度。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804031700_282.png" alt=""></p><h1 id="3-搜索优化"><a href="#3-搜索优化" class="headerlink" title="3. 搜索优化"></a>3. 搜索优化</h1><p>其他的我就不多讲了， next 主题的网站上基本都有，我说一些，网站没有的东西。</p><h2 id="3-1-seo优化"><a href="#3-1-seo优化" class="headerlink" title="3.1 seo优化"></a>3.1 seo优化</h2><p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p><h2 id="3-2-谷歌优化"><a href="#3-2-谷歌优化" class="headerlink" title="3.2 谷歌优化"></a>3.2 谷歌优化</h2><h3 id="3-2-1-收录网页"><a href="#3-2-1-收录网页" class="headerlink" title="3.2.1 收录网页"></a>3.2.1 收录网页</h3><p>登陆 <a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">google 站点平台</a><br>1、 先添加网站<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804051023_922.png" alt=""><br>2、 然后按照步骤操作即可。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804051024_691.png" alt=""><br>首先下载文件，然后将文件放入 \blog\source\ 中。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804051025_324.png" alt=""><br>然后 部署 hexo ,将文件上传至 github page 中，等待几分钟，访问相关的网站进行确认。<br>这里有个问题是，需要在文件中，加入以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br><span class="line">google-site-verification: google82820b77d14c3755.htm</span><br></pre></td></tr></table></figure></p><p><strong>google-site-verification….</strong>是原先文件中的内容，要加入 <code>layout:false</code> 才能够不被再次编译成 hexo 静态网页。<br>3、 验证成功。等待收录即可，一般在一天左右。</p><h3 id="3-2-2-提交站点"><a href="#3-2-2-提交站点" class="headerlink" title="3.2.2 提交站点"></a>3.2.2 提交站点</h3><p>安装sitemap 插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></p><p>然后重新部署，会生成相应的 sitemap.xml 文件。</p><p>将生成的 sitemap.xml 文件加入 google 站点工具中。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804051100_802.png" alt=""></p><h2 id="3-3-百度优化"><a href="#3-3-百度优化" class="headerlink" title="3.3 百度优化"></a>3.3 百度优化</h2><p>github 不允许百度的爬虫，所以如果使用 github 上是不会被百度收录，所以百度优化这一部分，我就放弃了，因为本身，我这个博客的属性，只是对我知识的一个总结。太多的东西，只会增加我的负担。</p><p><strong>注：</strong> 其实，这个也是有解决办法的，不过需要使用多线路解析，然后同时部署 coding 与 github。 然后对 coding 进行优化，这一部分的内容，之后我会进行说明。</p><h2 id="3-4-url优化"><a href="#3-4-url优化" class="headerlink" title="3.4 url优化"></a>3.4 url优化</h2><p>seo搜索引擎优化认为，网站的最佳结构是用户从首页点击三次就可以到达任何一个页面，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，所以我们可以修改我们的 url 连接。</p><ol><li><p>安装 插件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure></li><li><p>在站点配置文件中查找 permalink, 更改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: blogs/:abbrlink.html</span><br></pre></td></tr></table></figure></li><li><p>在站点配置文件中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32 </span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure></li><li><p>可选择模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">crc16 &amp; dec</span><br><span class="line">crc32 &amp; hex</span><br><span class="line">crc32 &amp; dec</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-个性优化"><a href="#4-个性优化" class="headerlink" title="4. 个性优化"></a>4. 个性优化</h1><p>关于一些简单的东西，比如访问次数，字数统计等等简单的插件使用，<a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">next 官网</a>上都有详细的教程，我就不献丑了。</p><h2 id="4-1-点击桃心效果"><a href="#4-1-点击桃心效果" class="headerlink" title="4.1 点击桃心效果"></a>4.1 点击桃心效果</h2><p>在网址输入如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://7u2ss1.com1.z0.glb.clouddn.com/love.js</span><br></pre></td></tr></table></figure></p><p>然后将里面的代码copy一下，新建love.js文件并且将代码复制进去，然后保存。将love.js文件放到路径/themes/next/source/js/src里面，然后打开\themes\next\layout_layout.swig文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="4-2-文章加密访问"><a href="#4-2-文章加密访问" class="headerlink" title="4.2 文章加密访问"></a>4.2 文章加密访问</h2><p>打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</span><br><span class="line">            if (prompt(&apos;请输入文章密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</span><br><span class="line">                alert(&apos;密码错误！&apos;);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>然后在文章上写成类似这样：<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804051216_353.png" alt=""></p><h2 id="4-3-Daovoice-匿名沟通"><a href="#4-3-Daovoice-匿名沟通" class="headerlink" title="4.3 Daovoice 匿名沟通"></a>4.3 Daovoice 匿名沟通</h2><p>首先在 <a href="http://dashboard.daovoice.io/" target="_blank" rel="noopener">daovoice</a> 注册账号,邀请码是0f81ff2f,注册完成后会得到一个 app_id :<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804051219_859.png" alt=""><br>记下这个 app_id的值，然后打开/themes/next/layout/_partials/head.swig,写下如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">  daovoice(&apos;init&apos;, &#123;</span><br><span class="line">      app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(&apos;update&apos;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开主题配置文件，在最后写下如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Online contact </span><br><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id: 这里填你的刚才获得的 app_id</span><br></pre></td></tr></table></figure></p><p>重新 hexo g ，hexo s 就能看到效果了。<br>安装成功后可以在DaoVoice 控制台上的聊天设置里设置聊天窗口样式，附上我的设置<br><img src="http://ovmspkp0s.bkt.clouddn.com/201804051221_472.png" alt=""></p><h2 id="4-4-妙传图片至七牛云"><a href="#4-4-妙传图片至七牛云" class="headerlink" title="4.4 妙传图片至七牛云"></a>4.4 妙传图片至七牛云</h2><p>秒传图片到七牛云并展现在博客中<br>在markdown中写blog的朋友，想必这点是最烦恼的吧，一般来说都要手动上传图片到七牛云，再把链接写到markdown中。逛了逛社区，有人用phthon实现一个自动上传的脚本，但是我觉得还不是特别方便，这时在github上找到一个一键贴图工具<a href="https://github.com/jiwenxing/qimage-mac" target="_blank" rel="noopener">qiniu-image-tool</a>，它支持本地文件、截图、网络图片一键上传七牛云并返回图片引用。Mac 是基于 Alfred 的，其 windows 也有相应版本windows版本。</p><p>按照其要求配置好以后，用截图软件截图后，或者本地图片后 copy，然后直接按设置好的 command+option+v，然后在图片成功上传到七牛云图床上，剪贴板上也有相应的连接。<br><img src="https://raw.githubusercontent.com/jiwenxing/qiniu-image-tool/master/res/local.gif" alt=""></p><h2 id="4-5-多终端编辑"><a href="#4-5-多终端编辑" class="headerlink" title="4.5 多终端编辑"></a>4.5 多终端编辑</h2><p><strong> 上传 </strong></p><ol><li>删除主题下的 <code>.git</code> 文件, 以我为例，就是 <code>themes/next/.git</code></li><li>创建分支 hexo 并切换为默认 <img src="http://ovmspkp0s.bkt.clouddn.com/201804061658_784.png" alt=""></li><li>编辑目录下的 <code>.gitignore</code> 文件。</li><li>回到 blog 的源文件目录下， <ol><li><code>git init</code></li><li><code>git add -A</code></li><li><code>git commit -m &quot;hexo source code&quot;</code></li><li><code>git branch hexo</code></li><li><code>git remote add origin git@github.com:3dot141/3Dot141.github.io.git</code> 注意，这里把相应自己的 远程仓库 地址输入即可。</li><li><code>git push origin hexo -f</code></li></ol></li></ol><p><strong> 下载 </strong></p><ol><li>先下载 node.js , 然后安装 hexo</li><li>git hexo 源码。</li><li>编辑，之后再次上传即可。</li><li>不要忘了将修改后的源码再次上传。</li></ol><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><ol><li>修改外观样式<br><code>themes/next/layout/*/*.swig</code></li><li>添加 js<br>在 <code>themes/next/source/js/src/*/*.js</code> 添加 js 文件，然后在 <code>themes/next/layout/_layout.swig</code> 中加入 <script></script> 标签。 </li><li>添加 css<br>在 <code>thems/next/sorce/css/_custom/custom.styl</code> 中加入相关 css 语法。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tool -- hexo 博客搭建教程入门</title>
      <link href="/blogs/32551.html"/>
      <url>/blogs/32551.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>作为一个很喜欢整理知识的人，我特别希望能将自己写的一些东西，发布出去，通过云端保存，并且方便我随时随地查看。<br>所以，当各大博客并不能完全满足我的需求时，我选择自己搭建一个博客，<br>去整理自己所学。<br><a id="more"></a></p><hr><p>在通过对各种建站方式的比较后，终于决定选择使用 <strong>hexo</strong> 作为我的个人博客。</p><hr><h1 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h1><p><strong>优点</strong>： </p><ol><li>不需要投资，地址免费</li><li>流程简单</li><li>使用方便</li><li>使用 npm , git , hexo (node.js) ,markdown 操作。对我这个码农来说，很适用。<br><strong>缺点</strong>：</li><li>同步比较慢</li><li>不容易被搜索引擎收录</li><li>自己掌握备份</li></ol><h1 id="3-流程"><a href="#3-流程" class="headerlink" title="3. 流程"></a>3. 流程</h1><h2 id="1-配置-Github"><a href="#1-配置-Github" class="headerlink" title="1. 配置 Github"></a>1. 配置 Github</h2><p>注册，登录 <a href="https://github.com/" target="_blank" rel="noopener">github</a></p><hr><p>记住自己的账号名<br><img src="http://ovmspkp0s.bkt.clouddn.com/201801042117_567.png" alt=""></p><p>我的账号名 是 3dot141</p><hr><p>创建一个新的仓库<br><img src="http://ovmspkp0s.bkt.clouddn.com/201801042118_845.png" alt=""></p><blockquote><p><strong>注意</strong>： 这里因为我的名字 是 3dot141 ,所以我建了一个 3dot141.github.io 的仓库。<img src="http://ovmspkp0s.bkt.clouddn.com/201801042120_900.png" alt=""></p></blockquote><hr><p>完成这一步后， Github 的部分暂时完成了</p><h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2. 环境配置"></a>2. 环境配置</h2><p>这里要配置两个环境： </p><ol><li>node.js</li><li>git</li></ol><h3 id="1-node-js"><a href="#1-node-js" class="headerlink" title="1. node.js"></a>1. node.js</h3><p>直接下载安装即可。<br>下面是地址<br><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a></p><p><strong>推荐使用 LTS 版</strong> </p><h3 id="2-git"><a href="#2-git" class="headerlink" title="2. git"></a>2. git</h3><p>因为国内获取 git ，需要科学上网。<br>所以这里有一个国内的下载站，方便大家下载。</p><blockquote><p>感谢大佬。</p></blockquote><p><a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">Git for Windows 国内下载站</a></p><hr><p>然后使用cmder ， 一个windows 上的神器，进行 git 配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;这里是你自己的用户名 -- 以我为例 -- 3dot141&quot;</span><br><span class="line">git config --global user.email &quot;这里是你自己的注册邮箱 -- ..@gmail.com&quot;</span><br></pre></td></tr></table></figure><p>如果觉得这样不好操作，可以到自己的c/users/你自己使用的用户下/.gitconfig<br>打开后操作<br>如下图<br><img src="http://ovmspkp0s.bkt.clouddn.com/201801042133_195.png" alt=""></p><p>这里的 core 与 http \ https 留着下面再讲。。。</p><hr><p>打开cmder,输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github的注册邮箱地址 -- ..@gmail.com&quot;</span><br></pre></td></tr></table></figure></p><p>然后直接一路确定，最后得到信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your public key has been saved in c/Users/你的用户/.ssh/id_rsa.pub.</span><br></pre></td></tr></table></figure></p><p>打开该文件，Ctrl+a,Ctrl+c,v, 复制所有内容。</p><hr><p>进入 github<br>然后一路往下操作</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201801042141_67.png" alt=""></p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201801042142_644.png" alt=""></p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201801042142_916.png" alt=""></p><hr><p>使用 cmder , 安装 hexo 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>可能会有警告，无视即可。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>进入自己想 存储的地址， 比如 f:/myblog<br>然后右键打开 cmder<br><img src="http://ovmspkp0s.bkt.clouddn.com/201801042145_439.png" alt=""></p><p>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></p><p>直至出现 ，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure></p><p>然后就继续输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 因为你初始化hexo 之后source目录下自带一篇hello world文章, 所以直接执行下方命令</span><br><span class="line">$ hexo generate</span><br><span class="line"># 启动本地服务器</span><br><span class="line">$ hexo server</span><br><span class="line"># 在浏览器输入 http://localhost:4000/就可以看见网页和模板了</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p><p>在浏览器中输入<br>localhost:4000</p><hr><p>下面就是见证奇迹的时刻</p><hr><p><img src="http://ovmspkp0s.bkt.clouddn.com/201801042148_671.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mood -- 180331</title>
      <link href="/blogs/fcb82e9d.html"/>
      <url>/blogs/fcb82e9d.html</url>
      
        <content type="html"><![CDATA[<p>不知不觉就已经到了三月的最后一天。从我外出实习，到现在也已经有了不短的时间。想讲的很多，就将这第一次的体验，写成文字，为自己记录这一段回不去的时光。<br><a id="more"></a></p><ul><li>第一次真正的入职。<br>经过自己一年多的努力，在去年10月中旬，得到了公司的 offer ，因为学校的课程比较满，所以一直没有时间进行入职考核，而现在终于能够进入公司，感受文化，氛围，成为一颗小齿轮⚙️，参与到一家优秀的公司的日常运转中。考核，必然是辛苦的，这一点当初的 hr 已经打过预防针， 说每天都要工作到 10 点钟之类的。 事实也是如此，每天 7点半 醒来， 8点半到公司， 开电脑， 开始汲取与考核相关的各个方面的知识。 10 点半回去， 然后再处理一下毕设的事情，12点左右才能躺在宾馆的床上， 真正的放松一下。<br>这种精神的高度紧张，即便是在高考的时候，也是没有过的，更何况持续了十多天之久。累，辛苦，抱怨，怀疑，这些都是有的，但是，相比较这些，我更庆幸的是自己坚持下来了。在一个极度压缩的时间里，将考核完成，并且较之一般还稍好一点。这让我一个半路出家的初级 coder 建立了稍许自信，我，不比别人差。他们虽然多是名校毕业，但是，无论是学习能力，还是已经掌握的知识广度深度，我都比他们更胜一筹。这已经是对我的最大肯定。<br>毕竟，当时我知道他们是南京大学之类的名校时，心里是有些许自卑的。自己的出身和他们相比，却是稍差。一个是985顶尖高校的科班毕业生，一个只不过211垫底学校的一名非科班学生。<br>能得到这样的结果，我想，算是对自己的大学生活交出一份差强人意的答卷。<br>除了工作上的收获，我还拥有了几份友谊，也是因缘际会吧。一见如故，相谈甚欢。这也对我在异乡的生活增添了一些不一样的韵味。幸福并感激着。</li><li>第一次带着同学游览家乡。<br>付同学是我的室友，一年考研，成绩不尽人意，在调剂的过程中，机缘巧合来到了徐州。也是巧合，我当时刚完成考核回到家。当他告诉我，自己这是最后一次的尝试时，我明白，他现在的内心是非常疲惫的。一个人独自面对这个世界的压力，孤独和无力会是一根针，时时刺痛稚嫩的内心。这种感觉，我懂，也知道这个时候，他最需要的就是陪伴，不需要说多少话，不需要做多少事，只要身边有一个人，自己熟悉的人，然后心里就有了依靠，就不会在前进路上倒下，就不会被四面八方的陌生戳伤，毕竟，身后有着一个人，陪伴着你。因此，虽然从家里到市区需要大巴 2 个小时， 不过我还是当下背着包出发了。一天半的陪伴，可能不算什么，但是对于我来说，已经是强打着精神，撑下来的。结果也是满意的，昨天他说，自己被徐州某不知名高校录取了。<br>我想，这对他来说，意义重大吧。毕竟，在荒漠里能够开出一朵娇艳的花🌹，总归是令人惊艳的。希望，这段宝贵的回忆，能够沉成一段经年不散的酒香，这样，对我来说，也会感受到温暖吖，哈哈。<br>你以为这样就完了？不，从这件事中，我最开心的是身边的朋友，人或事，都在不断的前行，不管道途多崎岖，都一往无前。与优秀的人共事，才能让自己成为更好的自己。</li><li>第一次北上北京。<br>应朋友的邀请，陪他一起去北京游玩。现在的自己正在前往北京的高铁上，记录下这三月的行程，路途未完，静待佳缘。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ArithMagic -- 00</title>
      <link href="/blogs/29483.html"/>
      <url>/blogs/29483.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在知乎上看到一道很有趣的题目，看有各种版本，但是没有 java 版，所以就自己写了一份。<br><a id="more"></a><br><img src="http://ovmspkp0s.bkt.clouddn.com/201803071938_842.png" alt=""></p><p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">q1</span><span class="params">(<span class="keyword">int</span>[] is)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">q2</span><span class="params">(<span class="keyword">int</span>[] is)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (is[<span class="number">2</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">65</span>:</span><br><span class="line">                is[<span class="number">5</span>] = <span class="number">67</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">66</span>:</span><br><span class="line">                is[<span class="number">5</span>] = <span class="number">68</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">67</span>:</span><br><span class="line">                is[<span class="number">5</span>]=<span class="number">65</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">68</span>:</span><br><span class="line">                is[<span class="number">5</span>]=<span class="number">66</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">q3</span><span class="params">( <span class="keyword">int</span>[] is)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">3</span>] == <span class="number">65</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (is[<span class="number">3</span>]!=is[<span class="number">6</span>])&amp;&amp;(is[<span class="number">3</span>]!=is[<span class="number">2</span>])&amp;&amp;(is[<span class="number">3</span>]!=is[<span class="number">4</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">3</span>] == <span class="number">66</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (is[<span class="number">6</span>]!=is[<span class="number">3</span>])&amp;&amp;(is[<span class="number">6</span>]!=is[<span class="number">2</span>])&amp;&amp;(is[<span class="number">6</span>]!=is[<span class="number">4</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">3</span>] == <span class="number">67</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (is[<span class="number">2</span>]!=is[<span class="number">3</span>])&amp;&amp;(is[<span class="number">2</span>]!=is[<span class="number">6</span>])&amp;&amp;(is[<span class="number">2</span>]!=is[<span class="number">4</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">3</span>] == <span class="number">68</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (is[<span class="number">4</span>]!=is[<span class="number">3</span>])&amp;&amp;(is[<span class="number">4</span>]!=is[<span class="number">6</span>])&amp;&amp;(is[<span class="number">4</span>]!=is[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">q4</span><span class="params">( <span class="keyword">int</span>[] is)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">4</span>] == <span class="number">65</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">1</span>] == is[<span class="number">5</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">4</span>]== <span class="number">66</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">2</span>] == is[<span class="number">7</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">4</span>] == <span class="number">67</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">1</span>] == is[<span class="number">9</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">4</span>] == <span class="number">67</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">6</span>] == is[<span class="number">10</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">q5</span><span class="params">( <span class="keyword">int</span>[] is)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">5</span>] == <span class="number">65</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">8</span>] == is[<span class="number">5</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">5</span>] == <span class="number">66</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">4</span>] == is[<span class="number">5</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">5</span>] == <span class="number">67</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">9</span>] == is[<span class="number">5</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">5</span>] == <span class="number">67</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">7</span>] == is[<span class="number">5</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//i=is[i]</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">q6</span><span class="params">( <span class="keyword">int</span>[] is)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">6</span>] == <span class="number">65</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">8</span>] == is[<span class="number">2</span>]&amp;&amp;is[<span class="number">8</span>]==is[<span class="number">4</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">6</span>] == <span class="number">66</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">8</span>] == is[<span class="number">1</span>]&amp;&amp;is[<span class="number">8</span>]==is[<span class="number">6</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">6</span>] == <span class="number">67</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">8</span>] == is[<span class="number">3</span>]&amp;&amp;is[<span class="number">10</span>]==is[<span class="number">8</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">6</span>] == <span class="number">67</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">8</span>] == is[<span class="number">5</span>]||is[<span class="number">8</span>]==is[<span class="number">9</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">q7</span><span class="params">( <span class="keyword">int</span>[] is)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> na=<span class="number">0</span>;<span class="keyword">int</span> nb=<span class="number">0</span>;<span class="keyword">int</span> nc=<span class="number">0</span>;<span class="keyword">int</span> nd=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i1 : is) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i1==<span class="number">65</span>)&#123;</span><br><span class="line">                na++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i1 == <span class="number">66</span>) &#123;</span><br><span class="line">                nb++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i1 == <span class="number">67</span>) &#123;</span><br><span class="line">                nc++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i1 == <span class="number">68</span>) &#123;</span><br><span class="line">                nd++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> min = Math.min(Math.min(Math.min(na, nb), nc), nd);</span><br><span class="line">        <span class="keyword">if</span> (min == na) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">7</span>] == <span class="number">67</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min==nb)&#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">7</span>] == <span class="number">66</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min == nc) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">7</span>] == <span class="number">65</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min == nd) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">7</span>] == <span class="number">68</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">q8</span><span class="params">( <span class="keyword">int</span>[] is)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Math.abs(is[<span class="number">1</span>]-is[<span class="number">7</span>])&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">8</span>] == <span class="number">65</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Math.abs(is[<span class="number">1</span>]-is[<span class="number">5</span>])&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">8</span>] == <span class="number">66</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Math.abs(is[<span class="number">1</span>]-is[<span class="number">2</span>])&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">8</span>] == <span class="number">67</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Math.abs(is[<span class="number">1</span>]-is[<span class="number">10</span>])&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">8</span>] == <span class="number">68</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">q9</span><span class="params">( <span class="keyword">int</span>[] is)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is[<span class="number">1</span>] == is[<span class="number">6</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">9</span>] == <span class="number">65</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (is[<span class="number">5</span>] != is[<span class="number">6</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">9</span>] == <span class="number">66</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (is[<span class="number">5</span>] != is[<span class="number">10</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">9</span>] == <span class="number">67</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (is[<span class="number">5</span>] != is[<span class="number">2</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">9</span>] == <span class="number">68</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (is[<span class="number">5</span>] != is[<span class="number">9</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">9</span>] == <span class="number">65</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (is[<span class="number">5</span>] == is[<span class="number">6</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">9</span>] == <span class="number">66</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (is[<span class="number">5</span>] == is[<span class="number">10</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">9</span>] == <span class="number">67</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (is[<span class="number">5</span>] == is[<span class="number">2</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">9</span>] == <span class="number">68</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (is[<span class="number">5</span>] == is[<span class="number">9</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">q10</span><span class="params">( <span class="keyword">int</span>[] is)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> na=<span class="number">0</span>;<span class="keyword">int</span> nb=<span class="number">0</span>;<span class="keyword">int</span> nc=<span class="number">0</span>;<span class="keyword">int</span> nd=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i1 : is) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i1==<span class="number">65</span>)&#123;</span><br><span class="line">                na++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i1 == <span class="number">66</span>) &#123;</span><br><span class="line">                nb++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i1 == <span class="number">67</span>) &#123;</span><br><span class="line">                nc++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i1 == <span class="number">68</span>) &#123;</span><br><span class="line">                nd++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> min = Math.min(Math.min(Math.min(na, nb), nc), nd);</span><br><span class="line">        <span class="keyword">int</span> max = Math.max(Math.max(Math.max(na, nb), nc), nd);</span><br><span class="line">        <span class="keyword">int</span> delta = max-min;</span><br><span class="line">        <span class="keyword">if</span> (delta == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">10</span>] == <span class="number">67</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(delta==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">10</span>] == <span class="number">66</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delta==<span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">10</span>] == <span class="number">65</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delta==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[<span class="number">10</span>] == <span class="number">68</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>[] is)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (q1(is) &amp;&amp; q2(is) &amp;&amp; q3(is) &amp;&amp; q4(is) &amp;&amp; q5(is) &amp;&amp; q6(is) &amp;&amp; q7(is) &amp;&amp; q8(is) &amp;&amp; q9(is) &amp;&amp; q10(is)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Main main = <span class="keyword">new</span> Main();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">4</span>; l++) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; <span class="number">4</span>; m++) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">4</span>; n++) &#123;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> o = <span class="number">0</span>; o &lt; <span class="number">4</span>; o++) &#123;</span><br><span class="line">                                    <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">4</span>; p++) &#123;</span><br><span class="line">                                        <span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">0</span>; q &lt; <span class="number">4</span>; q++) &#123;</span><br><span class="line">                                            <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt;<span class="number">4</span>; r++) &#123;</span><br><span class="line">                                                <span class="keyword">int</span>[] is = &#123;<span class="number">0</span>,i+<span class="number">65</span>,j+<span class="number">65</span>,k+<span class="number">65</span>,l+<span class="number">65</span>,m+<span class="number">65</span>,n+<span class="number">65</span>,o+<span class="number">65</span>,p+<span class="number">65</span>,q+<span class="number">65</span>,r+<span class="number">65</span>&#125;;</span><br><span class="line">                                                <span class="keyword">if</span> (main.test(is)) &#123;</span><br><span class="line">                                                    <span class="keyword">for</span> (<span class="keyword">int</span> i1 : is) &#123;</span><br><span class="line">                                                        System.out.print((<span class="keyword">char</span>) i1);</span><br><span class="line"></span><br><span class="line">                                                    &#125;</span><br><span class="line">                                                    <span class="keyword">return</span> ;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arithmatic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>killWeb -- Nginx 详解</title>
      <link href="/blogs/60231.html"/>
      <url>/blogs/60231.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>内容比较多， 等到 结合 《Nginx 高性能 Web 服务器详解》 在将这些东西汇总。<br><a id="more"></a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://wiki.nginx.org/Main" target="_blank" rel="noopener">http://wiki.nginx.org/Main</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzAxNzMwOTQ0NA==&amp;mid=2653355303&amp;idx=1&amp;sn=ce05d2a59c01f0e55b6d828805180aa2&amp;chksm=8035d74cb7425e5a95b52ebf7deebe99426886f6428a871dba3a98655deae79ebe383df3fb01#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzAxNzMwOTQ0NA==&amp;mid=2653355303&amp;idx=1&amp;sn=ce05d2a59c01f0e55b6d828805180aa2&amp;chksm=8035d74cb7425e5a95b52ebf7deebe99426886f6428a871dba3a98655deae79ebe383df3fb01#rd</a><br><a href="http://www.ha97.com/5194.html" target="_blank" rel="noopener">http://www.ha97.com/5194.html</a><br><a href="https://www.cnblogs.com/zhouxinfei/p/7862285.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhouxinfei/p/7862285.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 整合 RedisCache</title>
      <link href="/blogs/20329.html"/>
      <url>/blogs/20329.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>springboot 2.0 后，在与 RedisCache 的整合部分有一些改变，网上的文章很少，所以自己查阅官方的 api  以及 源码，花费两天的时间，做好了总结<br><a id="more"></a></p><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="CachingConfigSupport"><a href="#CachingConfigSupport" class="headerlink" title="CachingConfigSupport"></a>CachingConfigSupport</h1><p>继承 CachingConfigSupport 类，然后重写 cacheManager 与 keyGenerator .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisStandaloneConfiguration <span class="title">getRedisClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisStandaloneConfiguration redisStandaloneConfiguration = <span class="keyword">new</span> RedisStandaloneConfiguration(host, Integer.parseInt(port));</span><br><span class="line">        <span class="keyword">return</span> redisStandaloneConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisConnectionFactory <span class="title">redisConnectionFactory</span><span class="params">(RedisStandaloneConfiguration RedisStandaloneConfiguration)</span> </span>&#123;</span><br><span class="line">        JedisConnectionFactory jedisConnectionFactory = <span class="keyword">new</span> JedisConnectionFactory(RedisStandaloneConfiguration);</span><br><span class="line">        <span class="keyword">return</span> jedisConnectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory cf)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, String&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;String, String&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(cf);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory cf)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//RedisCacheWriter redisCacheWriter = RedisCacheWriter.nonLockingRedisCacheWriter(cf);</span></span><br><span class="line">        <span class="comment">//RedisCacheManager cacheManager = new RedisCacheManager(redisCacheWriter, RedisCacheConfiguration.defaultCacheConfig());</span></span><br><span class="line"></span><br><span class="line">        RedisCacheManager cm = RedisCacheManager.builder(cf)</span><br><span class="line">                .cacheDefaults(RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                        .serializeValuesWith(</span><br><span class="line">                                RedisSerializationContext.SerializationPair</span><br><span class="line">                                        .fromSerializer(<span class="keyword">new</span> StringRedisSerializer()))).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object o, Method method, Object... objects)</span> </span>&#123;</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                sb.append(o.getClass().getName());</span><br><span class="line">                sb.append(method.getName());</span><br><span class="line">                <span class="keyword">for</span> (Object obj : objects) &#123;</span><br><span class="line">                    sb.append(obj.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(sb.toString());</span><br><span class="line">                <span class="keyword">return</span> sb.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CacheManger"><a href="#CacheManger" class="headerlink" title="CacheManger"></a>CacheManger</h2><p>初始化 CacheManager 类有三种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最简单</span></span><br><span class="line">RedisCacheManager.create(connectionFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line">![](http:<span class="comment">//ovmspkp0s.bkt.clouddn.com/201803071038_489.png)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 推荐方法 */</span></span><br><span class="line">RedisCacheManager.builder(RedisCacheWriter.lockingRedisCacheWriter())</span><br><span class="line">.cacheDefaults(defaultCacheConfig())</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">RedisCacheManager cm = RedisCacheManager.builder(connectionFactory)</span><br><span class="line">.cacheDefaults(defaultCacheConfig())</span><br><span class="line">.initialCacheConfigurations(singletonMap(<span class="string">"predefined"</span>, defaultCacheConfig().disableCachingNullValues()))</span><br><span class="line">.transactionAware()</span><br><span class="line">.build();</span><br></pre></td></tr></table></figure><h3 id="ConnectionFactory"><a href="#ConnectionFactory" class="headerlink" title="ConnectionFactory"></a>ConnectionFactory</h3><p>上面每一种方法 ， 都需要用到 ConnectionFactory 类。<br>所以，这里先介绍 ConnectionFactory 类。</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201803071054_499.png" alt=""></p><p>如图所示 ， 上面涉及到了 5 个相关类<br>分别为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">JedisClientConfiguration</span><br><span class="line"></span><br><span class="line">JedisPoolConfig</span><br><span class="line"></span><br><span class="line">RedisStadaloneConfiguration</span><br><span class="line"></span><br><span class="line">RedisClusterConfiguration</span><br><span class="line"></span><br><span class="line">RedisSentinelConfiguration</span><br></pre></td></tr></table></figure></p><h4 id="JedisClientConfiguration"><a href="#JedisClientConfiguration" class="headerlink" title="JedisClientConfiguration"></a>JedisClientConfiguration</h4><p>相关 方法 如下</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201803071103_86.png" alt=""></p><p>可以看出<br>这个类可以设置 poolConfig , ssl , hostnameVerifier 等与客户端连接的基本属性。<br>因为设置了 poolConfig ，所以可以在做参数时，代替 JedisPoolConfig</p><h4 id="JedisPoolConfig"><a href="#JedisPoolConfig" class="headerlink" title="JedisPoolConfig"></a>JedisPoolConfig</h4><p>一些 关于 连接池的 相关信息。</p><h4 id="三种基本配置"><a href="#三种基本配置" class="headerlink" title="三种基本配置"></a>三种基本配置</h4><p>RedisStadaloneConfiguration<br>用于 单个 redisStadaloneConfiguration 连接</p><p>RedisClusterConfiguration<br>用于 redis 集群连接</p><p>RedisSentinelConfiguration<br>用于 哨兵 模式的连接</p><p>进阶配置 之后再写。</p><h3 id="默认设置"><a href="#默认设置" class="headerlink" title="默认设置"></a>默认设置</h3><p>通过 RedisCacheManager.create(connectionFactory) 得出的最简单的设置为<br>RedisCacheManager defaults</p><table><thead><tr><th>Setting</th><th>Value</th></tr></thead><tbody><tr><td>Cache Writer</td><td>non locking</td></tr><tr><td>Cache Configuration</td><td>RedisCacheConfiguration#defaultConfiguration</td></tr><tr><td>Initial Caches</td><td>none</td></tr><tr><td>Trasaction Aware</td><td>no</td></tr><tr><td>Key Expiration</td><td>none</td></tr><tr><td>Cache null</td><td>yes</td></tr><tr><td>Prefix Keys</td><td>yes</td></tr><tr><td>Default Prefix</td><td>the actual cache name</td></tr><tr><td>Key Serializer</td><td>StringRedisSerializer  </td></tr><tr><td>Value Serializer</td><td>JdkSerializationRedisSerializer</td></tr><tr><td>Conversion Service</td><td>DefaultFormattingConversionService with default cache key converters</td></tr></tbody></table><h3 id="更改设置"><a href="#更改设置" class="headerlink" title="更改设置"></a>更改设置</h3><p><strong>1、 第一部分</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RedisCacheManager.builder(connectionFactory) --&gt; RedisCacheManagerBuilder</span><br></pre></td></tr></table></figure></p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201803071110_887.png" alt=""></p><p><strong>下面是 更改属性 与 相关方法 的映射关系</strong></p><table><thead><tr><th>Setting</th><th>Value</th></tr></thead><tbody><tr><td>Cache Writer</td><td>fromCacheWriter</td></tr><tr><td>Cache Configuration</td><td>cacheDefaults</td></tr><tr><td>Initial Caches</td><td>initialCacheNames <br> withInitialCacheConfigurations</td></tr><tr><td>Trasaction Aware</td><td>transactionAware</td></tr></tbody></table><p><strong>2、 第二部分</strong><br><strong>这里介绍一下 withInitialCacheConfigurations 方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManagerBuilder <span class="title">withInitialCacheConfigurations</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Map&lt;String, RedisCacheConfiguration&gt; cacheConfigurations)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(cacheConfigurations, <span class="string">"CacheConfigurations must not be null!"</span>);</span><br><span class="line">    cacheConfigurations.forEach((cacheName, configuration) -&gt; Assert.notNull(configuration,</span><br><span class="line">            String.format(<span class="string">"RedisCacheConfiguration for cache %s must not be null!"</span>, cacheName)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.initialCaches.putAll(cacheConfigurations);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法可以将 cacheName 与 configuration 对应起来，<br>比如 cacheName = “test” <--> defaultConfiguration<br>之后 当遇到 cacheName 为 test 的缓存时，就会默认使用 defaultConfiguration 配置的缓存配置。</--></p><p><strong>3、 第三部分</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RedisCacheManagerBuiler.cacheDefaults(RedisCacheConfiguration RedisCacheConfiguration)</span><br></pre></td></tr></table></figure></p><p>这里的 RedisCacheConfiguration 还可以通过 设置 改变下面这些 相关属性</p><table><thead><tr><th>Setting</th><th>value</th></tr></thead><tbody><tr><td>Key Expiration</td><td>entryTtl</td></tr><tr><td>Cache null</td><td>disableCachingNullValues()</td></tr><tr><td>Prefix Keys</td><td>usePrefixe() <br> disableKeyPrefix()</td></tr><tr><td>Default Prefix</td><td>prefixKeysWith(String)</td></tr><tr><td>Key Serializer</td><td>serializeKeysWith(SerialiazationPair<string>)</string></td></tr><tr><td>Value Serializer</td><td>serializeValuesWith(SerializationPair&lt;?&gt;)</td></tr><tr><td>Conversion Service</td><td>withConversionService(ConversionService)</td></tr></tbody></table><p>其中 SerializationPair 是一个静态内部类，<br>可以通过 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RedisSerializationContext</span><br><span class="line">  .SerializationPair</span><br><span class="line">  .fromSerializer(RedisSerializer&lt;T&gt;)</span><br><span class="line">--&gt; SerialiaztionPair</span><br></pre></td></tr></table></figure><p>进行转换</p><h2 id="keyGenerator"><a href="#keyGenerator" class="headerlink" title="keyGenerator"></a>keyGenerator</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object o, Method method, Object... objects)</span> </span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(o.getClass().getName());</span><br><span class="line">            sb.append(method.getName());</span><br><span class="line">            <span class="keyword">for</span> (Object obj : objects) &#123;</span><br><span class="line">                sb.append(obj.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sb.toString());</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上这种方式是覆盖默认的 keyGenerator<br>还可以在注解中指定 keyGenerator 进行 key 的生成。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><table><thead><tr><th>注　　解</th><th>描　　述</th></tr></thead><tbody><tr><td>@Cacheable</td><td>表明Spring在调用方法之前，首先应该在缓存中查找方法的返回值。如果这个值能够找到，就会返回缓存的值。否则的话，这个方法就会被调用，返回值会放到缓存之中</td></tr><tr><td>@CachePut</td><td>表明Spring应该将方法的返回值放到缓存中。在方法的调用前并不会检查缓存，方法始终都会被调用</td></tr><tr><td>@CacheEvict</td><td>表明Spring应该在缓存中清除一个或多个条目</td></tr><tr><td>@Caching</td><td>这是一个分组的注解，能够同时应用多个其他的缓存注解</td></tr><tr><td>@CacheConfig</td><td>可以在类层级配置一些共用的缓存配置</td></tr></tbody></table><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>1、 @Cacheable<br><img src="http://ovmspkp0s.bkt.clouddn.com/201803071219_467.png" alt=""></p><p>2、 @CachePut<br><img src="http://ovmspkp0s.bkt.clouddn.com/201803071218_285.png" alt=""></p><p>3、 @CacheEvict<br><img src="http://ovmspkp0s.bkt.clouddn.com/201803071221_564.png" alt=""></p><p>4、 @Caching<br><img src="http://ovmspkp0s.bkt.clouddn.com/201803071223_380.png" alt=""></p><p>5、 @CacheConfig<br><img src="http://ovmspkp0s.bkt.clouddn.com/201803071222_484.png" alt=""></p><p>6、 SPEL 表达式</p><table><thead><tr><th>名字</th><th>位置</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>methodName</td><td>root对象</td><td>当前被调用的方法名</td><td>#root.methodName</td></tr><tr><td>method</td><td>root对象</td><td>当前被调用的方法</td><td>#root.method.name</td></tr><tr><td>target</td><td>root对象</td><td>当前被调用的目标对象</td><td>#root.target</td></tr><tr><td>targetClass</td><td>root对象</td><td>当前被调用的目标对象类</td><td>#root.targetClass</td></tr><tr><td>args</td><td>root对象</td><td>当前被调用的方法的参数列表</td><td>#root.args[0]</td></tr><tr><td>caches</td><td>root对象</td><td>当前方法调用使用的缓存列表（如@Cacheable(value={“cache1”, “cache2”})），则有两个cache</td><td>#root.caches[0].name</td></tr><tr><td>argument name</td><td>执行上下文</td><td>当前被调用的方法的参数，如findById(Long id)，我们可以通过#id拿到参数</td><td>#user.id</td></tr><tr><td>result</td><td>执行上下文</td><td>方法执行后的返回值（仅当方法执行之后的判断有效，如‘unless’，’cache evict’的beforeInvocation=false）</td><td>#result</td></tr></tbody></table><p><a href="http://jinnianshilongnian.iteye.com/blog/1418309" target="_blank" rel="noopener">SPEL 的相关使用</a></p><p>7、 流程</p><ol><li>首先执行@CacheEvict（如果beforeInvocation=true且condition 通过），如果allEntries=true，则清空所有  </li><li>接着收集@Cacheable（如果condition 通过，且key对应的数据不在缓存），放入cachePutRequests（也就是说如果cachePutRequests为空，则数据在缓存中）  </li><li>如果cachePutRequests为空且没有@CachePut操作，那么将查找@Cacheable的缓存，否则result=缓存数据（也就是说只要当没有cache put请求时才会查找缓存）  </li><li>如果没有找到缓存，那么调用实际的API，把结果放入result  </li><li>如果有@CachePut操作(如果condition 通过)，那么放入cachePutRequests  </li><li>执行cachePutRequests，将数据写入缓存（unless为空或者unless解析结果为false）；  </li><li>执行@CacheEvict（如果beforeInvocation=false 且 condition 通过），如果allEntries=true，则清空所有  </li></ol><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h4 id="condition-条件缓存"><a href="#condition-条件缓存" class="headerlink" title="condition 条件缓存"></a>condition 条件缓存</h4><p>1、根据运行流程，如下 <code>@Cacheable</code> 将在执行方法之前( #result还拿不到返回值)判断condition，如果返回true，则查缓存； </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>, condition = <span class="string">"#id lt 10"</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">conditionFindById</span><span class="params">(<span class="keyword">final</span> Long id)</span>  </span></span><br><span class="line"><span class="function">``` </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2、根据运行流程，如下 `@CachePut`将在执行完方法后（#result就能拿到返回值了）判断condition，如果返回<span class="keyword">true</span>，则放入缓存； </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">```java</span></span><br><span class="line"><span class="function">@<span class="title">CachePut</span><span class="params">(value = <span class="string">"user"</span>, key = <span class="string">"#id"</span>, condition = <span class="string">"#result.username ne 'zhang'"</span>)</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">conditionSave</span><span class="params">(<span class="keyword">final</span> User user)</span>   </span></span><br><span class="line"><span class="function">```  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">根据运行流程，如下 `@CachePut`将在执行完方法后（#result就能拿到返回值了）判断unless，如果返回<span class="keyword">false</span>，则放入缓存；（即跟condition相反）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">```java</span></span><br><span class="line"><span class="function">@<span class="title">CachePut</span><span class="params">(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>, unless = <span class="string">"#result.username eq 'zhang'"</span>)</span>  </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> User <span class="title">conditionSave2</span><span class="params">(<span class="keyword">final</span> User user)</span></span></span><br></pre></td></tr></table></figure><p>根据运行流程，如下 <code>@CacheEvict</code>， beforeInvocation=false表示在方法执行之后调用（#result能拿到返回值了）；且判断condition，如果返回true，则移除缓存；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>, beforeInvocation = <span class="keyword">false</span>, condition = <span class="string">"#result.username ne 'zhang'"</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">conditionDelete</span><span class="params">(<span class="keyword">final</span> User user)</span></span></span><br></pre></td></tr></table></figure><h4 id="组合注解"><a href="#组合注解" class="headerlink" title="组合注解"></a>组合注解</h4><p><strong>1、 自定义缓存注解</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Caching(  </span><br><span class="line">        put = &#123;  </span><br><span class="line">                @CachePut(value = &quot;user&quot;, key = &quot;#user.id&quot;),  </span><br><span class="line">                @CachePut(value = &quot;user&quot;, key = &quot;#user.username&quot;),  </span><br><span class="line">                @CachePut(value = &quot;user&quot;, key = &quot;#user.email&quot;)  </span><br><span class="line">        &#125;  </span><br><span class="line">)  </span><br><span class="line">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)  </span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)  </span><br><span class="line">@Inherited  </span><br><span class="line">public @interface UserSaveCache &#123;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@UserSaveCache  </span><br><span class="line">public User save(User user)</span><br></pre></td></tr></table></figure><p><strong>2、 SPEL 表达式</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Simple Edition</span></span><br><span class="line"><span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>, condition = <span class="string">"#root.target.canCache() and #root.caches[0].get(#user.id).get().username ne #user.username"</span>, beforeInvocation = <span class="keyword">true</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">conditionUpdate</span><span class="params">(User user)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// + Method </span></span></span><br><span class="line"><span class="function">@<span class="title">Caching</span><span class="params">(  </span></span></span><br><span class="line"><span class="function"><span class="params">        evict = &#123;  </span></span></span><br><span class="line"><span class="function"><span class="params">                @CacheEvict(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>, condition = <span class="string">"#root.target.canEvict(#root.caches[0], #user.id, #user.username)"</span>, beforeInvocation = <span class="keyword">true</span>)</span>  </span></span><br><span class="line"><span class="function">        &#125;  </span></span><br><span class="line"><span class="function">)  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">conditionUpdate</span><span class="params">(User user)</span>   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canEvict</span><span class="params">(Cache userCache, Long id, String username)</span> </span>&#123;  </span><br><span class="line">    User cacheUser = userCache.get(id, User.class);  </span><br><span class="line">    <span class="keyword">if</span> (cacheUser == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> !cacheUser.getUsername().equals(username);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// + Static Method</span></span><br><span class="line"><span class="meta">@CacheEvict</span>(value = <span class="string">"user"</span>, key = <span class="string">"#user.id"</span>, condition = <span class="string">"T(com.sishuok.spring.service.UserCacheHelper).canEvict(#root.caches[0], #user.id, #user.username)"</span>, beforeInvocation = <span class="keyword">true</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">conditionUpdate</span><span class="params">(User user)</span></span></span><br></pre></td></tr></table></figure></p><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><ol><li>当一个支持缓存的方法在对象内部被调用时是不会触发缓存功能的。</li><li><a href="cache:annotation-driven/" target="_blank" rel="noopener">cache:annotation-driven/</a>还可以指定一个mode属性，可选值有proxy和aspectj。默认是使用proxy。当mode为proxy时，只有缓存方法在外部被调用的时候Spring Cache才会发生作用，这也就意味着如果一个缓存方法在其声明对象内部被调用时Spring Cache是不会发生作用的。而mode为aspectj时就不会有这种问题。另外使用proxy时，只有public方法上的@Cacheable等标注才会起作用，如果需要非public方法上的方法也可以使用Spring Cache时把mode设置为aspectj。<br>此外，<a href="cache:annotation-driven/" target="_blank" rel="noopener">cache:annotation-driven/</a>还可以指定一个proxy-target-class属性，表示是否要代理class，默认为false。我们前面提到的@Cacheable、@cacheEvict等也可以标注在接口上，这对于基于接口的代理来说是没有什么问题的，但是需要注意的是当我们设置proxy-target-class为true或者mode为aspectj时，是直接基于class进行操作的，定义在接口上的@Cacheable等Cache注解不会被识别到，那对应的Spring Cache也不会起作用了。<br>这里的 <a href="cache:annotation-driven/" target="_blank" rel="noopener">cache:annotation-driven/</a> 等同于 @EnableCaching<br><img src="http://ovmspkp0s.bkt.clouddn.com/201803071406_306.png" alt=""><br>可以从上图中看到 ， 存在 order , mode , proxytagetclass 属性。</li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>1、 注解进行注入时，其 key 为 “ cachenames ( value ) :: key “ , 不知道如何改变。<br>2、 改造 CacheAspectSupport<br>原博客中有关于 CacheAspectSupport 的改造。如下<br>目的：findByUsername时，不应该只放username–&gt;user，应该连同id—&gt;user和email—&gt;user一起放入；这样下次如果按照id查找直接从缓存中就命中。<br><strong>原代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// We only attempt to get a cached result if there are no put requests  </span></span><br><span class="line"><span class="keyword">if</span> (cachePutRequests.isEmpty() &amp;&amp; contexts.get(CachePutOperation.class).isEmpty()) &#123;  </span><br><span class="line">    result = findCachedResult(contexts.get(CacheableOperation.class));  </span><br><span class="line">&#125;  </span><br><span class="line">Collection&lt;CacheOperationContext&gt; cacheOperationContexts = contexts.get(CacheableOperation.class);  </span><br><span class="line"><span class="keyword">if</span> (!cacheOperationContexts.isEmpty()) &#123;  </span><br><span class="line">    result = findCachedResult(cacheOperationContexts);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>修改代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Caching</span>(  </span><br><span class="line">        cacheable = &#123;  </span><br><span class="line">                <span class="meta">@Cacheable</span>(value = <span class="string">"user"</span>, key = <span class="string">"#username"</span>)  </span><br><span class="line">        &#125;,  </span><br><span class="line">        put = &#123;  </span><br><span class="line">                <span class="meta">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#result.id"</span>, condition = <span class="string">"#result != null"</span>),  </span><br><span class="line">                <span class="meta">@CachePut</span>(value = <span class="string">"user"</span>, key = <span class="string">"#result.email"</span>, condition = <span class="string">"#result != null"</span>)  </span><br><span class="line">        &#125;  </span><br><span class="line">)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByUsername</span><span class="params">(<span class="keyword">final</span> String username)</span> </span>&#123;  </span><br><span class="line">    System.out.println(<span class="string">"cache miss, invoke find by username, username:"</span> + username);  </span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (user.getUsername().equals(username)) &#123;  </span><br><span class="line">            <span class="keyword">return</span> user;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是我并没有查找到如何去修改。<br>有两个想法。</p><ol><li>将源码修改，然后直接编译。使用自己编译过的 jar 文件。</li><li>继承该接口，然后进行复写，最后被 spring 扫描使用。</li></ol><p>第一种应该不是，第二种需要查看源码，然后区分 spring 是如何调用的 CacheAspectSupport ， 是否存在默认的配置文件可以修改。</p><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="http://jinnianshilongnian.iteye.com/blog/2001040" target="_blank" rel="noopener">http://jinnianshilongnian.iteye.com/blog/2001040</a><br><a href="http://blog.csdn.net/wjacketcn/article/details/50945887" target="_blank" rel="noopener">http://blog.csdn.net/wjacketcn/article/details/50945887</a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>killWeb -- 转发重定向以及Session&amp;Cookie</title>
      <link href="/blogs/31584.html"/>
      <url>/blogs/31584.html</url>
      
        <content type="html"><![CDATA[<h2 id="转发与重定向的区别"><a href="#转发与重定向的区别" class="headerlink" title="转发与重定向的区别"></a>转发与重定向的区别</h2><p>转发与重定向的区别如下：<br>转发是服务器行为,重定向是客户端行为</p><ol><li>转发在服务器端完成的;重定向是在客户端完成的</li><li>转发的速度快;重定向速度慢</li><li>转发的是同一次请求;重定向是两次不同请求</li><li>转发不会执行转发后的代码;重定向会执行重定向之后的代码</li><li>转发地址栏没有变化;重定向地址栏有变化</li><li>转发必须是在同一台服务器下完成;重定向可以在不同的服务器下完成<a id="more"></a></li></ol><p>在servlet中调用转发、重定向的语句如下：<br>request.getRequestDispatcher(“new.jsp”).forward(request,<br>response);//转发到new.jsp<br>response.sendRedirect(“new.jsp”);//重定向到new.jsp</p><p><strong>转发过程：</strong>客户浏览器发送http请求,web服务器接受此请求,调用内部的一个方法在容器内部完成请求处理和转发动作,将目标资源发送给客户;在这里，转发的路径必须是同一个web容器下的url，其不能转向到其他的web路径上去，中间传递的是自己的容器内的request。在客户浏览器路径栏显示的仍然是其第一次访问的路径，也就是说客户是感觉不到服务器做了转发的。转发行为是浏览器只做了一次访问请求。</p><p><strong>重定向过程：</strong>客户浏览器发送http请求,web服务器接受后发送302状态码响应及对应新的location给客户浏览器,<br>客户浏览器发现是302响应，则自动再发送一个新的http请求，请求url是新的location地址,服务器根据此请求寻找资源并发送给客户。在这里location可以重定向到任意URL，既然是浏览器重新发出了请求，则就没有什么request传递的概念了。在客户浏览器路径栏显示的是其重定向的路径，客户可以观察到地址的变化的。重定向行为是浏览器做了至少两次的访问请求的。<br>第一次，客户端request<br>A,服务器响应，并response回来，告诉浏览器，你应该去B。<br>这个时候IE可以看到地址变了，而且历史的回退按钮也亮了。<br>重定向可以访问自己web应用以外的资源。<br>在重定向的过程中，传输的信息会被丢失。</p><p><strong>如何选择</strong>：<br>通常情况下转发更快,而且能保持request内的对象,所以它是第一选择.但是由于在转发之后,浏览器中URL仍然指向开始页面,此时如果重载当前页面,开始页面将会被重新调用.如果你不想看到这样的情况,则选择转发.</p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>Session存储在服务器端，一般为了防止在服务器的内存中（为了高速存取），Sessinon在用户访问第一次访问服务器时创建，需要注意只有访问JSP、Servlet等程序时才会创建Session，只访问HTML、IMAGE等静态资源并不会创建Session，可调用request.getSession(true)强制生成Session。</p><p><strong>Session什么时候失效？</strong><br>　1. 服务器会把长时间没有活动的Session从服务器内存中清除，此时Session便失效。Tomcat中Session的默认失效时间为20分钟。<br>　2. 调用Session的invalidate方法。</p><p><strong>Session对浏览器的要求：</strong><br>虽然Session保存在服务器，对客户端是透明的，它的正常运行仍然需要客户端浏览器的支持。<br>这是因为Session需要使用Cookie作为识别标志。HTTP协议是无状态的，Session不能依据HTTP连接来判断是否为同一客户，<br>因此服务器向客户端浏览器发送一个名为JSESSIONID的Cookie，它的值为该Session的id（也就是HttpSession.getId()的返回值）。<br>Session依据该Cookie来识别是否为同一用户。该Cookie为服务器自动生成的，<br>它的maxAge属性一般为-1，表示仅当前浏览器内有效，并且各浏览器窗口间不共享，关闭浏览器就会失效。<br>因此同一机器的两个浏览器窗口访问服务器时，会生成两个不同的Session。<br>但是由浏览器窗口内的链接、脚本等打开的新窗口（也就是说不是双击桌面浏览器图标等打开的窗口）除外。这类子窗口会共享父窗口的Cookie，因此会共享一个Session。</p><p>　　<strong>注意：</strong>新开的浏览器窗口会生成新的Session，但子窗口除外。子窗口会共用父窗口的Session。例如，在链接上右击，在弹出的快捷菜单中选择”在新窗口中打开”时，子窗口便可以访问父窗口的Session。</p><p><strong>如果客户端浏览器将Cookie功能禁用，或者不支持Cookie怎么办？</strong><br>例如，绝大多数的手机浏览器都不支持Cookie。Java Web提供了另一种解决方案：URL地址重写。URL地址重写是对客户端不支持Cookie的解决方案。URL地址重写的原理是将该用户Session的id信息重写到URL地址中。服务器能够解析重写后的URL获取Session的id。这样即使客户端不支持Cookie，也可以使用Session来记录用户状态。HttpServletResponse类提供了encodeURL(String url)实现URL地址重写，该方法会自动判断客户端是否支持Cookie。如果客户端支持Cookie，会将URL原封不动地输出来。如果客户端不支持Cookie，则会将用户Session的id重写到URL中。</p><p>　　<strong>注意：</strong>tomcat判断客户端浏览器是否支持Cookie的依据是请求中是否含有Cookie。尽管客户端可能会支持Cookie，但是由于第一次请求时不会携带任何Cookie（因为并无任何Cookie可以携带），URL地址重写后的地址中仍然会带有jsessionid。当第二次访问时服务器已经在浏览器中写入Cookie了，因此URL地址重写后的地址中就不会带有jsessionid了。</p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><ol><li>domain表示的是cookie所在的域，默认为请求的地址，如网址为<a href="http://www.test.com/test/test.aspx，那么domain默认为www.test.com。而跨域访问，如域A为t1.test.com，域B为t2.test.com，那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com；如果要在域A生产一个令域A不能访问而域B能访问的cookie就要将该cookie的domain设置为t2.test.com。" target="_blank" rel="noopener">www.test.com/test/test.aspx，那么domain默认为www.test.com。而跨域访问，如域A为t1.test.com，域B为t2.test.com，那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com；如果要在域A生产一个令域A不能访问而域B能访问的cookie就要将该cookie的domain设置为t2.test.com。</a></li><li>path表示cookie所在的目录，asp.net默认为/，就是根目录。在同一个服务器上有目录如下：/test/,/test/cd/,/test/dd/，现设一个cookie1的path为/test/，cookie2的path为/test/cd/，那么test下的所有页面都可以访问到cookie1，而/test/和/test/dd/的子页面不能访问cookie2。这是因为cookie能让其path路径下的页面访问。</li><li>浏览器会将domain和path都相同的cookie保存在一个文件里，cookie间用*隔开。</li></ol><p><a href="https://segmentfault.com/a/1190000006932934" target="_blank" rel="noopener">总结一下顶级域名和子级域名之间的cookie共享和相互修改、删除</a><br><a href="https://segmentfault.com/a/1190000004556040#articleHeader7" target="_blank" rel="noopener">聊一聊 cookie</a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>killWeb -- 跨域问题总结</title>
      <link href="/blogs/57083.html"/>
      <url>/blogs/57083.html</url>
      
        <content type="html"><![CDATA[<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p>跨域是指a页面想获取b页面资源，如果a、b页面的协议、域名、端口、子域名不同，或是a页面为ip地址，b页面为域名地址，所进行的访问行动都是跨域的，而浏览器为了安全问题一般都限制了跨域访问，也就是不允许跨域请求资源。<br>这就是 同源策略问题。<br><a id="more"></a><br>举例：</p><table><thead><tr><th>url</th><th>说明</th><th>是否跨域</th></tr></thead><tbody><tr><td><a href="http://www.cnblogs.com/a.js" target="_blank" rel="noopener">http://www.cnblogs.com/a.js</a><br><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>不同域名</td><td>是</td></tr><tr><td><a href="http://www.a.com/lab/a.js" target="_blank" rel="noopener">http://www.a.com/lab/a.js</a><br><a href="http://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/script/b.js</a></td><td>同一域名下不同文件夹</td><td>否</td></tr><tr><td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a><br><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>同一域名，不同端口</td><td>是</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br><a href="https://www.a.com/b.js" target="_blank" rel="noopener">https://www.a.com/b.js</a></td><td>同一域名，不同协议</td><td>是</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br><a href="http://70.32.92.74/b.js" target="_blank" rel="noopener">http://70.32.92.74/b.js</a></td><td>域名和域名对应ip</td><td>是</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br><a href="http://script.a.com/b.js" target="_blank" rel="noopener">http://script.a.com/b.js</a></td><td>主域相同，子域不同</td><td>是（cookie不可访问）</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br><a href="http://a.com/b.js" target="_blank" rel="noopener">http://a.com/b.js</a></td><td>同一域名，不同二级域名（同上）</td><td>是</td></tr></tbody></table><h2 id="跨域的解决方法"><a href="#跨域的解决方法" class="headerlink" title="跨域的解决方法"></a>跨域的解决方法</h2><h3 id="1-jsonp"><a href="#1-jsonp" class="headerlink" title="1. jsonp"></a>1. jsonp</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h4><p>1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；<br>2、不过我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有<strong>“src”</strong>这个属性的标签都拥有跨域的能力，比如&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;）；<br>3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；<br>4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；<br>5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。<br>6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。<br>7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p><h4 id="2-案例"><a href="#2-案例" class="headerlink" title="2. 案例"></a>2. 案例</h4><h5 id="2-1-案例一"><a href="#2-1-案例一" class="headerlink" title="2.1 案例一"></a>2.1 案例一</h5><p><strong>通过 src 链接 跨域调用 </strong></p><p>remote server 中存在一个文件 remote.js<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(" remote server 中的文件")</span><br></pre></td></tr></table></figure></p><p>local server<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://remoteserver.com/remote.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></p><p>将会弹出 一个框体， remote server 中的文件调用成功</p><h5 id="2-2-案例二"><a href="#2-2-案例二" class="headerlink" title="2.2 案例二"></a>2.2 案例二</h5><p><strong>通过 动态生成 &lt;script&gt; 标签 跨域调用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    // 得到航班信息查询结果后的回调函数</span><br><span class="line">    var flightHandler = function(data)&#123;</span><br><span class="line">        alert(&apos;你查询的航班结果是：票价 &apos; + data.price + &apos; 元，&apos; + &apos;余票 &apos; + data.tickets + &apos; 张。&apos;);</span><br><span class="line">    &#125;;</span><br><span class="line">    // 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span><br><span class="line">    var url = &quot;http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler&quot;;</span><br><span class="line">    // 创建script标签，设置其属性</span><br><span class="line">    var script = document.createElement(&apos;script&apos;);</span><br><span class="line">    script.setAttribute(&apos;src&apos;, url);</span><br><span class="line">    // 把script标签加入head，此时调用开始</span><br><span class="line">    document.getElementsByTagName(&apos;head&apos;)[0].appendChild(script); </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h5 id="2-3-案例三"><a href="#2-3-案例三" class="headerlink" title="2.3 案例三"></a>2.3 案例三</h5><p><strong> 通过 jquery 跨域调用 </strong><br>前端代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=&quot;utf-8&quot; contentType=&quot;text/html;charset=UTF-8&quot;  language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;跨域测试&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;js/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        function showData (data) &#123;</span><br><span class="line">            console.info(&quot;调用showData&quot;);</span><br><span class="line"></span><br><span class="line">            var result = JSON.stringify(data);</span><br><span class="line">            $(&quot;#text&quot;).val(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line"></span><br><span class="line">            $(&quot;#btn&quot;).click(function () &#123;</span><br><span class="line"></span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: &quot;http://localhost:9090/student&quot;,</span><br><span class="line">                    type: &quot;GET&quot;,</span><br><span class="line">                    dataType: &quot;jsonp&quot;,  //指定服务器返回的数据类型</span><br><span class="line">                    jsonp: &quot;theFunction&quot;,   //指定参数名称</span><br><span class="line">                    jsonpCallback: &quot;showData&quot;,  //指定回调函数名称</span><br><span class="line">                    success: function (data) &#123;</span><br><span class="line">                        console.info(&quot;调用success&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;跨域获取数据&quot; /&gt;</span><br><span class="line">    &lt;textarea id=&quot;text&quot; style=&quot;width: 400px; height: 100px;&quot;&gt;&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>java 代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据</span></span><br><span class="line">    List&lt;Student&gt; studentList = getStudentList();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    JSONArray jsonArray = JSONArray.fromObject(studentList);</span><br><span class="line">    String result = jsonArray.toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前端传过来的回调函数名称</span></span><br><span class="line">    String callback = request.getParameter(<span class="string">"theFunction"</span>);</span><br><span class="line">    <span class="comment">//用回调函数名称包裹返回数据，这样，返回数据就作为回调函数的参数传回去了</span></span><br><span class="line">    result = callback + <span class="string">"("</span> + result + <span class="string">")"</span>;</span><br><span class="line"></span><br><span class="line">    response.getWriter().write(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>返回的 url<br>localhost:9090/student?theFunction = showData({result})</strong></p><h4 id="2-3-总结"><a href="#2-3-总结" class="headerlink" title="2.3. 总结"></a>2.3. 总结</h4><p>优点：适用于全部 浏览器，不用考虑不兼容的情况。<br>缺点：但是，JSONP方案的局限性在于，JSONP只能实现GET请求。随着现在RESTful的兴起，JSONP显得力不从心了。因为，RESTful不仅有GET，还存在POST、PUT、PATCH、DELETE。</p><p>1、ajax和jsonp这两种技术在调用方式上“看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；<br>2、但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加&lt;script&gt;标签来调用服务器提供的js脚本。<br>3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。<br>4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。</p><h3 id="2-corf"><a href="#2-corf" class="headerlink" title="2. corf"></a>2. corf</h3><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a></p><h3 id="3-nginx-反向代理"><a href="#3-nginx-反向代理" class="headerlink" title="3. nginx 反向代理"></a>3. nginx 反向代理</h3><p><a href="https://juejin.im/entry/57fb07b0816dfa0056c0ada8" target="_blank" rel="noopener">nginx反向代理机制详解</a><br><a href="https://www.cnblogs.com/gabrielchen/p/5066120.html" target="_blank" rel="noopener">用nginx的反向代理机制解决前端跨域问题</a></p><h3 id="4-node-js-搭建中间服务器"><a href="#4-node-js-搭建中间服务器" class="headerlink" title="4. node.js 搭建中间服务器"></a>4. node.js 搭建中间服务器</h3><p>不知道 Node.js 相关的知识。<br>以后可能会 涉及。</p><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a href="http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html" target="_blank" rel="noopener">http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html</a></p><h2 id="动脑环节"><a href="#动脑环节" class="headerlink" title="动脑环节"></a>动脑环节</h2><p>cookie 跨域中的传递。<br><a href="https://segmentfault.com/a/1190000006932934" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006932934</a><br><a href="https://segmentfault.com/a/1190000004556040" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004556040</a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 与 mybatis 框架整合。</title>
      <link href="/blogs/62983.html"/>
      <url>/blogs/62983.html</url>
      
        <content type="html"><![CDATA[<h1 id="springboot-整合-mybatis-框架"><a href="#springboot-整合-mybatis-框架" class="headerlink" title="springboot 整合 mybatis 框架"></a>springboot 整合 mybatis 框架</h1><h2 id="pom-文件"><a href="#pom-文件" class="headerlink" title="pom 文件"></a>pom 文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span> = <span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span> = <span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span> = <span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.killCode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis_test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mybatis_test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mapper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--pagehelper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- mybatis-generator 插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 解决 找不到相应的 mysql-connector-java 类 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 使用内置 依赖的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 文件的导入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用-mybatis-generator-插件"><a href="#使用-mybatis-generator-插件" class="headerlink" title="使用 mybatis-generator 插件"></a>使用 mybatis-generator 插件</h2><p>我曾经写过相关的文章<br><a href="https://3dot141.com/blogs/51669.html">Mybatis逆向工程</a></p><p>另外， Mybatis-generator 需要的 <strong>generatorConfig</strong>文件，默认在 src/main/resources 目录下。</p><h2 id="创建一个测试表"><a href="#创建一个测试表" class="headerlink" title="创建一个测试表"></a>创建一个测试表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">TEST</span>;</span><br><span class="line"><span class="keyword">USE</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> one(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span> ,</span><br><span class="line">  age <span class="built_in">INT</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="properties-文件的修改"><a href="#properties-文件的修改" class="headerlink" title="properties 文件的修改"></a>properties 文件的修改</h2><h2 id="修改-application-properties-文件"><a href="#修改-application-properties-文件" class="headerlink" title="修改 application.properties 文件"></a>修改 application.properties 文件</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#mysql</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/test</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">#mybatis</span><br><span class="line">mybatis.type-aliases-package=com.killcode.pojo</span><br><span class="line">mybatis.mapper-locations=classpath:com/killcode/mapper<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#mapper</span></span><br><span class="line"><span class="comment">#mappers 多个接口时逗号隔开</span></span><br><span class="line"><span class="comment">#mapper.mappers=</span></span><br><span class="line"><span class="comment">mapper.not-empty=false</span></span><br><span class="line"><span class="comment">mapper.identity=MYSQL</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#pagehelper</span></span><br><span class="line"><span class="comment">pagehelper.helperDialect=mysql</span></span><br><span class="line"><span class="comment">pagehelper.reasonable=true</span></span><br><span class="line"><span class="comment">pagehelper.supportMethodsArguments=true</span></span><br><span class="line"><span class="comment">pagehelper.params=count=countSql</span></span><br></pre></td></tr></table></figure><h3 id="添加-spring-devtools-properties-文件"><a href="#添加-spring-devtools-properties-文件" class="headerlink" title="添加 spring-devtools.properties 文件"></a>添加 spring-devtools.properties 文件</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">restart.include.mapper=/mapper-[\\w-\\.]+jar</span><br><span class="line">restart.include.pagehelper=/pagehelper-[\\w-\\.]+jar</span><br></pre></td></tr></table></figure><h2 id="兼容生成的-mapper"><a href="#兼容生成的-mapper" class="headerlink" title="兼容生成的 mapper"></a>兼容生成的 mapper</h2><p>为了使 生成 的 mapper 被扫描到。<br>可以使用两种方法</p><ol><li>在类上添加 @Mapper 注解<br><img src="http://ovmspkp0s.bkt.clouddn.com/201803022342_600.png" alt=""><br><strong>重点：</strong><br>这里要求 springboot 的工程结构如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">com</span><br><span class="line">  +- example</span><br><span class="line">    +- myproject</span><br><span class="line">      +- Application.java</span><br><span class="line">      |</span><br><span class="line">      +- domain</span><br><span class="line">      |  +- Customer.java</span><br><span class="line">      |  +- CustomerRepository.java</span><br><span class="line">      |</span><br><span class="line">      +- service</span><br><span class="line">      |  +- CustomerService.java</span><br><span class="line">      |</span><br><span class="line">      +- web</span><br><span class="line">      |  +- CustomerController.java</span><br><span class="line">      |</span><br></pre></td></tr></table></figure></li></ol><p>即 domain , service , web 的包要放到 Application启动类的 同级或 下级中。<br>详情请见这一份博客。</p><ol start="2"><li>在启动类上 添加 @MapperScanner 注解。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.killcode.mybatis_test.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(MybatisTestApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这里要注意，根据作者所说， 要使用 tk.mybatis.spring.annotation.MapperScan .<br><img src="http://ovmspkp0s.bkt.clouddn.com/201803030042_159.png" alt=""></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>test 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest(classes = MybatisTestApplication.class)</span><br><span class="line">public class MybatisTestApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private OneMapper oneMapper;</span><br><span class="line">@Test</span><br><span class="line">@Rollback</span><br><span class="line">public void contextLoads() &#123;</span><br><span class="line">One one = new One();</span><br><span class="line">one.setAge(12);</span><br><span class="line">one.setName(&quot;test&quot;);</span><br><span class="line">oneMapper.insert(one);</span><br><span class="line">System.out.println(one);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解惑"><a href="#解惑" class="headerlink" title="解惑"></a>解惑</h2><h3 id="1、-关于-spring-DevTools-配置"><a href="#1、-关于-spring-DevTools-配置" class="headerlink" title="1、 关于 spring DevTools 配置"></a>1、 关于 spring DevTools 配置</h3><p>在使用 DevTools 时，通用Mapper经常会出现 class x.x.A cannot be cast to x.x.A。<br>同一个类如果使用了不同的类加载器，就会产生这样的错误，所以解决方案就是让通用Mapper和实体类使用相同的类加载器即可。<br>DevTools 默认会对 IDE 中引入的所有项目使用 restart 类加载器，对于引入的 jar 包使用 base 类加载器，因此只要保证通用Mapper的jar包使用 restart 类加载器即可。</p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>1、<br>当配置 mybatis.mapper-loccations 这个类时<br>会有两个类同时满足条件，如图<br><img src="http://ovmspkp0s.bkt.clouddn.com/201803022316_983.png" alt=""></p><p>并且这两个类的版本不同，所以springboot 是如何选择的呢？</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>killWeb -- dns介绍</title>
      <link href="/blogs/33506.html"/>
      <url>/blogs/33506.html</url>
      
        <content type="html"><![CDATA[<h2 id="DNS-域名解析过程"><a href="#DNS-域名解析过程" class="headerlink" title="DNS 域名解析过程"></a>DNS 域名解析过程</h2><ol><li>用户在浏览器中输入域名并按下回车键后，浏览器检查缓存中有没有这个域名对应的解析过的 IP 地址。有，这个解析过程结束；没有，进行下一项。</li><li>查找操作系统缓存中有没有相应的 IP 地址。 （etc. C:/windows/system32/drivers/etc/hosts).没有，进行下一项</li><li>请求 域名服务器解析 域名。 网络配置中存在 “DNS 服务器地址” 。 操作系统会将域名发送给 LDNS (本地域名服务器，例如SPA)，缓存域名解析结果，主要承担工作。同理，没有，进行下一项</li><li>LDNS 没有命中， 到 ROOT SERVER 域名服务器请求解析。</li><li>ROOT SERVER 返回本地域名服务器 一个 <strong>查询域的主域名服务器(gTLD Server – 国际顶级域名服务器， 如 com,cn,org)</strong></li><li>LDNS 向返回的 gTLD 发送请求</li><li>gTLD 接受请求，并返回此域名对应的 Name Server 域名服务器地址(通常为 你注册的域名服务器)。</li><li>NS 查询存储的域名与IP地址的对应关系，连同一个 TTL 值一同返回给 LDNS</li><li>LDNS 缓存域名与IP地址的对应关系，由 TTL 值控制缓存时间。</li><li>将解析的结果返回给用户。<a id="more"></a></li></ol><h2 id="DNS-域名解析记录"><a href="#DNS-域名解析记录" class="headerlink" title="DNS 域名解析记录"></a>DNS 域名解析记录</h2><ul><li>A 记录， Adress ,用来指定域名对应的 IP 地址， 可以将多个域名解析到一个 IP 地址</li><li>MX 记录， Mail Exchange ， 将某个域名下的邮件服务器指向自己的 Mail Server ， 如 taotao.com – A 记录 – 115.238.25.xxx , 如果将 MX 记录设置为 115.238.25.xxx，则 <a href="mailto:xx@taotao.com" target="_blank" rel="noopener">xx@taotao.com</a> 的邮件将被解析到 115.238.25.xxx </li><li>CNAME 记录， Canonical Name (别名解析)。 为一个域名设置一个或者多个别名。 比如我自己的博客 3dot141.cn – 3dot141.github.io.</li><li>NS 记录， 为某个域名指定 DNS 解析服务器</li><li>TXT 记录， 为某个主机名或域名设置说明。</li></ul><h2 id="CDN-原理"><a href="#CDN-原理" class="headerlink" title="CDN 原理"></a>CDN 原理</h2><p>上文中 第8步，NS 查询存储的域名 的别名 – CNAME ， 并通过别名 指向 CDN 全局中的 DNS 负载均衡服务器(GTM Global Traffic Manager) 。GTM 返回给 距离这个用户最近的CDN节点。</p><p>用户直接去 这个几点访问 静态文件， 如果这个文件不存在，才会回到源站去获取。</p><h2 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h2><ol><li>windows<br>ipconfig /flushdns</li><li>linux<br>/etc/init.d/nscd restart</li><li>java<br>InetAddress 类的两种缓存策略<ol><li>正确解析</li><li>错误解析<br>由 %JAVA_HOME%\lib\security\java.security 文件中<br>networkaddress.cache.ttl ( 默认值 -1 永不失效)<br>networkaddress.cache.negative.ttl (默认值 10 缓存10s )</li></ol></li></ol><p><strong>注</strong>： 如果使用 InetAddress 类解析域名，必须是 <strong>单例模式</strong></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 工程结构</title>
      <link href="/blogs/19977.html"/>
      <url>/blogs/19977.html</url>
      
        <content type="html"><![CDATA[<h1 id="springboot-包结构"><a href="#springboot-包结构" class="headerlink" title="springboot 包结构"></a>springboot 包结构</h1><h2 id="初级篇"><a href="#初级篇" class="headerlink" title="初级篇"></a>初级篇</h2><ul><li>root package结构：com.example.myproject</li><li>应用主类Application.java置于root package下，通常我们会在应用主类中做一些框架配置扫描等配置，我们放在root package下可以帮助程序减少手工配置来加载到我们希望被Spring加载的内容</li><li>实体（Entity）与数据访问层（Repository）置于com.example.myproject.domain包下</li><li>逻辑层（Service）置于com.example.myproject.service包下</li><li>Web层（web）置于com.example.myproject.web包下<a id="more"></a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">com</span><br><span class="line">  +- example</span><br><span class="line">    +- myproject</span><br><span class="line">      +- Application.java</span><br><span class="line">      |</span><br><span class="line">      +- domain</span><br><span class="line">      |  +- Customer.java</span><br><span class="line">      |  +- CustomerRepository.java</span><br><span class="line">      |</span><br><span class="line">      +- service</span><br><span class="line">      |  +- CustomerService.java</span><br><span class="line">      |</span><br><span class="line">      +- web</span><br><span class="line">      |  +- CustomerController.java</span><br><span class="line">      |</span><br></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Application 是入口类， 其上有一个注解为 @SpringBootApplicaton<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@SpringBootConfiguration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(</span><br><span class="line">    excludeFilters = &#123;@Filter(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), @Filter(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line">public @interface SpringBootApplication &#123;</span><br></pre></td></tr></table></figure></p><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><p>其中 @EnableAutoConfiguration 的注解如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@AutoConfigurationPackage</span><br><span class="line">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line">public @interface EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = &quot;spring.boot.enableautoconfiguration&quot;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>@AutoConfigurationPackage 是引入 Registar.class </p><p>AutoConfigurationImportSelector 则通过 SpringFactoriesLoader.loadFactoryNames 扫描 META/INF/spring.factories 文件。<br>spring-boot-autoconfigure 包下就存在 spring.factories 文件。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201803030029_161.png" alt=""><br>其中声明了有哪些自动配置。</p><p><strong>总结</strong><br>因此 @EnableAutoConfiguration 会帮助 spring boot 根据类路径中的 jar 包依赖为当前项目进行自动配置</p><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><p>帮助扫描 @SpringBootApplication 所在类的同级包，以及下级包。</p><h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><p>其他的RPC协议，多个微服务之间<br>整个项目可以拆分成多个微服务，每个微服务工程又可以分为core和service两个工程，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user-core</span><br><span class="line">user-service</span><br></pre></td></tr></table></figure></p><p>为什么要分为core、service呢？<br>从两者的作用上来看，<br>core主要是model、接口、常量，被service依赖，被使用方依赖，同时考虑到了使用方的感受；<br>service主要是对接口的实现，以及对外提供多种RPC协议的服务。</p><h3 id="core推荐的工程结构-user-core"><a href="#core推荐的工程结构-user-core" class="headerlink" title="core推荐的工程结构(user-core)"></a>core推荐的工程结构(user-core)</h3><p>代码层的结构</p><p>根目录+模块名：com.example.user</p><p>实体类(domain)置于com.example.user.domain，主要是与数据库的对应关系</p><ol><li>实体类(domain)置于com.example.user.domain(或model)包下，每一张表对应一个Entity</li><li>数据访问层(Dao)置于com.example.user.repository</li><li>数据服务层(Service)置于com.example.user.service</li><li>常量接口类(consist)置于com.example.user.constant，包下是常量或枚举类型</li></ol><h3 id="service推荐的工程结构-user-service"><a href="#service推荐的工程结构-user-service" class="headerlink" title="service推荐的工程结构(user-service)"></a>service推荐的工程结构(user-service)</h3><p>代码层的结构</p><p>根目录+模块名：com.example.user</p><ol><li>工程启动类(ApplicationServer.java)置于com.example.user包下</li><li>数据服务的实现接口(serviceImpl)至于com.example.user.service.impl</li><li>前端控制器(Controller)置于com.example.user.controller</li><li>工具类(utils)置于com.example.user.utils</li><li>配置信息类(config)置于com.example.user.config</li><li>数据传输类(vo)置于com.example.user.vo，为前端准备数据的json对象</li></ol><h3 id="公共项目commons-core"><a href="#公共项目commons-core" class="headerlink" title="公共项目commons-core"></a>公共项目commons-core</h3><p>可以把多个项目公共的代码抽取utils包下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">com</span><br><span class="line">  +- example</span><br><span class="line">    +- common</span><br><span class="line">      +- util</span><br><span class="line">      |</span><br><span class="line">      +- ftp</span><br><span class="line">      |  +- FtpUtil.java</span><br><span class="line">      |</span><br><span class="line">      +- fastdfs</span><br><span class="line">      |  +- FastdfsUtil.java</span><br><span class="line">      |</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL -- notes01</title>
      <link href="/blogs/41528.html"/>
      <url>/blogs/41528.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是关于 《高性能mysql》 的读书笔记，其中的一些难点，参照网上的博客，给予解答。因为比较多，所以一点点的整理，现在只是将博客的链接发上去，方便自己理解。<br><a id="more"></a></p><h2 id="5-索引"><a href="#5-索引" class="headerlink" title="5. 索引"></a>5. 索引</h2><p>analyze table – 更新索引统计信息</p><p>OPTIMIZE TABLE – 减少碎片</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>show fullprocesslist – 查询mysql 链接状态</p><p><strong>查询优化器的提示</strong> – 232<br>optimizer_search_depth – 贪婪搜索模式</p><p>max_length_for_sort_data – mysql 排序算法的选择</p><p>优化 group by 和 distinct<br>SQL_BIG_RESULT – SQL_SMALL_RESULT(临时表条件)</p><p><a href="http://blog.csdn.net/gtuu0123/article/details/5248420" target="_blank" rel="noopener">group by with rollup</a></p><p>延迟关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select film.film_id, film.description from sakila.film </span><br><span class="line">    inner join (</span><br><span class="line">        select film_id from sakila.film </span><br><span class="line">        order by title limit 50, 5</span><br><span class="line">    ) as lim using(film_id);</span><br></pre></td></tr></table></figure><p><strong>用户自定义变量</strong> – 244<br>SET @one := 1 ;<br>避免重复查询刚刚更新的数据 – 247<br>UPDATE t1 SET lastUpdated = NOW() WHERE ID=1 AND @now := NOW();<br>SELECT @now;</p><h2 id="7-高级特性"><a href="#7-高级特性" class="headerlink" title="7. 高级特性"></a>7. 高级特性</h2><p>1、 分区表<br>CREATE TABLE sales() ENGINE=InnoDB PARTITION BY RANGE(<br>    PARTITION 1 values LESS THAN (),<br>    …<br>)<br><a href="http://www.cnblogs.com/ivictor/p/5033708.html" target="_blank" rel="noopener">MySQL 分区总结</a></p><p>2、视图</p><pre><code>1. 合并算法2. 临时表算法EXPLAIN SELECT * FROM &lt;view_name&gt;CHECK OPTION -- 任何通过视图更新的行，都必须符合视图本身的where条件定义。查找视图创建的语句<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(</span><br><span class="line">    REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(</span><br><span class="line">        SUBSTRING_INDEX(LOAD_FILE(&apos;/X.frm&apos;),</span><br><span class="line">        &apos;\nsource=&apos;, -1),</span><br><span class="line">    &apos;\\_&apos;,&apos;\_&apos;),&apos;\\%&apos;,&apos;\%&apos;),&apos;\\\\&apos;,&apos;\\&apos;),&apos;\\z&apos;,&apos;\z&apos;),&apos;\\t&apos;,&apos;\t&apos;),</span><br><span class="line">    &apos;\\r&apos;,&apos;\r&apos;),&apos;\\n&apos;,&apos;\n&apos;),&apos;\\b&apos;,&apos;\b&apos;),&apos;\\\&quot;&apos;,&apos;\&quot;&apos;),&apos;\\\&apos;&apos;,&apos;\&apos;&apos;),</span><br><span class="line">    &apos;\\o&apos;,&apos;\o&apos;)</span><br><span class="line">AS source;</span><br></pre></td></tr></table></figure></code></pre><p>3、 外键约束</p><pre><code>1. 触发器2. 显示限制取值</code></pre><p>4、 全文索引<br><a href="http://blog.csdn.net/qq_33663251/article/details/69612619" target="_blank" rel="noopener">innodb 的全文索引</a><br>MATCH .. AGAINST ..<br>修饰符<br>a , ~a , +a , -a , a* , “a”</p><p>5、 分布式事务(XA)<br><a href="https://zh.wikipedia.org/wiki/X/Open_XA" target="_blank" rel="noopener">XA 协议- wikipedia</a></p><p>相关介绍<br><a href="http://www.importnew.com/15812.html" target="_blank" rel="noopener">http://www.importnew.com/15812.html</a><br><a href="https://segmentfault.com/a/1190000005718940" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005718940</a><br><a href="http://blog.csdn.net/bluishglc/article/details/7612811" target="_blank" rel="noopener">http://blog.csdn.net/bluishglc/article/details/7612811</a></p><p>4、 查询缓存</p><ol><li>如果查询语句中包含任何<strong>不确定</strong>的函数，那么在查询缓存中是不可能找到缓存结果的</li><li><strong>占用内存</strong> mysql 自己管理一大块内存， 在初始化创建查询缓存时执行，之后采用<strong>非贪婪策略</strong>，不断分配小的内存块。</li><li>配置与维护缓存<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">query_cache_type</span><br><span class="line">query_cache_size</span><br><span class="line">query_cache_min_res_unit -- 可能会造成 缓存碎片</span><br><span class="line">query_cache_limit</span><br><span class="line">query_cache_wlock_invalidate</span><br><span class="line"></span><br><span class="line">qcache_free_memory</span><br><span class="line">qcache_queries_in_cache</span><br><span class="line">qcache_free_blocks</span><br><span class="line">qcache_total_blocks</span><br><span class="line">qcache_lowmem_prunes</span><br><span class="line"></span><br><span class="line">sql_cache</span><br><span class="line">sql_no_cache</span><br><span class="line"></span><br><span class="line">FLUSH QUERY CACHE</span><br></pre></td></tr></table></figure></li></ol><h2 id="8-优化服务器配置"><a href="#8-优化服务器配置" class="headerlink" title="8. 优化服务器配置"></a>8. 优化服务器配置</h2><p>1、 常用变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key_buffer_size</span><br><span class="line">table_cache_size</span><br><span class="line">thread_cache_size</span><br><span class="line">query_cache_size</span><br><span class="line">read_buffer_size</span><br><span class="line">read_rnd_buffer_size</span><br><span class="line">sort_buffer_size</span><br></pre></td></tr></table></figure></p><p><strong> 注意：</strong> 将配置文件置于版本控制之下</p><p>2、 <a href="https://tools.percona.com/" target="_blank" rel="noopener">https://tools.percona.com/</a> 在线配置网站</p><p>3、 MyISAM </p><ol><li>键缓存<br>key_buffer.key_buffer_size = 1G<br>mysql&gt; CACHE INDEX t1 IN key_buffer;<br>mysql&gt; LOAD INDEX INTO CACHE t1;</li><li>缓存块大小<br>myisam_block_size<br>create table/index … key_block_sizze</li></ol><p>4、 InnoDB</p><ol><li>数据字典 – 表缓存控制</li><li>统计信息持久化<br>InnoDB_analyze_is_persistent –<br>InnoDB_stats_on_metadata</li><li>日志<br>mysql&gt; SHOW INNODB STATUS<!-- 日志操作 -->innodb_log_file_size<br>innodb_log_files_in_group<br>innodb_log_buffer_size<br>innodb_flush_log_at_trx_commit<!-- 与文件系统配置 -- >innodb_flush_method- fdatasync -- 双重缓冲- 0_DIRECT- 0_DSYNC<!-- 表空间 -->innodb_data_home_dir<br>innodb_data_file_path = ibdata1:1G:<strong>autoextend</strong> – 表空间名：大小：自动填充<br>innodb_file_per_table – 为每张表使用一个文件 ， 在<strong>数据字典</strong>中生成 <strong>.iba 文件</strong></li><li>双写缓冲<br>目的是避免页没写完整所导致的的数据损坏，原理是将最近的写回的页面的备份拷贝。</li></ol><p>5、 基本配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">tmp_table_size -- max_heap_table_size</span><br><span class="line">max_connections</span><br><span class="line">thread_cache_size</span><br><span class="line">table_cache_size</span><br><span class="line"></span><br><span class="line">expire_logs_days -- 二进制日志的清理</span><br><span class="line">max_allowed_packet</span><br><span class="line">max_connect_errors</span><br><span class="line">skip_name_resolve -- DNS 查找</span><br><span class="line">sql_mode -- 改变服务器行为</span><br><span class="line"></span><br><span class="line">&lt;!-- 主从复制 --&gt;</span><br><span class="line">read_only</span><br><span class="line">skip_slave_start</span><br><span class="line">slave_net_timeout</span><br><span class="line">sync_master_info,sync_relay_log,sync_relay_log_info</span><br><span class="line"></span><br><span class="line">&lt;!-- innodb 的高级配置 --&gt;</span><br><span class="line">mysql&gt; SHOW ENGINE INNODB STATUS</span><br><span class="line">innodb</span><br><span class="line">innodb_auto_lock_mode</span><br><span class="line">innodb_buffer_pool_instances</span><br><span class="line">innodb_io_capacity</span><br><span class="line">innodb_read/write_io_threads</span><br><span class="line">innodb_strict_mode</span><br></pre></td></tr></table></figure><h2 id="10-复制"><a href="#10-复制" class="headerlink" title="10. 复制"></a>10. 复制</h2><p><strong>原理：</strong> </p><ol><li>主库上记录二进制日志，</li><li>备库启动一个 I/O 线程，并进入睡眠状态，当主库发送信号时，将其唤醒， 将日志复制到自己的中继日志中</li><li>备库的 SQL 线程 读取中继日志中的事件，并将其重放到备库数据中。</li></ol><p>复制过程：<br>1、 创建复制账号<br><a href="https://www.jianshu.com/p/d7b9c468f20d" target="_blank" rel="noopener">MySQL创建用户与授权</a><br>mysql&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON <em>.</em> TO repl@ ‘192.168.0.%’ IDENTIFIED BY ‘p4ssword’,;</p><p>2、 配置主库和备库<br><!-- 主库 --><br>log_bin = mysql-bin – 建议是决定路径<br>server_id = 10</p><!-- 备库 --><p>log_bin = mysql-bin<br>server_id = 2<br>relay_log = mysql-relay-bin – 指定中继日志的位置和命名</p><p>//将备库 变成其他服务器 的 主库<br>log_slave_updates = 1 – 允许备库将重放事件记录到自身的二进制日志中<br>read_only </p><p>3、 通知备库连接主库，并复制数据<br>mysql&gt; CHANGE MASTER TO MASTER_HOST = ‘server1’,<br>    -&gt; MASTER_USER = ‘repl’,<br>    -&gt; MASTER_PASSWORD= ‘p4ssword’,<br>    -&gt; MASTER_LOG_FILE= ‘mysql-bin.00001’<br>    -&gt; MASTER_LOG_POS= 0；</p><p>mysql&gt; START SLAVE;</p><p>4、 备份</p><ol><li>冷备份</li><li>percona xtrabackup – 热备份</li></ol><p>5、 推荐<br>主库：<br>  sync_binlog = 1 – 每次提交事务会将二进制日志同步到磁盘上</p><p>  innodb_flush_logs_at_trx_commit<br>  innodb_support_xa = 1<br>  innodb_safe_binlog<br>备库：<br>  read_only<br>  <!-- 非崩溃安全 --><br>  sync_master_info =1<br>  sync_relay_log =1<br>  sync_relay_log_info =1</p><p>争议：<br>  relay_log_space_limit – 防止复制延迟</p><p>6、 复制使用到的文件<br>mysql-bin.index – 二进制日志文件<br>mysql-relay-bin-index – 中继日志文件<br>master.info – 备库连接主库需要的信息<br>relay-log.info – 备库从主库复制的相关进度</p><p>7、 过滤数据<br>SQL_LOG_BIN </p><p>binlog_do_db<br>binlog_ignore_db </p><p>replicate_*</p><p>8、 复制拓扑结构</p><ul><li>主主复制<ul><li>主动主动</li><li>主动被动</li></ul></li><li>环形结构</li><li>模拟多主库复制 ： mysql 不支持 一备库多主库复制，所以可以先采用*主主**复制，然后选择其中一个主库，给予其备库。</li></ul><p>9、 高级问题</p><ol><li>改变主库</li><li>备库与新主库的位置不同</li><li>过大的复制延迟 </li></ol><!-- 其他方式 --><p>SHOW MASTER STATUS –<br>SHOW MASTER LOGS<br>SHOW SLAVE STATUS<br>SHOW PROCESSLIST</p><p><strong> mysqlbinlog –分析日志</strong></p><h2 id="11、-可扩展性"><a href="#11、-可扩展性" class="headerlink" title="11、 可扩展性"></a>11、 可扩展性</h2><p>OLTP – 在线事务处理<br>OLAP – 在线数据分析</p><ol><li>复制</li><li>拆分 – 节点</li><li>数据分片</li><li>负载均衡</li></ol><h2 id="12、-高可用性"><a href="#12、-高可用性" class="headerlink" title="12、 高可用性"></a>12、 高可用性</h2><p>MTBF – 平均失效时间 mean time between failures<br>MTTR – 平均回复时间 mean time to recovery</p><p>避免单点失效： – 提高冗余(增加空余容量，重复组件)</p><ol><li>共享存储与磁盘复制</li><li>同步复制</li></ol><h2 id="15、-备份与恢复"><a href="#15、-备份与恢复" class="headerlink" title="15、 备份与恢复"></a>15、 备份与恢复</h2><ol><li>逻辑备份： 将数据包含在一种mysql能够解析的格式中<ol><li>SQL 导出 – mysqldump</li><li>符号分隔文件备份</li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * INTO OUTFILE &apos;&apos; </span><br><span class="line">  &gt; FIELDS TERMINATED BY &apos;,&apos; OPTIONALLY ENCLOSED BY &apos;&quot;&quot;&apos;</span><br><span class="line">  &gt; LINES TERMINATED BY &apos;\n&apos;</span><br><span class="line">  &gt; FROM test.t1</span><br><span class="line"></span><br><span class="line">mysql&gt; LOAD DATA INFILE &apos;&apos;</span><br><span class="line">  &gt; INTO TABLE test.t1</span><br></pre></td></tr></table></figure><ol start="2"><li>物理备份： 直接复制原始文件的物理备份。</li></ol><p>备份文件：非显著数据，代码，复制配置，服务器配置，操作系统文件</p><p>二进制日志格式：</p><ol><li>包含日志文件内的偏移字节值</li><li>包含如下几项：<ol><li>事件日期和时间</li><li>原服务器的服务器ID</li><li>end_log_pos, 下一个事件的偏移字节值</li><li>事件类型</li><li>原服务器上执行事件的线程ID</li><li>原服务器上执行事件产生的错误代码</li></ol></li></ol><p>文件系统快照：<br>LVM：使用写时复制技术 。<br>  原来存在 原始卷 与 预留区域。 当 原始卷中的一些数据发生变化， 则复制受影响的块到 预留区域中， 之后快照再次请求这些块时， LVM 会从复制块中，而非 原始卷中 读取。</p><p>  vgs – 卷组<br>  lvs – 查看逻辑卷<br>  <!-- 创建快照 --><br>  lvcreate –size 16G –snapshot –name backup_mysql /dev/vg/mysql<br>  <!-- 挂载 --><br>  mount /dev/mapper/vg-backup_mysql /tmp/backup<br>  <!-- 删除 --><br>  lvremove –force /dev/vg/backup_mysql</p><p>mysqldump 使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 将服务器上所有的内容创建逻辑备份到单个文件中 -- </span><br><span class="line">$ mysqldump --all-databases &gt;dump.sql</span><br><span class="line">-- 创建只包含 xx 数据库的 逻辑备份 --</span><br><span class="line">$ mysqldump --databases sakila &gt; dump.sql</span><br><span class="line">-- 创建包含 xx 表 的逻辑备份 --</span><br><span class="line">$ mysqldump sakila actor &gt; dump.sql</span><br><span class="line">-- 防止在windows 上发生换行符转换 --</span><br><span class="line">$ mysqldump sakila actor --result-file=dump.sql</span><br><span class="line"></span><br><span class="line">&lt;!-- 相关选项 --&gt;</span><br><span class="line">--opt</span><br><span class="line">--allow-keywords --quote-names</span><br><span class="line">--complete-insert</span><br><span class="line">--tz-utc</span><br><span class="line">--lock-all-tables</span><br><span class="line">--tab</span><br><span class="line">--skip-extended-insert</span><br><span class="line"></span><br><span class="line">&lt;!-- innodb 相关 --&gt;</span><br><span class="line">--single-transaction</span><br><span class="line">--master-data</span><br></pre></td></tr></table></figure></p><h2 id="杂章"><a href="#杂章" class="headerlink" title="杂章"></a>杂章</h2><p>ext3 文件系统<br><a href="http://os.51cto.com/art/201205/334497_all.htm" target="_blank" rel="noopener">http://os.51cto.com/art/201205/334497_all.htm</a><br><a href="http://blog.csdn.net/ljianhui/article/details/8604140" target="_blank" rel="noopener">http://blog.csdn.net/ljianhui/article/details/8604140</a><br><a href="http://wuchong.me/blog/2014/07/19/linux-file-system/" target="_blank" rel="noopener">http://wuchong.me/blog/2014/07/19/linux-file-system/</a></p><p><a href="https://www.jianshu.com/p/710e5861c198" target="_blank" rel="noopener">MySql windows 下安装</a><br>my.ini 配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8 </span><br><span class="line">[mysqld]</span><br><span class="line">#设置3306端口</span><br><span class="line">port = 3306 </span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=D:\MySQL\mysql-5.7.16-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">#datadir=D:\MySQL\mysql-5.7.16-winx64\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure><p><a href="http://www.oschina.net/translate/mysql-joins-on-vs-using-vs-theta-style" target="_blank" rel="noopener">MySQL 三种关联查询的方式: ON vs USING vs 传统风格</a></p><p><a href="http://www.cnblogs.com/jevo/p/3262227.html" target="_blank" rel="noopener">MySQL临时表</a></p><p><a href="http://blog.csdn.net/caomiao2006/article/details/52140993" target="_blank" rel="noopener">MySQL分组查询 Groupby 实现原理</a></p><p><a href="http://blog.csdn.net/hguisu/article/details/7161981" target="_blank" rel="noopener">MySQL Order By 实现原理分析和Filesort优化</a></p><p><a href="http://www.cnblogs.com/hailiang/archive/2011/11/23/2260955.html" target="_blank" rel="noopener">where group by , having , order by</a><br>having 筛选成组后的各种数据</p><p><a href="https://www.jianshu.com/p/bf862c37c4c9" target="_blank" rel="noopener">MySQL 间隙锁</a><br><a href="http://www.cnblogs.com/zuoxingyu/archive/2012/09/27/2705285.html" target="_blank" rel="noopener">http://www.cnblogs.com/zuoxingyu/archive/2012/09/27/2705285.html</a><br><a href="http://www.cnblogs.com/digdeep/p/4968453.html" target="_blank" rel="noopener">http://www.cnblogs.com/digdeep/p/4968453.html</a><br><a href="https://www.jianshu.com/p/0ef46997c300" target="_blank" rel="noopener">mysql mvcc 机制</a></p><p><a href="https://www.zhihu.com/question/24335605" target="_blank" rel="noopener">SAN,NAS介绍</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>因为 《高性能MySQL》 这本书，我过去看过一部分，这次算是将之前的补足。 刚开始只是想记录一下相关的操作，不过发现很多自己不清楚的概念，因此就通过查阅网上的资料，将之整理下来。<br>现在回顾一下，对 MySQL 有了更深的理解 ，不过书中的内容感觉比较深，自己的记忆与理解 还不够，因此 之后还需要多多学习。然后复习以及巩固。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About</title>
      <link href="/blogs/74350de7.html"/>
      <url>/blogs/74350de7.html</url>
      
        <content type="html"><![CDATA[<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>Live 的记录</p><ol><li>mood – 生活，旅行日记。</li><li>tool – 使用的工具，电脑手机上的 app 等 ，</li><li>recipe – 做饭的食谱。</li><li>tip – 提高效率的技巧。</li></ol><h2 id="mood"><a href="#mood" class="headerlink" title="mood"></a>mood</h2><blockquote class="blockquote-center"><br>mood 代表着自己的情绪，用以表达当时的 ♥ 心情 ♥ 。<br></blockquote><h2 id="tool"><a href="#tool" class="headerlink" title="tool"></a>tool</h2><blockquote class="blockquote-center"><br>还没想好要写什么<br></blockquote><h2 id="recipe"><a href="#recipe" class="headerlink" title="recipe"></a>recipe</h2><blockquote class="blockquote-center"><br></blockquote><h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><blockquote class="blockquote-center"><br></blockquote>]]></content>
      
      
      <categories>
          
          <category> Live </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>About</title>
      <link href="/blogs/b5f422e3.html"/>
      <url>/blogs/b5f422e3.html</url>
      
        <content type="html"><![CDATA[<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>essay 的记录</p><ol><li>书评 _ Book</li><li>影评 _ Movie</li><li>零散的知识 _ Serendipity<h2 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h2><blockquote class="blockquote-center"><br>Nothing is impossible for a willing heart.<br><br>心之所愿，无事不成。<br><br></blockquote></li></ol><h2 id="Movie"><a href="#Movie" class="headerlink" title="Movie"></a>Movie</h2><blockquote class="blockquote-center"><br>Logic will get you from A to B. Imagination will take you everywhere.<br><br>逻辑带你从 A 到 B , 想象力将带你去任何地方。<br>Albert Einstein<br></blockquote><h2 id="Serendipity"><a href="#Serendipity" class="headerlink" title="Serendipity"></a>Serendipity</h2><blockquote class="blockquote-center"><br>Serendipity 在词典中的含义是指：意外发现珍奇事物的本领；有意外发现珍宝的运气<br></blockquote>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高性能数据库</title>
      <link href="/blogs/d4f2e1f6.html"/>
      <url>/blogs/d4f2e1f6.html</url>
      
        <content type="html"><![CDATA[<h2 id="5-索引"><a href="#5-索引" class="headerlink" title="5. 索引"></a>5. 索引</h2><p>analyze table – 更新索引统计信息</p><p>OPTIMIZE TABLE – 减少碎片</p><h2 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a>6. 查询</h2><p>show fullprocesslist – 查询mysql 链接状态</p><p><strong>查询优化器的提示</strong> – 232<br>optimizer_search_depth – 贪婪搜索模式</p><p>max_length_for_sort_data – mysql 排序算法的选择</p><p>优化 group by 和 distinct<br>SQL_BIG_RESULT – SQL_SMALL_RESULT(临时表条件)</p><p><a href="http://blog.csdn.net/gtuu0123/article/details/5248420" target="_blank" rel="noopener">group by with rollup</a></p><p>延迟关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select film.film_id, film.description from sakila.film </span><br><span class="line">    inner join (</span><br><span class="line">        select film_id from sakila.film </span><br><span class="line">        order by title limit 50, 5</span><br><span class="line">    ) as lim using(film_id);</span><br></pre></td></tr></table></figure><p><strong>用户自定义变量</strong> – 244<br>SET @one := 1 ;<br>避免重复查询刚刚更新的数据 – 247<br>UPDATE t1 SET lastUpdated = NOW() WHERE ID=1 AND @now := NOW();<br>SELECT @now;</p><h2 id="7-高级特性"><a href="#7-高级特性" class="headerlink" title="7. 高级特性"></a>7. 高级特性</h2><p>1、 分区表<br>CREATE TABLE sales() ENGINE=InnoDB PARTITION BY RANGE(<br>    PARTITION 1 values LESS THAN (),<br>    …<br>)<br><a href="http://www.cnblogs.com/ivictor/p/5033708.html" target="_blank" rel="noopener">MySQL 分区总结</a></p><p>2、视图</p><pre><code>1. 合并算法2. 临时表算法EXPLAIN SELECT * FROM &lt;view_name&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CHECK OPTION -- 任何通过视图更新的行，都必须符合视图本身的where条件定义。</span><br><span class="line"></span><br><span class="line">查找视图创建的语句</span><br><span class="line">```</span><br><span class="line">SELECT </span><br><span class="line">    REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(</span><br><span class="line">    REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(</span><br><span class="line">        SUBSTRING_INDEX(LOAD_FILE(&apos;/X.frm&apos;),</span><br><span class="line">        &apos;\nsource=&apos;, -1),</span><br><span class="line">    &apos;\\_&apos;,&apos;\_&apos;),&apos;\\%&apos;,&apos;\%&apos;),&apos;\\\\&apos;,&apos;\\&apos;),&apos;\\z&apos;,&apos;\z&apos;),&apos;\\t&apos;,&apos;\t&apos;),</span><br><span class="line">    &apos;\\r&apos;,&apos;\r&apos;),&apos;\\n&apos;,&apos;\n&apos;),&apos;\\b&apos;,&apos;\b&apos;),&apos;\\\&quot;&apos;,&apos;\&quot;&apos;),&apos;\\\&apos;&apos;,&apos;\&apos;&apos;),</span><br><span class="line">    &apos;\\o&apos;,&apos;\o&apos;)</span><br><span class="line">AS source;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>3、 外键约束</p><pre><code>1. 触发器2. 显示限制取值</code></pre><p>4、 全文索引<br><a href="http://blog.csdn.net/qq_33663251/article/details/69612619" target="_blank" rel="noopener">innodb 的全文索引</a><br>MATCH .. AGAINST ..<br>修饰符<br>a , ~a , +a , -a , a* , “a”</p><p>5、 分布式事务(XA)<br><a href="https://zh.wikipedia.org/wiki/X/Open_XA" target="_blank" rel="noopener">XA 协议- wikipedia</a></p><p>相关介绍<br><a href="http://www.importnew.com/15812.html" target="_blank" rel="noopener">http://www.importnew.com/15812.html</a><br><a href="https://segmentfault.com/a/1190000005718940" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005718940</a><br><a href="http://blog.csdn.net/bluishglc/article/details/7612811" target="_blank" rel="noopener">http://blog.csdn.net/bluishglc/article/details/7612811</a></p><p>4、 查询缓存</p><ol><li>如果查询语句中包含任何<strong>不确定</strong>的函数，那么在查询缓存中是不可能找到缓存结果的</li><li><strong>占用内存</strong> mysql 自己管理一大块内存， 在初始化创建查询缓存时执行，之后采用<strong>非贪婪策略</strong>，不断分配小的内存块。</li><li>配置与维护缓存<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">query_cache_type</span><br><span class="line">query_cache_size</span><br><span class="line">query_cache_min_res_unit -- 可能会造成 缓存碎片</span><br><span class="line">query_cache_limit</span><br><span class="line">query_cache_wlock_invalidate</span><br><span class="line"></span><br><span class="line">qcache_free_memory</span><br><span class="line">qcache_queries_in_cache</span><br><span class="line">qcache_free_blocks</span><br><span class="line">qcache_total_blocks</span><br><span class="line">qcache_lowmem_prunes</span><br><span class="line"></span><br><span class="line">sql_cache</span><br><span class="line">sql_no_cache</span><br><span class="line"></span><br><span class="line">FLUSH QUERY CACHE</span><br></pre></td></tr></table></figure></li></ol><h2 id="8-优化服务器配置"><a href="#8-优化服务器配置" class="headerlink" title="8. 优化服务器配置"></a>8. 优化服务器配置</h2><p>1、 常用变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key_buffer_size</span><br><span class="line">table_cache_size</span><br><span class="line">thread_cache_size</span><br><span class="line">query_cache_size</span><br><span class="line">read_buffer_size</span><br><span class="line">read_rnd_buffer_size</span><br><span class="line">sort_buffer_size</span><br></pre></td></tr></table></figure></p><p><strong> 注意：</strong> 将配置文件置于版本控制之下</p><p>2、 <a href="https://tools.percona.com/" target="_blank" rel="noopener">https://tools.percona.com/</a> 在线配置网站</p><p>3、 MyISAM </p><ol><li>键缓存<br>key_buffer.key_buffer_size = 1G<br>mysql&gt; CACHE INDEX t1 IN key_buffer;<br>mysql&gt; LOAD INDEX INTO CACHE t1;</li><li>缓存块大小<br>myisam_block_size<br>create table/index … key_block_sizze</li></ol><p>4、 InnoDB</p><ol><li>数据字典 – 表缓存控制</li><li>统计信息持久化<br>InnoDB_analyze_is_persistent –<br>InnoDB_stats_on_metadata</li><li>日志<br>mysql&gt; SHOW INNODB STATUS<!-- 日志操作 -->innodb_log_file_size<br>innodb_log_files_in_group<br>innodb_log_buffer_size<br>innodb_flush_log_at_trx_commit<!-- 与文件系统配置 -- >innodb_flush_method- fdatasync -- 双重缓冲- 0_DIRECT- 0_DSYNC<!-- 表空间 -->innodb_data_home_dir<br>innodb_data_file_path = ibdata1:1G:<strong>autoextend</strong> – 表空间名：大小：自动填充<br>innodb_file_per_table – 为每张表使用一个文件 ， 在<strong>数据字典</strong>中生成 <strong>.iba 文件</strong></li><li>双写缓冲<br>目的是避免页没写完整所导致的的数据损坏，原理是将最近的写回的页面的备份拷贝。</li></ol><p>5、 基本配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">tmp_table_size -- max_heap_table_size</span><br><span class="line">max_connections</span><br><span class="line">thread_cache_size</span><br><span class="line">table_cache_size</span><br><span class="line"></span><br><span class="line">expire_logs_days -- 二进制日志的清理</span><br><span class="line">max_allowed_packet</span><br><span class="line">max_connect_errors</span><br><span class="line">skip_name_resolve -- DNS 查找</span><br><span class="line">sql_mode -- 改变服务器行为</span><br><span class="line"></span><br><span class="line">&lt;!-- 主从复制 --&gt;</span><br><span class="line">read_only</span><br><span class="line">skip_slave_start</span><br><span class="line">slave_net_timeout</span><br><span class="line">sync_master_info,sync_relay_log,sync_relay_log_info</span><br><span class="line"></span><br><span class="line">&lt;!-- innodb 的高级配置&gt;</span><br><span class="line">mysql&gt; SHOW ENGINE INNODB STATUS</span><br><span class="line">innodb</span><br><span class="line">innodb_auto_lock_mode</span><br><span class="line">innodb_buffer_pool_instances</span><br><span class="line">innodb_io_capacity</span><br><span class="line">innodb_read/write_io_threads</span><br><span class="line">innodb_strict_mode</span><br></pre></td></tr></table></figure><h2 id="10-复制"><a href="#10-复制" class="headerlink" title="10. 复制"></a>10. 复制</h2><p><strong>原理：</strong> </p><ol><li>主库上记录二进制日志，</li><li>备库启动一个 I/O 线程，并进入睡眠状态，当主库发送信号时，将其唤醒， 将日志复制到自己的中继日志中</li><li>备库的 SQL 线程 读取中继日志中的事件，并将其重放到备库数据中。</li></ol><p>复制过程：<br>1、 创建复制账号<br>mysql&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON <em>.</em> TO repl@ ‘192.168.0.%’ IDENTIFIED BY ‘p4ssword’,;</p><p>2、 配置主库和备库</p><p>3、 通知备库连接主库，并复制数据</p><h2 id="杂章"><a href="#杂章" class="headerlink" title="杂章"></a>杂章</h2><p>ext3 文件系统<br><a href="http://os.51cto.com/art/201205/334497_all.htm" target="_blank" rel="noopener">http://os.51cto.com/art/201205/334497_all.htm</a><br><a href="http://blog.csdn.net/ljianhui/article/details/8604140" target="_blank" rel="noopener">http://blog.csdn.net/ljianhui/article/details/8604140</a><br><a href="http://wuchong.me/blog/2014/07/19/linux-file-system/" target="_blank" rel="noopener">http://wuchong.me/blog/2014/07/19/linux-file-system/</a></p><p><a href="https://www.jianshu.com/p/710e5861c198" target="_blank" rel="noopener">MySql windows 下安装</a><br>my.ini 配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8 </span><br><span class="line">[mysqld]</span><br><span class="line">#设置3306端口</span><br><span class="line">port = 3306 </span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=D:\MySQL\mysql-5.7.16-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">#datadir=D:\MySQL\mysql-5.7.16-winx64\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure><p><a href="http://www.oschina.net/translate/mysql-joins-on-vs-using-vs-theta-style" target="_blank" rel="noopener">MySQL 三种关联查询的方式: ON vs USING vs 传统风格</a></p><p><a href="http://www.cnblogs.com/jevo/p/3262227.html" target="_blank" rel="noopener">MySQL临时表</a></p><p><a href="http://blog.csdn.net/caomiao2006/article/details/52140993" target="_blank" rel="noopener">MySQL分组查询 Groupby 实现原理</a></p><p><a href="http://blog.csdn.net/hguisu/article/details/7161981" target="_blank" rel="noopener">MySQL Order By 实现原理分析和Filesort优化</a></p><p><a href="http://www.cnblogs.com/hailiang/archive/2011/11/23/2260955.html" target="_blank" rel="noopener">where group by , having , order by</a><br>having 筛选成组后的各种数据</p><p><a href="https://www.jianshu.com/p/bf862c37c4c9" target="_blank" rel="noopener">MySQL 间隙锁</a><br><a href="http://www.cnblogs.com/zuoxingyu/archive/2012/09/27/2705285.html" target="_blank" rel="noopener">http://www.cnblogs.com/zuoxingyu/archive/2012/09/27/2705285.html</a><br><a href="http://www.cnblogs.com/digdeep/p/4968453.html" target="_blank" rel="noopener">http://www.cnblogs.com/digdeep/p/4968453.html</a><br><a href="https://www.jianshu.com/p/0ef46997c300" target="_blank" rel="noopener">mysql mvcc 机制</a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂章</title>
      <link href="/blogs/2891c4c2.html"/>
      <url>/blogs/2891c4c2.html</url>
      
        <content type="html"><![CDATA[<p>Iterator接口的核心方法next()或者hasNext() 是依赖于迭代器的当前迭代位置的。 如果Collection直接实现Iterator接口，势必导致集合对象中包含当前迭代位置的数据(指针)。 当集合在不同方法间被传递时，由于当前迭代位置不可预置，那么next()方法的结果会变成不可预知。 除非再为Iterator接口添加一个reset()方法，用来重置当前迭代位置。 但即时这样，Collection也只能同时存在一个当前迭代位置。 而Iterable则不然，每次调用都会返回一个从头开始计数的迭代器。 多个迭代器是互不干扰的。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>killJtools -- Maven 入门详解</title>
      <link href="/blogs/10580.html"/>
      <url>/blogs/10580.html</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="1-更改仓库目录"><a href="#1-更改仓库目录" class="headerlink" title="1.更改仓库目录"></a>1.更改仓库目录</h3><p>maven\conf\settings.xml</p><localrepository><strong> 路径 </strong> </localrepository><h3 id="2-目录结构"><a href="#2-目录结构" class="headerlink" title="2.目录结构"></a>2.目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">main</span><br><span class="line">java</span><br><span class="line">resources（暂时省略）</span><br><span class="line">test</span><br><span class="line">java</span><br><span class="line">resources（暂时省略）</span><br><span class="line">pom.xm</span><br></pre></td></tr></table></figure><h3 id="3-pom-xml"><a href="#3-pom-xml" class="headerlink" title="3.pom.xml"></a>3.pom.xml</h3><p><strong>HelloWorld</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;!-- 模型版本号：4.0.0 --&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br></pre></td></tr></table></figure></p><ul><li>可以被当作其他项目的依赖项</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!-- 组织名称：暂时使用 组织名称+项目名称 作为组织名称 --&gt;</span><br><span class="line">  &lt;!-- 组织名称：实际名称 按照访问路径规范设置，通常以功能作为名称：eg: junit spring --&gt;</span><br><span class="line">  &lt;groupId&gt;cn.itcast.maven&lt;/groupId&gt;</span><br><span class="line">  &lt;!-- 项目名称 --&gt;</span><br><span class="line">  &lt;artifactId&gt;HelloWorld&lt;/artifactId&gt;</span><br><span class="line">  &lt;!-- 当前项目版本号：同一个项目开发过程中可以发布多个版本，此处标示0.0.1版 --&gt;</span><br><span class="line">  &lt;!-- 当前项目版本号：每个工程发布后可以发布多个版本，依赖时调取不同的版本，使用不同的版本号 --&gt;</span><br><span class="line">  &lt;version&gt;0.0.1&lt;/version&gt; </span><br><span class="line"></span><br><span class="line">  &lt;!-- 发布时的文件类型：默认jar包 --&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">  &lt;!-- 名称：可省略 --&gt;</span><br><span class="line">  &lt;name&gt;Hello&lt;/name&gt;</span><br><span class="line">  &lt;!-- 资源下载路径：存在默认值&gt;</span><br><span class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 依赖关系 --&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- 依赖设置 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;!-- 坐标 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 依赖组织名称 --&gt;</span><br><span class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">&lt;!-- 依赖项目名称 --&gt;</span><br><span class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">&lt;!-- 依赖版本名称 --&gt;</span><br><span class="line">&lt;version&gt;4.9&lt;/version&gt;</span><br><span class="line">&lt;!-- 依赖范围：test包下依赖该设置 --&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="4-命令"><a href="#4-命令" class="headerlink" title="4.命令"></a>4.命令</h3><ol><li>打开cmd命令行，进入Hello项目根目录(包含有pom.xml文件的目录)</li><li>执行 mvn compile命令<br> 执行完毕后，生成了maven工程编译完成后字节码文件的生成目录target</li><li>cmd 中继续录入mvn clean命令<br> 执行完毕后，字节码生成目录target被删除</li><li>cmd 中录入 mvn clean test命令<br> 执行完毕后，字节码生成目录中生成了被测试类与测试类的编译字节码和测试执行过程日志与详细报告</li><li>cmd 中录入 mvn clean compile命令<br> 组合指令，先执行clean，再执行compile，通常应用于上线前执行，清除测试类</li><li>cmd 中录入 mvn clean test命令<br> 组合指令，先执行clean，再执行test，通常应用于测试环节</li><li>cmd 中录入 mvn clean package命令<br> 组合指令，先执行clean，再执行package，将项目打包，通常应用于发布前<br> 执行过程：<pre><code>- 清理————清空环境- 编译————编译源码- 测试————测试源码- 打包————将编译的非测试类打包</code></pre></li><li>cmd 中录入 mvn clean install 查看仓库，当前项目被发布到仓库中<br> 组合指令，先执行clean，再执行install，将项目打包，通常应用于发布前<br> 执行过程：<pre><code>清理————清空环境编译————编译源码测试————测试源码打包————将编译的非测试类打包部署————将打好的包发布到资源仓库中</code></pre></li></ol><h3 id="5-坐标"><a href="#5-坐标" class="headerlink" title="5.坐标"></a>5.坐标</h3><p><strong><a href="https://www.mvnrepository.com" target="_blank" rel="noopener">依赖查询地址</a></strong></p><ul><li>groupid: 定义当前Maven项目隶属项目</li><li>artifactld: 定义初建项目中的一个模块</li><li>version：定义当前项目的当前版本</li><li>packaging: 定义该项目的打包方式</li><li>scoge：范围</li></ul><table><thead><tr><th>依赖范围</th><th>主代码</th><th>测试代码</th><th>运行时</th><th>例子</th></tr></thead><tbody><tr><td>compile</td><td>y</td><td>y</td><td>y</td><td>jdk</td></tr><tr><td>test</td><td>-</td><td>y</td><td>-</td><td>junit</td></tr><tr><td>provided</td><td>y</td><td>y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>-</td><td>y</td><td>JDBC Drive</td></tr></tbody></table><h3 id="6-依赖"><a href="#6-依赖" class="headerlink" title="6.依赖"></a>6.依赖</h3><ol><li>依赖传递：<ul><li>直接依赖</li><li>间接依赖</li></ul></li><li>依赖范围<br><strong>列是第一直接依赖，行是第二间接依赖</strong></li></ol><table><thead><tr><th></th><th>compile</th><th>test</th><th>provided</th><th>runtime</th></tr></thead><tbody><tr><td>compile</td><td>compile</td><td>-</td><td>-</td><td>runtime</td></tr><tr><td>test</td><td>test</td><td>-</td><td>-</td><td>test</td></tr><tr><td>provided</td><td>provided</td><td>-</td><td>provided</td><td>provided</td></tr><tr><td>runtime</td><td>runtime</td><td>-</td><td>-</td><td>runtime</td></tr></tbody></table><ol start="3"><li><strong>可选依赖</strong>：  控制该依赖使用时，是否向下传递 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><p>true : 代表不向下传递<br>false：向下传递</p><ol start="4"><li><p>排除依赖 :主动选择是否要使用传递的依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;-- 设置当前依赖中是否使用间接依赖 --&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">      &lt;exclusion&gt;</span><br><span class="line">        &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="line">      &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>依赖冲突</p></li></ol><ul><li>如果一个配置中依赖写了多个，以最后一个为准。</li></ul><h3 id="7-生命周期"><a href="#7-生命周期" class="headerlink" title="7.生命周期"></a>7.生命周期</h3><ol><li>三大生命周期：内有许多个按顺序执行的流程。<ul><li>clean</li><li>default </li><li>site</li></ul></li><li>自定义插件+插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;bulid&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">    &lt;!-- 定义插件的坐标 --&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-source-plugins&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class="line">        &lt;!-- 具体的执行位置 --&gt;</span><br><span class="line">        &lt;executions&gt;</span><br><span class="line">            &lt;execution&gt;</span><br><span class="line">                &lt;goals&gt;</span><br><span class="line">                    &lt;goal&gt;jar-no-fork&lt;/goal&gt;</span><br><span class="line">                    &lt;phase&gt;process-classes&lt;/phase&gt;</span><br><span class="line">                &lt;goals&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">        &lt;executions&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="8-继承-聚合"><a href="#8-继承-聚合" class="headerlink" title="8.继承+聚合"></a>8.继承+聚合</h3><p><strong>1.</strong> 继承：消除重复配置 </p><ul><li><strong>父工程</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>子工程</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;!-- 与父工程版本一致，自身可以不写 --&gt;</span><br><span class="line">    &lt;groupId&gt;cn.itcast&lt;/groupId&gt;</span><br><span class="line">    &lt;!--  父工程类名  --&gt;</span><br><span class="line">    &lt;artifactId&gt;ZParent&lt;/artifactId&gt;</span><br><span class="line">    &lt;!-- 与父工程版本一致，自身可以不写 --&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;relativePath&gt;../ZParent&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 版本统一管理 --&gt;</span><br><span class="line">&lt;!-- 父工程设置版本，子工程再次设置时不用写版本号 --&gt;</span><br><span class="line">&lt;!-- 不会被子工程直接继承，而是当子工程设置时，才会自己设置版本 --&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 设置常量 --&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;log4j.version&gt;1.2.15&lt;/log4j.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</span><br></pre></td></tr></table></figure><p><strong>2.</strong> 聚合:减少操作，将多个一同编译。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;&lt;/module&gt;</span><br><span class="line">&lt;modules&gt;</span><br></pre></td></tr></table></figure><h3 id="9-本地仓库-私服-中央仓库"><a href="#9-本地仓库-私服-中央仓库" class="headerlink" title="9.本地仓库+私服+中央仓库"></a>9.本地仓库+私服+中央仓库</h3><p><strong>流程：</strong>个人 –&gt; 私服 –&gt; 中央</p><ol><li>私服： Nexus<br> 1.将 Nexus.war 包 放入 tomcat/webapps/<br> 2.启动tomcat,打开网址<a href="http://localhost:8080/nexus/index.html#welcome" target="_blank" rel="noopener">http://localhost:8080/nexus/index.html#welcome</a><br> 3.</li><li><p>介绍：</p><ol><li>Repository:<ol><li>central 中央仓库</li><li>central M1 shadow 镜像仓库，防止中央仓库出现问题</li><li>3rd party 第三方仓库<br> Artifact Upload</li><li>Apache Sanpshots 还未完全开发好，试用</li><li>release</li><li>snapshots</li></ol></li><li>Type:<ol><li>proxy 远程代理</li><li>hosted 本地</li><li>group 群组</li><li>vitual </li></ol></li><li><p>Browse Index:下载Index索引并进行构建搜索<br> 1.可能通过这个 <strong>索引</strong> 下载文件出错。<br> 解决方法：将本地仓库中的旧文件完全删除，然后重新下载。</p><p> 作用：找到依赖配置</p></li></ol></li><li><p>使用<br> 配置所有构建均从私服下载</p><ol><li><p><strong><code>~/.m2/setting.xml</code></strong><br>或<br><strong><code>~/config/setting.xml</code></strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;!-- 配置拦截 --&gt;</span><br><span class="line">    &lt;mirrors&gt;</span><br><span class="line">        &lt;mirror&gt;</span><br><span class="line">            &lt;!--此处配置所有的构建均从私有仓库中下载 *代表所有，也可以写central --&gt;</span><br><span class="line">            &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 下载东西的 id 在此处配置 --&gt;</span><br><span class="line">            &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 私服网站上对应的 group 群组地址 --&gt;</span><br><span class="line">            &lt;url&gt;http://192.168.1.100:8000/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">        &lt;/mirror&gt;</span><br><span class="line">    &lt;/mirrors&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 定义策略 --&gt;</span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">        &lt;profile&gt;</span><br><span class="line">            &lt;id&gt;nexus&lt;/id&gt;</span><br><span class="line">            &lt;!—所有请求均通过镜像 --&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- jar包 --&gt;</span><br><span class="line">            &lt;repositories&gt;</span><br><span class="line">                &lt;repository&gt;</span><br><span class="line">                    &lt;!-- 与网站上的名称对应 --&gt;</span><br><span class="line">                    &lt;id&gt;central&lt;/id&gt;</span><br><span class="line">                    &lt;url&gt;http://central&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;!-- 代表两种包的不同状态 --&gt;</span><br><span class="line">                    &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</span><br><span class="line">                    &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;</span><br><span class="line"></span><br><span class="line">                &lt;/repository&gt;</span><br><span class="line">            &lt;/repositories&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- maven插件包 --&gt;</span><br><span class="line"></span><br><span class="line">            &lt;pluginRepositories&gt;</span><br><span class="line">                &lt;pluginRepository&gt;</span><br><span class="line">                    &lt;id&gt;central&lt;/id&gt;</span><br><span class="line">                    &lt;url&gt;http://central&lt;/url&gt;</span><br><span class="line">                    &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;</span><br><span class="line">                    &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;</span><br><span class="line">                &lt;/pluginRepository&gt;</span><br><span class="line">            &lt;/pluginRepositories&gt;</span><br><span class="line">        &lt;/profile&gt;</span><br><span class="line">    &lt;/profiles&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 使用策略 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;activeProfiles&gt;</span><br><span class="line">    &lt;!--make the profile active all the time --&gt;</span><br><span class="line">        &lt;!-- 名称与 profile 的 id 名称一致 --&gt;</span><br><span class="line">        &lt;activeProfile&gt;nexus&lt;/activeProfile&gt;</span><br><span class="line">    &lt;/activeProfiles&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 设置权限 --&gt;</span><br><span class="line">    &lt;servers&gt;</span><br><span class="line">        &lt;server&gt;</span><br><span class="line">            &lt;id&gt;releases&lt;/id&gt;</span><br><span class="line">            &lt;username&gt;admin&lt;/username&gt;</span><br><span class="line">            &lt;password&gt;admin123&lt;/password&gt;</span><br><span class="line">        &lt;/server&gt;</span><br><span class="line">        &lt;server&gt;</span><br><span class="line">            &lt;id&gt;snapshots&lt;/id&gt;</span><br><span class="line">            &lt;username&gt;admin&lt;/username&gt;</span><br><span class="line">            &lt;password&gt;admin123&lt;/password&gt;</span><br><span class="line">        &lt;/server&gt;</span><br><span class="line">    &lt;servers&gt;</span><br><span class="line">&lt;settings&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>本地仓库与上文修改的xml文件一致。</strong></p></li><li><strong>pom.xml文件</strong></li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;distributionManagement&gt; </span><br><span class="line">     &lt;repository&gt; </span><br><span class="line">         &lt;id&gt;releases&lt;/id&gt; </span><br><span class="line">         &lt;name&gt;Internal Releases&lt;/name&gt; </span><br><span class="line">         &lt;url&gt;http://localhost:8000/nexus/content/repositories/releases/&lt;/url&gt; </span><br><span class="line">     &lt;/repository&gt; </span><br><span class="line">     &lt;snapshotRepository&gt; </span><br><span class="line">         &lt;id&gt;snapshots&lt;/id&gt; </span><br><span class="line">         &lt;name&gt;Internal Snapshots&lt;/name&gt; </span><br><span class="line">         &lt;url&gt;http://localhost:8000/nexus/content/repositories/snapshots/&lt;/url&gt; </span><br><span class="line">     &lt;/snapshotRepository&gt; </span><br><span class="line"> &lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure><pre><code>4. 上传mvn -deploy&lt;!-- 对应上传的文件夹是 SNAPSHOT --&gt;&lt;version&gt; -SNAPSHOT &lt;/version&gt;&lt;!-- 对应上传的文件夹是 RELEASE --&gt;&lt;version&gt; -RELEASE &lt;/version&gt;&lt;!-- 对应对哪些项目打包 --&gt;&lt;modules&gt;&lt;/modules&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killTools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>killBase系列 -- 密码学</title>
      <link href="/blogs/3152.html"/>
      <url>/blogs/3152.html</url>
      
        <content type="html"><![CDATA[<h2 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h2><h3 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h3><ol><li>密码学算法分类：<ul><li>消息编码：Base64 </li><li>消息摘要：MD类， SHA类，MAC</li><li>对称密码：DES,3DES,AES</li><li>非对称密码：RSA,DH</li><li>数字签名：RSASignature,DSASignature</li></ul></li><li>五元组<br>1)明文：原始信息。<br>2)加密算法：以密钥为参数，对明文进行多种置换和转换的规则和步骤，变换结果为密文。<br>3)解密算法：加密算法的逆变换，以密文为输入、密钥为参数，变换结果为明文。:<br>4)密钥：加密与解密算法的参数，直接影响对明文进行变换的结果。<br>5)密文：对明文进行变换的结果。</li><li>Java编程中常用类 – java.security 包<ol><li>消息编码：BASE64Encoder,BASE64Decoder – java.util</li><li>消息摘要：MessageDigest</li><li>对称密码：KeyGenerator,SeretkeyFactory – javax.crypto 包<strong>(提供给AES，DES，3DES，MD5，SHA1等 对称 和 单向加密算法。)</strong>,Cipher </li><li>非对称密码：KeyPairGenerator,KeyFactory – java.security 包<strong>(提供给DSA，RSA， EC等 非对称加密算法。)</strong>,KeyPair,PublicKey,PrivateKey,Cipher </li><li>数字重命名：Signature</li></ol></li><li>常用开源工具<ul><li>Commons.Codec </li><li>Bouncy.Castle</li></ul></li></ol><h3 id="二、Base64-算法"><a href="#二、Base64-算法" class="headerlink" title="二、Base64 算法"></a>二、Base64 算法</h3><ol><li>Base64 基于64个字符编码算法，以任意 8 位字节序列组合描述形式 , BASE加密后产生的字节位数是8的倍数，如果不够位数以=符号填充。对此 Base64 算法有一套字符映射表。</li><li>使用方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取</span></span><br><span class="line">    Base64.Encoder encoder = Base64.getEncoder();</span><br><span class="line">    Base64.Decoder decoder = Base64.getDecoder();</span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] src);</span><br><span class="line">    * <span class="meta">@param</span>   src</span><br><span class="line">    *          the <span class="keyword">byte</span> array to encode</span><br><span class="line">    * <span class="meta">@param</span>   dst</span><br><span class="line">    *          the output <span class="keyword">byte</span> array</span><br><span class="line">    * <span class="meta">@return</span>  The number of bytes written to the output <span class="keyword">byte</span> array</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">byte</span>[] src,<span class="keyword">byte</span>[] dst)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encodeToString</span><span class="params">(<span class="keyword">byte</span>[] src)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">encode</span><span class="params">(ButeBuffer buffer)</span></span>;</span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] decode(<span class="keyword">byte</span>[] src);</span><br><span class="line">    * <span class="meta">@param</span>   src</span><br><span class="line">    *          the <span class="keyword">byte</span> array to encode</span><br><span class="line">    * <span class="meta">@param</span>   dst</span><br><span class="line">    *          the output <span class="keyword">byte</span> array</span><br><span class="line">    * <span class="meta">@return</span>  The number of bytes written to the output <span class="keyword">byte</span> array</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">decode</span><span class="params">(<span class="keyword">byte</span>[] src,<span class="keyword">byte</span>[] dst)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] decode(String src);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">decode</span><span class="params">(ButeBuffer buffer)</span></span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三、消息摘要"><a href="#三、消息摘要" class="headerlink" title="三、消息摘要"></a>三、消息摘要</h3><ol><li>介绍：又称为 哈希算法。唯一对应一个消息或文体固定长度值，由一个单向的Hash加密函数对消息进行作用而产生。</li><li>分类： MD(Message Digest) 消息摘要算法，SHA(Secure Hash Algorithm) 安全散列算法， MAC(Message Authentication Code):消息认证算法</li><li>主要方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xxx 可以为 md5,sha</span></span><br><span class="line">MessageDigest.getInstance(<span class="string">"xxx"</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="1-MD5算法"><a href="#1-MD5算法" class="headerlink" title="1. MD5算法"></a>1. MD5算法</h4><blockquote><p>原理：<br>首先需要对信息进行填充，使其位长对512求余的结果等于448。<br>因此，信息的位长（Bits Length）将被扩展至N<em>512+448，N为一个非负整数，N可以是零。<br>填充的方法如下，在信息的后面填充一个1和无数个0，直到满足上面的条件时才停止用0对信息的填充。<br>然后，在这个结果后面附加一个以64位二进制表示的填充前信息长度。<br>经过这两步的处理，信息的位长=N</em>512+448+64=(N+1）*512，即长度恰好是512的整数倍<br>MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。</p></blockquote><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Util</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*** </span></span><br><span class="line"><span class="comment">     * MD5加密 生成32位md5码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> 待加密字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回32位md5码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5Encode</span><span class="params">(String inStr)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MessageDigest md5 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            md5 = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] byteArray = inStr.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] md5Bytes = md5.digest(byteArray);</span><br><span class="line">        StringBuffer hexValue = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="comment">// 转化为 16 进制</span></span><br><span class="line">        <span class="comment">// 原理 ： byte 为 8 字节。 0xff --&gt; 11111111</span></span><br><span class="line">        <span class="comment">// byte&amp;0xff 如果小于16 则小于00010000 </span></span><br><span class="line">        <span class="comment">// 所以由 toHexString() 只能转化为 1 位，所以要在前面加上 ‘0’。再加上实际的值。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; md5Bytes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = ((<span class="keyword">int</span>) md5Bytes[i]) &amp; <span class="number">0xff</span>;</span><br><span class="line">            <span class="keyword">if</span> (val &lt; <span class="number">16</span>) &#123;</span><br><span class="line">                hexValue.append(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            hexValue.append(Integer.toHexString(val));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexValue.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-SHA-算法"><a href="#2-SHA-算法" class="headerlink" title="2. SHA 算法"></a>2. SHA 算法</h4><blockquote><p>原理：接收一段明文，然后以一种不可逆的方式将它转换成一段（通常更小）密文，也可以简单的理解为取一串输入码（称为预映射或信息），并把它们转化为长度较短、位数固定的输出序列即散列值（也称为信息摘要或信息认证代码）的过程。</p><p>特点：该算法输入报文的长度不限，产生的输出是一个<strong>160位</strong>的报文摘要。输入是按 512 位的分组进行处理的。</p></blockquote><blockquote><p>作用：通过散列算法可实现数字签名实现，数字签名的原理是将要传送的明文通过一种函数运算（Hash）转换成报文摘要（不同的明文对应不同的报文摘要），报文摘要加密后与明文一起传送给接受方，接受方将接受的明文产生新的报文摘要与发送方的发来报文摘要解密比较，比较结果一致表示明文未被改动，如果不一致表示明文已被篡改。</p></blockquote><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SHAUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*** </span></span><br><span class="line"><span class="comment">     * SHA加密 生成40位SHA码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> 待加密字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回40位SHA码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">shaEncode</span><span class="params">(String inStr)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MessageDigest sha = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sha = MessageDigest.getInstance(<span class="string">"SHA"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] byteArray = inStr.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] md5Bytes = sha.digest(byteArray);</span><br><span class="line">        StringBuffer hexValue = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; md5Bytes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = ((<span class="keyword">int</span>) md5Bytes[i]) &amp; <span class="number">0xff</span>;</span><br><span class="line">            <span class="keyword">if</span> (val &lt; <span class="number">16</span>) &#123; </span><br><span class="line">                hexValue.append(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            hexValue.append(Integer.toHexString(val));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexValue.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-HMAC-算法"><a href="#3-HMAC-算法" class="headerlink" title="3. HMAC 算法"></a>3. HMAC 算法</h4><blockquote><p>原理:用公开函数和密钥产生一个固定长度的值作为认证标识，用这个 标识鉴别消息的完整性。使用一个密钥生成一个固定大小的小数据块，即MAC，并将其加入到消息中，然后传输。接收方利用与发送方共享的密钥进行鉴别认证 等。</p></blockquote><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建密钥</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] getSecretKey()&#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        KeyGenerator keyGen = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                keyGen = KeyGenerator.getInstance(<span class="string">"HmacMD5"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 产生密钥</span></span><br><span class="line">        SecretKey secretKey1 = keyGen.generateKey();</span><br><span class="line">        <span class="comment">// 得到密钥字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] key = secretKey1.getEncoded();</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行消息摘要</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doHMAC</span><span class="params">(<span class="keyword">byte</span>[] data,String key)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 从字节数组还原</span></span><br><span class="line">        SecretKey secretKey2 = <span class="keyword">new</span> SecretKeySpec(key,<span class="string">"HmacMD5"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 实例化 Mac</span></span><br><span class="line">                Mac mac = Mac.getInstance(<span class="string">"HmacMD5"</span>);</span><br><span class="line">                <span class="comment">// 密钥初始化 Mac</span></span><br><span class="line">                mac.init(secretKey2);</span><br><span class="line">                <span class="comment">// 执行消息摘要</span></span><br><span class="line">                <span class="keyword">byte</span>[] result = mac.doFinal(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-SHA-与-MD5比较"><a href="#4-SHA-与-MD5比较" class="headerlink" title="4. SHA 与 MD5比较"></a>4. SHA 与 MD5比较</h4><p>1）对强行攻击的安全性：最显著和最重要的区别是SHA-1摘要比MD5摘要长32 位。使用强行技术，产生任何一个报文使其摘要等于给定报摘要的难度对MD5是2^128数量级的操作，而对SHA-1则是2^160数量级的操作。这样，SHA-1对强行攻击有更大的强度。<br>2）对密码分析的安全性：由于MD5的设计，易受密码分析的攻击，SHA-1显得不易受这样的攻击。<br>3）速度：在相同的硬件上，SHA-1的运行速度比MD5慢。</p><h3 id="四、对称加密"><a href="#四、对称加密" class="headerlink" title="四、对称加密"></a>四、对称加密</h3><ol><li><p>定义：在对称加密算法中，数据发信方将明文（原始数据）和加密密钥（mi yue）一起经过特殊加密算法处理后，使其变成复杂的加密密文发送出去。<br>收信方收到密文后，若想解读原文，则需要使用加密用过的<strong>密钥</strong>及<strong>相同算法</strong>的<strong>逆算法</strong>对密文进行解密，才能使其恢复成可读明文。<br>在对称加密算法中，使用的<strong>密钥</strong>只有<strong>一个</strong>，发收信双方都使用这个密钥对数据进行加密和解密，这就要求解密方事先必须知道加密密钥。</p></li><li><p>优缺点         </p><ul><li>优点：算法公开、计算量小、加密速度快、加密效率高。</li><li>缺点：<br>（1）交易双方都使用同样钥匙，安全性得不到保证。<br>（2）每对用户每次使用对称加密算法时，都需要使用其他人不知道的惟一钥匙，这会使得发收信双方所拥有的钥匙数量呈几何级数增长，<br><strong>密钥管理</strong>成为用户的负担。对称加密算法在分布式网络系统上使用较为困难，主要是因为密钥管理困难，使用成本较高。</li></ul></li><li>常用的对称加密算法。<br>DES（Data Encryption Standard）：数据加密标准，速度较快，适用于加密大量数据的场合。<br>3DES（Triple DES）：是基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高。<br>AES（Advanced Encryption Standard）：高级加密标准，是下一代的加密算法标准，速度快，安全级别最高</li><li>对称密码常用的数学运算<ul><li>移位和循环移位<br>　　移位就是将一段数码按照规定的位数整体性地左移或右移。循环右移就是当右移时，把数码的最后的位移到数码的最前头，循环左移正相反。例如，对十进制数码12345678循环右移1位（十进制位）的结果为81234567，而循环左移1位的结果则为23456781。</li><li>置换<br>　　就是将数码中的某一位的值根据置换表的规定，用另一位代替。它不像移位操作那样整齐有序，看上去杂乱无章。这正是加密所需,被经常应用。</li><li>扩展<br>　　就是将一段数码扩展成比原来位数更长的数码。扩展方法有多种,例如,可以用置换的方法，以扩展置换表来规定扩展后的数码每一位的替代值。</li><li>压缩<br>　　就是将一段数码压缩成比原来位数更短的数码。压缩方法有多种，例如，也可以用置换的方法，以表来规定压缩后的数码每一位的替代值。</li><li>异或<br>　　这是一种二进制布尔代数运算。异或的数学符号为⊕ ，它的运算法则如下：<br>1⊕ 1 = 0<br>0⊕ 0 = 0<br>1⊕ 0 = 1<br>0⊕ 1 = 1<br>　　也可以简单地理解为，参与异或运算的两数位如相等，则结果为0，不等则为1。</li><li>迭代<br>　　迭代就是多次重复相同的运算，这在密码算法中经常使用，以使得形成的密文更加难以破解。</li></ul></li><li>分组加密<br>参考 <a href="http://blog.csdn.net/fw0124/article/details/8472560" target="_blank" rel="noopener">分组加密的四种模式</a><br><a href="http://www.cnblogs.com/dacainiao/p/5521646.html" target="_blank" rel="noopener">ECB模式</a> – 电子密码本模式<br><a href="http://www.cnblogs.com/dacainiao/p/5521866.html" target="_blank" rel="noopener">CBC模式</a> – 密码分组链接模式<br><a href="http://www.cnblogs.com/dacainiao/p/5521930.html" target="_blank" rel="noopener">CFB模式</a> – 密文反馈模式<br><a href="http://www.cnblogs.com/dacainiao/p/5525364.html" target="_blank" rel="noopener">OFB模式</a> – 输出反馈模式<br><a href="http://www.cnblogs.com/dacainiao/p/5525410.html" target="_blank" rel="noopener">CTR模式</a> – 计数器模式</li><li>常用的填充方式<br>在Java进行DES、3DES和AES三种对称加密算法时，常采用的是NoPadding（不填充）、Zeros填充（0填充）、PKCS5Padding填充。</li></ol><ul><li>ZerosPadding<blockquote><p>全部填充为0的字节，结果如下：<br>  F1 F2 F3 F4 F5 F6 F7 F8   //第一块<br>  F9 00 00 00 00 00 00 00 //第二块</p></blockquote></li><li>PKCS5Padding<blockquote><p>每个填充的字节都记录了填充的总字节数，结果如下：<br>  F1 F2 F3 F4 F5 F6 F7 F8   //第一块<br>  F9 07 07 07 07 07 07 07 //第二块<br>注： 如果</p></blockquote></li></ul><h4 id="1-DES-Data-Encryption-Standard"><a href="#1-DES-Data-Encryption-Standard" class="headerlink" title="1. DES(Data Encryption Standard)"></a>1. DES(Data Encryption Standard)</h4><h5 id="1、-介绍："><a href="#1、-介绍：" class="headerlink" title="1、 介绍："></a>1、 介绍：</h5><p>DES算法的入口参数有三个：<strong>Key、Data、Mode</strong>。<br><strong>Key</strong>为8个字节共64位，其中<strong>密钥 56 位，校验位 8 位(每组的 第8位都被用作奇偶校验)</strong>，是DES算法的工作密钥；<br><strong>Data</strong>也为8个字节64位，是要被加密或被解密的数据；<br><strong>Mode</strong>为DES的工作方式,有两种：加密或解密。</p><h5 id="2、-加密过程："><a href="#2、-加密过程：" class="headerlink" title="2、 加密过程："></a>2、 加密过程：</h5><p><strong>简略版:</strong></p><ul><li>首先要生成一套加密密钥，从用户处取得一个64位长的密码口令，然后通过等分、移位、选取和迭代形成一套16个加密密钥，分别供每一轮运算中使用。<br> 过程 1，2</li><li>DES对64位(bit)的明文分组M进行操作，M经过一个初始置换IP，置换成m0。将m0明文分成左半部分和右半部分m0 = (L0，R0)，各32位长。然后进行16轮完全相同的运算（迭代），这些运算被称为函数f，在每一轮运算过程中数据与相应的密钥结合。<br> 过程 4</li><li>在每一轮中，密钥位移位，然后再从密钥的56位中选出48位。通过一个扩展置换将数据的右半部分<strong>扩展</strong>成48位，并通过一个异或操作替代成新的48位数据，再将其<strong>压缩置换</strong>成32位。这四步运算构成了函数f。然后，通过另一个异或运算，函数f的输出与左半部分结合，其结果成为新的右半部分，原来的右半部分成为新的左半部分。将该操作重复16次。<br> 过程 3 ，5 ，6 ，7 ， 8 ， 9</li><li>经过16轮迭代后，左，右半部分合在一起经过一个逆置换（数据整理），恢复原先的顺序，这样就完成了加密过程。<br> 过程 10.</li></ul><p>详细版请见 <strong>附录</strong></p><h5 id="3、-解密过程"><a href="#3、-解密过程" class="headerlink" title="3、 解密过程"></a>3、 解密过程</h5><p>　　加密和解密使用相同的算法！<br>　　DES加密和解密唯一的不同是密钥的次序相反。如果各轮加密密钥分别是K1，K2，K3…K16，那么解密密钥就是K16，K15，K14…K1。这也就是DES被称为对称算法的理由吧。</p><h5 id="4、流程如图："><a href="#4、流程如图：" class="headerlink" title="4、流程如图："></a>4、流程如图：</h5><p><img src="http://ovmspkp0s.bkt.clouddn.com/201710171653_195.png" alt=""></p><h5 id="5、注意："><a href="#5、注意：" class="headerlink" title="5、注意："></a>5、注意：</h5><p>DES算法中只用到64位密钥中的其中56位，而第8、16、24、……64位8个位并未参与DES运算</p><h5 id="6、3DES"><a href="#6、3DES" class="headerlink" title="6、3DES"></a>6、3DES</h5><p>3DES（或称为Triple DES）</p><blockquote><p>原理：<br>    使用3条56位的密钥对 数据进行三次加密。</p></blockquote><h5 id="7、Java-实现"><a href="#7、Java-实现" class="headerlink" title="7、Java 实现"></a>7、Java 实现</h5><p><strong>相关的类</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成密钥</span></span><br><span class="line">KeyGenerator,SecretKeyFactory</span><br><span class="line"><span class="comment">// 密钥</span></span><br><span class="line">SecretKey , SecretKeySpec</span><br><span class="line"><span class="comment">// 密码</span></span><br><span class="line">Cipher</span><br></pre></td></tr></table></figure></p><p><strong>这里重点讲一下 Cipher 类</strong></p><ol><li>首先要设置参数<br>Cipher.getInstance(加解密算法，加解密模式，填充模式)</li><li>初始化<br>Cipher.init(加解密模式 – Cypher.ENCRIPT/DECRYPT，密钥）</li><li>完成加解密<br>Cipher.doFinal(bytes) – 将bytes 内容 加密/解密 然后返回。</li></ol><p>这里使用 <strong>SecretKeyFactory</strong>的密钥     选择CBC模式     进行加解密。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DESCryptography</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub  </span></span><br><span class="line">          </span><br><span class="line">        String content=<span class="string">"aaaaaaaabbbbbbbbaaaaaaaa"</span>;  </span><br><span class="line">        String key=<span class="string">"01234567"</span>;  </span><br><span class="line">      </span><br><span class="line">        System.out.println(<span class="string">"加密前："</span>+byteToHexString(content.getBytes()));  </span><br><span class="line">        <span class="keyword">byte</span>[] encrypted=DES_CBC_Encrypt(content.getBytes(), key.getBytes());  </span><br><span class="line">        System.out.println(<span class="string">"加密后："</span>+byteToHexString(encrypted));  </span><br><span class="line">        <span class="keyword">byte</span>[] decrypted=DES_CBC_Decrypt(encrypted, key.getBytes());  </span><br><span class="line">        System.out.println(<span class="string">"解密后："</span>+byteToHexString(decrypted));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] DES_CBC_Encrypt(<span class="keyword">byte</span>[] content, <span class="keyword">byte</span>[] keyBytes)&#123;        </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            DESKeySpec keySpec=<span class="keyword">new</span> DESKeySpec(keyBytes);  </span><br><span class="line">            SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(<span class="string">"DES"</span>);              </span><br><span class="line">            SecretKey key=keyFactory.generateSecret(keySpec);         </span><br><span class="line">              </span><br><span class="line">            Cipher cipher=Cipher.getInstance(<span class="string">"DES/CBC/PKCS5Padding"</span>);  </span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, key, <span class="keyword">new</span> IvParameterSpec(keySpec.getKey()));             </span><br><span class="line">            <span class="keyword">byte</span>[] result=cipher.doFinal(content);  </span><br><span class="line">            <span class="keyword">return</span> result;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">            System.out.println(<span class="string">"exception:"</span>+e.toString());  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] DES_CBC_Decrypt(<span class="keyword">byte</span>[] content, <span class="keyword">byte</span>[] keyBytes)&#123;        </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            DESKeySpec keySpec=<span class="keyword">new</span> DESKeySpec(keyBytes);  </span><br><span class="line">            SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(<span class="string">"DES"</span>);  </span><br><span class="line">            SecretKey key=keyFactory.generateSecret(keySpec);  </span><br><span class="line">              </span><br><span class="line">            Cipher cipher=Cipher.getInstance(<span class="string">"DES/CBC/PKCS5Padding"</span>);  </span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, key, <span class="keyword">new</span> IvParameterSpec(keyBytes));  </span><br><span class="line">            <span class="keyword">byte</span>[] result=cipher.doFinal(content);  </span><br><span class="line">            <span class="keyword">return</span> result;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">            System.out.println(<span class="string">"exception:"</span>+e.toString());  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">byteToHexString</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;  </span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(bytes.length);  </span><br><span class="line">        String sTemp;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;  </span><br><span class="line">            sTemp = Integer.toHexString(<span class="number">0xFF</span> &amp; bytes[i]);  </span><br><span class="line">            <span class="keyword">if</span> (sTemp.length() &lt; <span class="number">2</span>)  </span><br><span class="line">                sb.append(<span class="number">0</span>);  </span><br><span class="line">            sb.append(sTemp.toUpperCase());  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> sb.toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">        </span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span> <span class="title">toByte</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">byte</span> b = (<span class="keyword">byte</span>) <span class="string">"0123456789ABCDEF"</span>.indexOf(c);  </span><br><span class="line">        <span class="keyword">return</span> b;  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-AES-Advanced-Encryption-Standard"><a href="#2-AES-Advanced-Encryption-Standard" class="headerlink" title="2. AES(Advanced  Encryption Standard)"></a>2. AES(Advanced  Encryption Standard)</h4><p>有时间 再写。。。 看了一天的 加密 ，累死。。。</p><h3 id="五、非对称加密"><a href="#五、非对称加密" class="headerlink" title="五、非对称加密"></a>五、非对称加密</h3><h4 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h4><p><strong>定义：</strong>需要两个密钥，一个是公开密钥，另一个是私有密钥；一个用作加密的时候，另一个则用作解密。<br>使用其中一个密钥把明文加密后所得的密文，只能用相对应的另一个密钥才能解密得到原本的明文；甚至连最初用来加密的密钥也不能用作解密。<br><strong>由于加密和解密需要两个不同的密钥，故被称为非对称加密</strong></p><p><strong>数论知识：</strong></p><blockquote><p>非对称加密运用了一部分数论知识，有兴趣的自己去看下。。。 这里提供一下链接。<br><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html" target="_blank" rel="noopener">阮一峰大神写了一部分，可以帮助理解</a></p></blockquote><p>一、互质关系：</p><blockquote><p>如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系（coprime）。比如，15和32没有公因子，所以它们是互质关系。这说明，不是质数也可以构成互质关系。<br>二、<a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">欧拉函数</a><br>三、<a href="https://zh.wikipedia.org/wiki/欧拉定理_(数论" target="_blank" rel="noopener">欧拉定理</a>)<br>四、<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%8F%8D%E5%85%83%E7%B4%A0" target="_blank" rel="noopener">模反元素(模逆元)</a><br>五、<a href="https://zh.wikipedia.org/wiki/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">扩展欧几里得算法</a></p></blockquote><h4 id="2-RSA-算法"><a href="#2-RSA-算法" class="headerlink" title="2. RSA 算法"></a>2. RSA 算法</h4><h5 id="2-1-过程"><a href="#2-1-过程" class="headerlink" title="2.1 过程"></a>2.1 过程</h5><ol><li>随机选择两个不相等的质数 p 和 q<br> p = 61, q = 53 </li><li>计算 p 和 q 的乘积 n<br> n = 61*53 = 3233</li><li>计算 n 的欧拉函数 φ(n)<br> φ(n) = (p-1)(q-1) = 60 * 52 = 3120</li><li>随机选择一个整数 e ， 条件是 1 <em>&lt;</em>  e  <em>&lt;</em> φ(n) , 且 e 与 φ(n) 互质<br> e = 17 ( 实际应用中，常常选择 65537 )</li><li><p>计算 e 对于 φ(n) 的模反元素 d</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">所谓<span class="string">"模反元素"</span>就是指有一个整数d，可以使得ed被φ(n)除的余数为<span class="number">1</span>。</span><br><span class="line">　　ed ≡ <span class="number">1</span> (mod φ(n))</span><br><span class="line">这个式子等价于</span><br><span class="line">　　ed - <span class="number">1</span> = kφ(n)</span><br><span class="line">于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。</span><br><span class="line">　　ex + φ(n)y = <span class="number">1</span></span><br><span class="line">已知 e=<span class="number">17</span>, φ(n)=<span class="number">3120</span>，</span><br><span class="line">　　<span class="number">17</span>x + <span class="number">3120</span>y = <span class="number">1</span></span><br><span class="line">这个方程可以用<span class="string">"扩展欧几里得算法"</span>求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(<span class="number">2753</span>,-<span class="number">15</span>)，即 d=<span class="number">2753</span>。</span><br><span class="line">至此所有计算完成。</span><br></pre></td></tr></table></figure></li><li><p>将 n 和 e 封装成公钥， n 和 d 封装成私钥<br> 公钥 (3233,17), 私钥 (3233，2753)</p></li><li>加密与解密<ul><li>加密用 (n , e)<br>  加密信息 – <strong>明文</strong>为 m , <strong>m 小于 n</strong><br>  $m^e$ ≡ c (mod n)<br>  公钥是 (3233，17), m 假设为 65<br>  $65^{17}$ ≡ 2790(mod 3233)<br>  所以 c = 2790</li><li>解密用 (n , d)<br>  <strong>密文</strong> 为 c<br>  $c^d$ ≡ m(mod n)<br>  $2790^{2753}$ ≡ 65 (mod 3233)<br>  所以 m = 65</li></ul></li><li>私钥解密的证明 – 有兴趣的同学自己去找资料看下,也是数论的知识。        </li></ol><h5 id="2-2-RSA-算法的可靠性-与-破解"><a href="#2-2-RSA-算法的可靠性-与-破解" class="headerlink" title="2.2 RSA 算法的可靠性 与 破解"></a>2.2 RSA 算法的可靠性 与 破解</h5><p>以上密钥的生成步骤，出现了六个数字</p><blockquote><p> p, q, n, φ(n), e, d<br>公钥为 n, e<br>如果想要得到 d，需要进行以下逆推<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　（1）ed≡1 (mod φ(n))。只有知道e和φ(n)，才能算出d。</span><br><span class="line">　　（2）φ(n)=(p-1)(q-1)。只有知道p和q，才能算出φ(n)。</span><br><span class="line">　　（3）n=pq。只有将n因数分解，才能算出p和q。</span><br></pre></td></tr></table></figure></p></blockquote><p>所以 如果将 n 进行 <strong>因数分解</strong>，就意味着私钥被破解。 可是，大整数的因数分解，是一件非常困难的事情。目前，除了暴力破解，还没有发现别的有效方法。</p><p><strong> 注意:</strong>这里说大整数，不是 像上文 3233 这样的数字，历史上最大的已经进行因数分解的整数为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">　　12301866845301177551304949</span><br><span class="line">　　58384962720772853569595334</span><br><span class="line">　　79219732245215172640050726</span><br><span class="line">　　36575187452021997864693899</span><br><span class="line">　　56474942774063845925192557</span><br><span class="line">　　32630345373154826850791702</span><br><span class="line">　　61221429134616704292143116</span><br><span class="line">　　02221240479274737794080665</span><br><span class="line">　　351419597459856902143413</span><br></pre></td></tr></table></figure></p><p>它等于这样两个质数的乘积<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">　　33478071698956898786044169</span><br><span class="line">　　84821269081770479498371376</span><br><span class="line">　　85689124313889828837938780</span><br><span class="line">　　02287614711652531743087737</span><br><span class="line">　　814467999489</span><br><span class="line">　　　　×</span><br><span class="line">　　36746043666799590428244633</span><br><span class="line">　　79962795263227915816434308</span><br><span class="line">　　76426760322838157396665112</span><br><span class="line">　　79233373417143396810270092</span><br><span class="line">　　798736308917</span><br></pre></td></tr></table></figure></p><p><strong>破解：</strong> 这里有一篇关于 RSA 破解的文章，有兴趣的同学可以看一下。<br><a href="https://juejin.im/post/5937e8252f301e006b2c4e84" target="_blank" rel="noopener">RSA计时攻击</a></p><h5 id="2-3-Java-实现"><a href="#2-3-Java-实现" class="headerlink" title="2.3 Java 实现"></a>2.3 Java 实现</h5><p><strong>使用到的类</strong>： java.security<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成 公钥，密钥</span></span><br><span class="line">KeyPairGenerator --&gt; KeyPair  , KeyFactory --&gt; RSA XXX Spec</span><br><span class="line"><span class="comment">// 公钥 密钥</span></span><br><span class="line">KeyPair</span><br><span class="line">RSAPublicKeySpec --&gt; RSAPublicKey</span><br><span class="line">RSAPrivateKeySpec --&gt; RSAPrivateKey</span><br><span class="line"><span class="comment">// 密码</span></span><br><span class="line">Cipher  --  <span class="number">1</span>.Cipher.getInstance(<span class="string">"RSA"</span>)</span><br><span class="line">            <span class="number">2</span>.init(mode, key)</span><br><span class="line">            <span class="number">3</span>.cipher.doFinal()</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub  </span></span><br><span class="line">        HashMap&lt;String, Object&gt; map = RSAUtils.getKeys();  </span><br><span class="line">        <span class="comment">//生成公钥和私钥  </span></span><br><span class="line">        RSAPublicKey publicKey = (RSAPublicKey) map.get(<span class="string">"public"</span>);  </span><br><span class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) map.get(<span class="string">"private"</span>);  </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//模  </span></span><br><span class="line">        String modulus = publicKey.getModulus().toString();  </span><br><span class="line">        <span class="comment">//公钥指数  </span></span><br><span class="line">        String public_exponent = publicKey.getPublicExponent().toString();  </span><br><span class="line">        <span class="comment">//私钥指数  </span></span><br><span class="line">        String private_exponent = privateKey.getPrivateExponent().toString();  </span><br><span class="line">        <span class="comment">//明文  </span></span><br><span class="line">        String ming = <span class="string">"123456789"</span>;  </span><br><span class="line">        <span class="comment">//使用模和指数生成公钥和私钥  </span></span><br><span class="line">        RSAPublicKey pubKey = RSAUtils.getPublicKey(modulus, public_exponent);  </span><br><span class="line">        RSAPrivateKey priKey = RSAUtils.getPrivateKey(modulus, private_exponent);  </span><br><span class="line">        <span class="comment">//加密后的密文  </span></span><br><span class="line">        String mi = RSAUtils.encryptByPublicKey(ming, pubKey);  </span><br><span class="line">        System.err.println(mi);  </span><br><span class="line">        <span class="comment">//解密后的明文  </span></span><br><span class="line">        ming = RSAUtils.decryptByPrivateKey(mi, priKey);  </span><br><span class="line">        System.err.println(ming);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>RSAUtils.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAUtils</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 生成公钥和私钥 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException  </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, Object&gt; <span class="title">getKeys</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException</span>&#123;  </span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();  </span><br><span class="line">        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);  </span><br><span class="line">        keyPairGen.initialize(<span class="number">1024</span>);  </span><br><span class="line">        KeyPair keyPair = keyPairGen.generateKeyPair();  </span><br><span class="line">        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();  </span><br><span class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();  </span><br><span class="line">        map.put(<span class="string">"public"</span>, publicKey);  </span><br><span class="line">        map.put(<span class="string">"private"</span>, privateKey);  </span><br><span class="line">        <span class="keyword">return</span> map;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 使用模和指数生成RSA公钥 </span></span><br><span class="line"><span class="comment">     * 注意：【此代码用了默认补位方式，为RSA/None/PKCS1Padding，不同JDK默认的补位方式可能不同，如Android默认是RSA </span></span><br><span class="line"><span class="comment">     * /None/NoPadding】 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modulus </span></span><br><span class="line"><span class="comment">     *            模 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exponent </span></span><br><span class="line"><span class="comment">     *            指数 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RSAPublicKey <span class="title">getPublicKey</span><span class="params">(String modulus, String exponent)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            BigInteger b1 = <span class="keyword">new</span> BigInteger(modulus);  </span><br><span class="line">            BigInteger b2 = <span class="keyword">new</span> BigInteger(exponent);  </span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);  </span><br><span class="line">            RSAPublicKeySpec keySpec = <span class="keyword">new</span> RSAPublicKeySpec(b1, b2);  </span><br><span class="line">            <span class="keyword">return</span> (RSAPublicKey) keyFactory.generatePublic(keySpec);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 使用模和指数生成RSA私钥 </span></span><br><span class="line"><span class="comment">     * 注意：【此代码用了默认补位方式，为RSA/None/PKCS1Padding，不同JDK默认的补位方式可能不同，如Android默认是RSA </span></span><br><span class="line"><span class="comment">     * /None/NoPadding】 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modulus </span></span><br><span class="line"><span class="comment">     *            模 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exponent </span></span><br><span class="line"><span class="comment">     *            指数 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RSAPrivateKey <span class="title">getPrivateKey</span><span class="params">(String modulus, String exponent)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            BigInteger b1 = <span class="keyword">new</span> BigInteger(modulus);  </span><br><span class="line">            BigInteger b2 = <span class="keyword">new</span> BigInteger(exponent);  </span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);  </span><br><span class="line">            RSAPrivateKeySpec keySpec = <span class="keyword">new</span> RSAPrivateKeySpec(b1, b2);  </span><br><span class="line">            <span class="keyword">return</span> (RSAPrivateKey) keyFactory.generatePrivate(keySpec);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 公钥加密 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptByPublicKey</span><span class="params">(String data, RSAPublicKey publicKey)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"RSA"</span>);  </span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, publicKey);  </span><br><span class="line">        <span class="comment">// 模长  </span></span><br><span class="line">        <span class="keyword">int</span> key_len = publicKey.getModulus().bitLength() / <span class="number">8</span>;  </span><br><span class="line">        <span class="comment">// 加密数据长度 &lt;= 模长-11  </span></span><br><span class="line">        String[] datas = splitString(data, key_len - <span class="number">11</span>);  </span><br><span class="line">        String mi = <span class="string">""</span>;  </span><br><span class="line">        <span class="comment">//如果明文长度大于模长-11则要分组加密  </span></span><br><span class="line">        <span class="keyword">for</span> (String s : datas) &#123;  </span><br><span class="line">            mi += bcd2Str(cipher.doFinal(s.getBytes()));  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> mi;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 私钥解密 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptByPrivateKey</span><span class="params">(String data, RSAPrivateKey privateKey)</span>  </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"RSA"</span>);  </span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, privateKey);  </span><br><span class="line">        <span class="comment">//模长  </span></span><br><span class="line">        <span class="keyword">int</span> key_len = privateKey.getModulus().bitLength() / <span class="number">8</span>;  </span><br><span class="line">        <span class="keyword">byte</span>[] bytes = data.getBytes();  </span><br><span class="line">        <span class="keyword">byte</span>[] bcd = ASCII_To_BCD(bytes, bytes.length);  </span><br><span class="line">        System.err.println(bcd.length);  </span><br><span class="line">        <span class="comment">//如果密文长度大于模长则要分组解密  </span></span><br><span class="line">        String ming = <span class="string">""</span>;  </span><br><span class="line">        <span class="keyword">byte</span>[][] arrays = splitArray(bcd, key_len);  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">byte</span>[] arr : arrays)&#123;  </span><br><span class="line">            ming += <span class="keyword">new</span> String(cipher.doFinal(arr));  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> ming;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * ASCII码转BCD码 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] ASCII_To_BCD(<span class="keyword">byte</span>[] ascii, <span class="keyword">int</span> asc_len) &#123;  </span><br><span class="line">        <span class="keyword">byte</span>[] bcd = <span class="keyword">new</span> <span class="keyword">byte</span>[asc_len / <span class="number">2</span>];  </span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (asc_len + <span class="number">1</span>) / <span class="number">2</span>; i++) &#123;  </span><br><span class="line">            bcd[i] = asc_to_bcd(ascii[j++]);  </span><br><span class="line">            bcd[i] = (<span class="keyword">byte</span>) (((j &gt;= asc_len) ? <span class="number">0x00</span> : asc_to_bcd(ascii[j++])) + (bcd[i] &lt;&lt; <span class="number">4</span>));  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> bcd;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span> <span class="title">asc_to_bcd</span><span class="params">(<span class="keyword">byte</span> asc)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">byte</span> bcd;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> ((asc &gt;= <span class="string">'0'</span>) &amp;&amp; (asc &lt;= <span class="string">'9'</span>))  </span><br><span class="line">            bcd = (<span class="keyword">byte</span>) (asc - <span class="string">'0'</span>);  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((asc &gt;= <span class="string">'A'</span>) &amp;&amp; (asc &lt;= <span class="string">'F'</span>))  </span><br><span class="line">            bcd = (<span class="keyword">byte</span>) (asc - <span class="string">'A'</span> + <span class="number">10</span>);  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((asc &gt;= <span class="string">'a'</span>) &amp;&amp; (asc &lt;= <span class="string">'f'</span>))  </span><br><span class="line">            bcd = (<span class="keyword">byte</span>) (asc - <span class="string">'a'</span> + <span class="number">10</span>);  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            bcd = (<span class="keyword">byte</span>) (asc - <span class="number">48</span>);  </span><br><span class="line">        <span class="keyword">return</span> bcd;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * BCD转字符串 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bcd2Str</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">char</span> temp[] = <span class="keyword">new</span> <span class="keyword">char</span>[bytes.length * <span class="number">2</span>], val;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;  </span><br><span class="line">            val = (<span class="keyword">char</span>) (((bytes[i] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>);  </span><br><span class="line">            temp[i * <span class="number">2</span>] = (<span class="keyword">char</span>) (val &gt; <span class="number">9</span> ? val + <span class="string">'A'</span> - <span class="number">10</span> : val + <span class="string">'0'</span>);  </span><br><span class="line">  </span><br><span class="line">            val = (<span class="keyword">char</span>) (bytes[i] &amp; <span class="number">0x0f</span>);  </span><br><span class="line">            temp[i * <span class="number">2</span> + <span class="number">1</span>] = (<span class="keyword">char</span>) (val &gt; <span class="number">9</span> ? val + <span class="string">'A'</span> - <span class="number">10</span> : val + <span class="string">'0'</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(temp);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 拆分字符串 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] splitString(String string, <span class="keyword">int</span> len) &#123;  </span><br><span class="line">        <span class="keyword">int</span> x = string.length() / len;  </span><br><span class="line">        <span class="keyword">int</span> y = string.length() % len;  </span><br><span class="line">        <span class="keyword">int</span> z = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">if</span> (y != <span class="number">0</span>) &#123;  </span><br><span class="line">            z = <span class="number">1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        String[] strings = <span class="keyword">new</span> String[x + z];  </span><br><span class="line">        String str = <span class="string">""</span>;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;x+z; i++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (i==x+z-<span class="number">1</span> &amp;&amp; y!=<span class="number">0</span>) &#123;  </span><br><span class="line">                str = string.substring(i*len, i*len+y);  </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                str = string.substring(i*len, i*len+len);  </span><br><span class="line">            &#125;  </span><br><span class="line">            strings[i] = str;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> strings;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     *拆分数组  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[][] splitArray(<span class="keyword">byte</span>[] data,<span class="keyword">int</span> len)&#123;  </span><br><span class="line">        <span class="keyword">int</span> x = data.length / len;  </span><br><span class="line">        <span class="keyword">int</span> y = data.length % len;  </span><br><span class="line">        <span class="keyword">int</span> z = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">if</span>(y!=<span class="number">0</span>)&#123;  </span><br><span class="line">            z = <span class="number">1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">byte</span>[][] arrays = <span class="keyword">new</span> <span class="keyword">byte</span>[x+z][];  </span><br><span class="line">        <span class="keyword">byte</span>[] arr;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;x+z; i++)&#123;  </span><br><span class="line">            arr = <span class="keyword">new</span> <span class="keyword">byte</span>[len];  </span><br><span class="line">            <span class="keyword">if</span>(i==x+z-<span class="number">1</span> &amp;&amp; y!=<span class="number">0</span>)&#123;  </span><br><span class="line">                System.arraycopy(data, i*len, arr, <span class="number">0</span>, y);  </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                System.arraycopy(data, i*len, arr, <span class="number">0</span>, len);  </span><br><span class="line">            &#125;  </span><br><span class="line">            arrays[i] = arr;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> arrays;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-问题"><a href="#2-4-问题" class="headerlink" title="2.4 问题"></a>2.4 问题</h5><blockquote><p>公钥(n,e) 只能 加密小于 n 的整数 m ，那么如果要加密大于 n 的整数，怎么办？<br>在 Java 中 进行 RSA 加密时，有 一个 错误为 ArrayIndexOutOfBoundsException: too much data for RSA block<br>该错误就是加密数据过长导致的。</p></blockquote><p>这里涉及到几个知识点 – <strong>密钥长度/密文长度/明文长度</strong></p><ol><li>明文长度<br> 明文长度(bytes) <strong>&lt;</strong>= 密钥长度(bytes)-11.<br> 如果 明文长度 大于 规定，则出现上述的问题，可以按照下文中的解决方法处理</li><li>密钥长度<br> 下限是96bits(12bytes)<br> 上限未知。不过目前为止，被破解的最长的密钥长度 为 768位，所以 1024 位基本安全， 2048 位绝对安全</li><li>密文长度<ul><li>不分片加密 – 密文长度 == 密钥长度</li><li>分片加密– 密文长度 == 密钥长度<em>分片数<br>  例如 明文 8 bytes , 密钥 128 bits<br>  每片明文长度 = 128/8 - 11 = 5 bytes<br>  分片数 = 8/5 +1 = 2<br>  密文长度 = 128/8 </em> 2 = 32 bytes</li></ul></li></ol><p><strong>解决方法</strong></p><ol><li>分片加密 – 是把长信息分割成若干段短消息，每段分别加密；</li><li>先选择一种”对称性加密算法”（比如DES），用这种算法的密钥加密信息，再用RSA公钥加密DES密钥。</li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="1-DES-详细加密过程"><a href="#1-DES-详细加密过程" class="headerlink" title="1. DES 详细加密过程"></a>1. DES 详细加密过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">1. **对输入的密钥进行变换**。</span><br><span class="line">    用户的64bit密钥，其中第8， 16， 24， 32， 40， 48， 56， 64位是校验位， 使得每个密钥都有奇数个1。所以密钥事实上是56位。对这56位密钥进行如下表的换位。</span><br><span class="line"></span><br><span class="line">57, 49, 41, 33, 25, 17,   9,  1, 58, 50, 42, 34, 26, 18, 10,  2, 59, 51, 43, 35, 27, 19, 11,  3, 60, 52, 44, 36, </span><br><span class="line">63, 55, 47, 39, 31, 23, 15,  7, 62, 54, 46, 38, 30, 22, 14,  6, 61, 53, 45, 37, 29, 21, 13,  5, 28, 20, 12,   4,</span><br><span class="line"></span><br><span class="line">表的意思是第57位移到第1位，第49位移到第2位，...... 以此类推。变换后得到56bit数据，将它分成两部分，C[0][28], D[0][28]。</span><br><span class="line"></span><br><span class="line">2. **计算16个子密钥**，计算方法C[i][28] D[i][28]为对前一个C[i-1][28], D[i-1][28]做循环左移操作。16次的左移位数如下表:</span><br><span class="line"></span><br><span class="line"> 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16   （第i次)</span><br><span class="line"> 1,  1,  2,  2,  2,  2,  2,  2,  1,  2,  2,  2,  2,  2,  2,  1    (左移位数)</span><br><span class="line"></span><br><span class="line">3. **串联**计算出来的C[i][28] D[i][28] 得到56位，然后对它进行如下变换得到48位子密钥K[i][48]</span><br><span class="line"></span><br><span class="line">14, 17, 11, 24,  1,  5,  3, 28, 15,  6, 21, 10, 23, 19, 12,  4, 26,  8, 16,  7, 27, 20, 13,  2,</span><br><span class="line">41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32,</span><br><span class="line"></span><br><span class="line">表的意思是第14位移到第1位，第17位移到第2位，以此类推。在此过程中，发现第9，18，22，25， 35，38，43，54位丢弃。</span><br><span class="line"></span><br><span class="line">4. 对64bit的明文输入进行换位变换。换位表如下:</span><br><span class="line"></span><br><span class="line">58, 50, 12, 34, 26, 18, 10,  2, 60, 52, 44, 36, 28, 20, 12,  4,</span><br><span class="line">62, 54, 46, 38, 30, 22, 14,  6, 64, 56, 48, 40, 32, 24, 16,  8,</span><br><span class="line">57, 49, 41, 33, 25, 17,   9,  1, 59, 51, 43, 35, 27, 19, 11,  3,</span><br><span class="line">61, 53, 45, 37, 29, 21, 13,  5, 63, 55, 47, 39, 31, 23, 15,  7</span><br><span class="line"></span><br><span class="line">表的意思就是第一次变换时，第58位移到第1位，第50位移到第2位，...... 依此类推。得到64位数据，将这数据前后分成两块L[0][32], R[0][32]。</span><br><span class="line"></span><br><span class="line">5. 加密过程，对R[i][32]进行扩展变换成48位数，方法如下， 记为E(R[i][32])</span><br><span class="line"></span><br><span class="line">32,  1,  2,  3,  4,  5,   </span><br><span class="line"> 4,  5,  6,  7,  8,  9,</span><br><span class="line"> 8,  9, 10, 11, 12, 13, </span><br><span class="line">12, 13, 14, 15, 16, 17,</span><br><span class="line">16, 17, 18, 19, 20, 21,</span><br><span class="line">20, 21, 22, 23, 24, 25, </span><br><span class="line">24, 25, 26, 27, 28, 29,</span><br><span class="line">28, 29, 30, 31, 32,  1,</span><br><span class="line"></span><br><span class="line">6. 将E(R[i][32])与K[i][48]作异或运算，得到48位数，将48位数顺序分成8份，6位一份，B[8][6]。</span><br><span class="line"></span><br><span class="line">7. 使用S[i]替换B[i][6]。过程如下: 取出B[i][6]的第1位和第6位连成一个2位数m， m就是S[i]中对应的行数(0-3)，取出B[i][6]的第2到第5位连成一个4位数n(0-15)，n就是S[i]中对应的列数，用S[i][m][n]代替B[i][6]。S是4行16列的对应表，里面是4位的数，一共有8个S，定义如下:</span><br><span class="line"></span><br><span class="line">S[1]:</span><br><span class="line">   14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7, </span><br><span class="line">　　0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8, </span><br><span class="line">　　4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0, </span><br><span class="line">　　15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13,</span><br><span class="line">S[2]:</span><br><span class="line">    15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10, </span><br><span class="line">    3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5, </span><br><span class="line">    0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15, </span><br><span class="line">    13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9,</span><br><span class="line">S[3]:</span><br><span class="line">    10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8, </span><br><span class="line">    13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1, </span><br><span class="line">    13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7, </span><br><span class="line">    1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12,</span><br><span class="line">S[4]:</span><br><span class="line">    7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15, </span><br><span class="line">　　13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9, </span><br><span class="line">　　10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4, </span><br><span class="line">　　3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14, </span><br><span class="line">S[5]: </span><br><span class="line">　　2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9, </span><br><span class="line">　　14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6, </span><br><span class="line">　　4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14, </span><br><span class="line">　　11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3, </span><br><span class="line">S[6]: </span><br><span class="line">　　12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11, </span><br><span class="line">　　10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8, </span><br><span class="line">　　9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6, </span><br><span class="line">　　4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13, </span><br><span class="line">S[7]: </span><br><span class="line">　　4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1, </span><br><span class="line">　　13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6, </span><br><span class="line">　　1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2, </span><br><span class="line">　　6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12, </span><br><span class="line">S[8]: </span><br><span class="line">　　13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7, </span><br><span class="line">　　1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2, </span><br><span class="line">　　7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8, </span><br><span class="line">　　2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11,</span><br><span class="line"></span><br><span class="line">8. 将从B[i][6]经过S得到的8个4位数连起来得到32位数。对这个数进行如下变换:</span><br><span class="line"></span><br><span class="line">   16,7,20,21,29,12,28,17, 1,15,23,26, 5,18,31,10, </span><br><span class="line">　　2,8,24,14,32,27, 3, 9,19,13,30, 6,22,11, 4,25,</span><br><span class="line"></span><br><span class="line">  得到的结果与L[i][32]作异或运算，把结果赋给R[i][32]。</span><br><span class="line"></span><br><span class="line">9. 把R[i-1][32]的值赋给L[i]，从5开始循环。直到K[16][48]结束。</span><br><span class="line"></span><br><span class="line">10. 将最后的L,R合并成64位，然后进行如下转化得到最后的结果。这是对第4步的一个逆变化。</span><br><span class="line"> 40, 8, 48, 16, 56, 24, 64, 32, </span><br><span class="line"> 39, 7, 47, 15, 55, 23, 63, 31, </span><br><span class="line"> 38, 6, 46, 14, 54, 22, 62, 30, </span><br><span class="line"> 37, 5, 45, 13, 53, 21, 61, 29, </span><br><span class="line"> 36, 4, 44, 12, 52, 20, 60, 28,</span><br><span class="line"> 35, 3, 43, 11, 51, 19, 59, 27, </span><br><span class="line"> 34, 2, 42, 10, 50, 18, 58, 26, </span><br><span class="line"> 33, 1, 41,   9, 49, 17, 57, 25</span><br></pre></td></tr></table></figure><h3 id="2-https-的加密算法"><a href="#2-https-的加密算法" class="headerlink" title="2. https 的加密算法"></a>2. https 的加密算法</h3><blockquote><p>由于之前看过 https 是 由 secure socket layer 实现的。 也是通过 公钥私钥 保证其安全性，所以在学习这篇文章的时候，就想 https 是由哪种 加密算法 做为其 底层实现的呢。 因此，就有了下面这部分。</p></blockquote><blockquote><p>关于 https 与 http 的区别 请看我的这篇博客，不再赘述。<a href="https://3dot141.cn/blogs/28952.html" target="_blank" rel="noopener">网络基础知识</a></p></blockquote><p><strong>原理：</strong></p><ul><li>浏览器把自身支持的一系列Cipher Suite（密钥算法套件，后文简称Cipher）[C1,C2,C3, …]发给服务器；</li><li>服务器接收到浏览器的所有Cipher后，与自己支持的套件作对比，如果找到双方都支持的Cipher，则告知浏览器；</li><li>浏览器与服务器使用匹配的Cipher进行后续通信。如果服务器没有找到匹配的算法，浏览器（以 Chrome 56为例）将给出错误信息:</li></ul><p>下面讲一下如何分析。</p><ol><li>准备： 通过可以抓取网络包的工具，这里通过 Wireshark 分析。<a href="http://www.cnblogs.com/tankxiao/archive/2012/10/10/2711777.html" target="_blank" rel="noopener">关于wireshark 的介绍请点击这里</a>.查看浏览器发送给服务器的 Ciper服务器的 Ciper</li><li>流程： <ul><li>浏览器首先发起握手协议， 一个’Client Hello’消息，如下图，按照Protocol协议顺序排序，然后，找到Client Hello，选中，依次查找 ‘Secure Sockets Layer’ -&gt; TLSv1.2 Record Layer -&gt; Handshake protocal -&gt;Ciper Suites.<img src="http://ovmspkp0s.bkt.clouddn.com/201711110701_362.png" alt=""></li><li>可以看到， Cipher有很多。总共16，第一个是Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)。<img src="http://ovmspkp0s.bkt.clouddn.com/201711110709_795.png" alt=""></li><li>如果按照顺序继续寻找第一个 Info 为’Sever Hello’ 的报文，可以找到相应的Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b) 。<img src="http://ovmspkp0s.bkt.clouddn.com/201711110713_718.png" alt="">.</li></ul></li><li>Cipher介绍：<ul><li><strong>密钥交换算法</strong>，用于决定客户端与服务器之间在握手的过程中如何认证，用到的算法包括RSA，Diffie-Hellman，ECDH，PSK等</li><li><strong>加密算法</strong>，用于加密消息流，该名称后通常会带有两个数字，分别表示密钥的长度和初始向量的长度，比如DES 56/56, RC2 56/128, RC4 128/128, AES 128/128, AES 256/256</li><li><strong>报文认证信息码</strong>（MAC）算法，用于创建报文摘要，确保消息的完整性（没有被篡改），算法包括MD5，SHA等。</li><li><strong>PRF（伪随机数函数）</strong>，用于生成“master secret”。</li><li><strong>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 (0xc02b)</strong>:<ul><li>基于TLS协议</li><li>使用 ECDHE,ECDSA作为密钥交换算法</li><li>加密算法 AES(密钥与初始向量的长度为128)</li><li>MAC 算法 SHA</li></ul></li></ul></li><li>总结：<br>Client端密钥算法套件[C1,C2,C3],Server端密钥算法套件[C4,C2,C1,C3]，<br>则，IIS<a href="">(Internet Infomation Services)</a>，C2将被优先返回</li></ol><hr><h3 id="3-wireshark-的使用问题"><a href="#3-wireshark-的使用问题" class="headerlink" title="3. wireshark 的使用问题"></a>3. wireshark 的使用问题</h3><p>问题:第一次使用 wireshark 的时候，不显示接口。原因是。。。<br>刚开始使用 在windows 上需要 winpacp 并且开启 npf 服务。<br>注： 如果 没有安装 winpacp ，想直接 通过 net start npf 开启服务，将会提示。 发生系统错误2</p><ol><li>winpacp 安装 。。。<br><a href="https://www.winpcap.org/install/" target="_blank" rel="noopener">这里是下载网站</a><br>直接安装即可。</li><li>开启 npf 服务<br>打开 cmd ,输入 <code>net start npf</code> ,提示：服务已经启动。</li><li>进入界面，选择相应的网卡。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201711101750_461.png" alt=""><br>这里，可以通过 网络连接 看出来。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201711101754_590.png" alt=""><br>所以，我的是无线网络连接。</li><li>最终界面<br><img src="http://ovmspkp0s.bkt.clouddn.com/201711101753_329.png" alt=""><br>WireShark 主要分为这几个界面</li><li>Display Filter(显示过滤器)，  用于过滤</li><li>Packet List Pane(封包列表)， 显示捕获到的封包， 有源地址和目标地址，端口号。 颜色不同，代表</li><li>Packet Details Pane(封包详细信息), 显示封包中的字段</li><li>Dissector Pane(16进制数据)</li><li>Miscellanous(地址栏，杂项)</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>都看到这里了，点个<strong>关注</strong>,点波<strong>赞</strong>再走，QAQ。<br>你的小手<strong>轻点</strong>，是我最大的动力哦。</p><blockquote><p>一只想当程序员的1米88<strong>处女座</strong>大可爱<strong>如此说</strong>。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://blog.csdn.net/fenghao_5555/article/details/1589464" target="_blank" rel="noopener">DES 加密算法解析</a></li><li><a href="http://blog.csdn.net/fw0124/article/details/8472560" target="_blank" rel="noopener">分组加密的四种模式</a></li><li><a href="http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html" target="_blank" rel="noopener">阮一峰–RSA算法原理</a></li><li><a href="http://blog.csdn.net/centralperk/article/details/8558678" target="_blank" rel="noopener">java中RSA加解密的实现</a></li><li><a href="http://blog.sina.com.cn/s/blog_76550fd7010147tp.html" target="_blank" rel="noopener">关于RSA算法密钥长度/密文长度/明文长度</a></li><li><a href="http://kb.cnblogs.com/page/530044/" target="_blank" rel="noopener">https背后的加密算法</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逐梦offer -- 网络基础知识总结</title>
      <link href="/blogs/28952.html"/>
      <url>/blogs/28952.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-网络基础"><a href="#1-网络基础" class="headerlink" title="1. 网络基础"></a>1. 网络基础</h2><h3 id="1-1-OSI-7层模型-与-TCP-IP-四层模型"><a href="#1-1-OSI-7层模型-与-TCP-IP-四层模型" class="headerlink" title="1.1 OSI 7层模型 与 TCP/IP 四层模型"></a>1.1 OSI 7层模型 与 TCP/IP 四层模型</h3><p>OSI 7层模型</p><ol><li>物理层：负责 0，1 比特流与电压高低、光的闪灭之间的互换<br> 设备： 中继器：将电缆传过来的电信号与光信号经中继器的波形调整与放大传给另一个。</li><li>数据链路层： 负责数据帧与比特流的转换<br> 设备： 网桥：通过 MAC 地址连接两个网络。通过CRC（cyclic redundancy check 循环冗余校验）的方式对数据链路层中的 FCS（frame check sequence) 验证。从而确保数据的完整性。</li><li>网络层：负责寻址与路由的选择<br> 设备： 路由器：根据IP 地址进行处理。</li><li>传输层：管理两个节点之间数据的传输。确保数据被可靠的传送到目标地址，检测是否有数据丢失。</li><li>会话层：负责建立和断开通信连接</li><li>表示层：负责数据格式的转换</li><li>应用层：针对特定应用的协议<br> 4-7层交换机<br> 网关：负责从传输层到应用层的数据进行转换和转发的设备。</li></ol><p>TCP/IP 四层模型<br>包为描述数据的全能型单位。</p><ul><li>网络接口层<br>  单位：帧<br>  <strong>相关技术：</strong> <ul><li>MAC 地址: 使用网卡(NIC) , 有唯一性</li><li>共享介质型网络：半双工通信，只发送或只接收的方式<br>1、争用方式（CSMA （carrier sense multiple access) - 载波监听多路访问）<br>2、令牌传递方式</li><li>非共享介质型网络：双工通信<br>每个站直连交换机，由交换机负责转发数据帧。</li><li>以太网帧格式： MAC(介质访问控制层)+LLC(逻辑链路控制层)+SNAP+IP+TCP+上层数据+FCS</li></ul></li><li>网络层<br>  协议：IP / ICMP / ARP（Address Resolution Protocol) / NAT / DHCP / DNS<br>  <strong>相关技术：</strong><ul><li>Hop : 数据链路层以下分层的传输数据帧的一个区间。是主机或路由器网卡不经其他路由器而能直接到达的对象之间的一个区间。</li><li>MTU (Maximum Transmission Unit): 最大传输单位</li><li>ARP : 通过 IP 地址 得到 MAC 地址 – RARP ： MAC 得到 IP</li><li>ICMP ：确认网络的正常使用，以及异常的排查<br>  消息类型：<br>  类型3 ：目标不可达<br>  类型5 ：重定向<br>  类型11 ：超时<br>  <strong>TTL Time To Live 防止IP 包无限制的传递下去</strong><br>  类型0 ：向对方发送消息<br>  类型8 ：接收对方发送的消息<br>  ping 命令就是 类型0、8 。</li><li>NAT(Network Adddress Translator) : 由本地网络中的私有地址转换为全局 IP 地址。</li><li>DNS ：域名命名系统 – 使用 TCP 53号端口</li><li>DHCP ：动态域名控制协议 </li><li>路由控制 </li></ul></li><li>传输层<br>  协议：TCP / UDP</li><li>应用层<br>  协议：WWW / HTTP / MIME，SMTP、POP、IMPA / FTP / TELNET - SSH / SNMP<br>  <strong>相关技术：</strong><ul><li>FTP ：用两条 TCP 连接：<br>  1、数据控制 ， 使用 21号端口<br>  2、数据传输 ， 使用 20号端口<br>  3、状态码： 1-提供信息，2-连接管理，3-用户相关，4-错误，5-文件系统</li><li>HTTP : 使用 80 端口<br>  1、 主要命令：GET.PUT.POST.DELETE.OPTIONS.HEAD.TRACE<br>  2、 状态码： 1-提供信息，2-肯定应答，3-重写向请求，4-客户端请求内容错误，5-服务器错误</li><li>HTTPS : 使用 443 端口</li></ul></li></ul><h3 id="1-2-TCP-UDP"><a href="#1-2-TCP-UDP" class="headerlink" title="1.2 TCP / UDP"></a>1.2 TCP / UDP</h3><p>SYN (Synchronize Flag) ACK(Acknowledgement Flag) FIN(Fin Flag)<br>TCP 的三次握手</p><ol><li>客户端 –》 SYN</li><li>SYN ACK 《– 服务器</li><li>客户端 –》SYN</li></ol><p>四次挥手</p><ol><li>客户端 –》 FIN</li><li>ACK 《– 服务器</li><li>FIN 《– 服务器</li><li>客户端 –》 ACK</li></ol><p>MSS(Maximum Segment Size) 最大消息长度：由三次握手的时候，两端主机会在TCP首部写入 MSS 长度，通过比较，取得其中比较少的值</p><p>窗口控制<br>原先的缺点：TCP 以一个段为单位，每发一个段进行一次确认应答的处理。包的往返时间越长，通信性能越低。<br>因此引入窗口这个概念。窗口大小是指无需等待确认应答，而可以继续发送数据的最大值。<br>使用大量的缓冲区，如果有部分数据丢包，发送端主机设置缓存保留这些数据，直至收到它们的确认应答。<br>如果没有丢包，就滑动窗口到下一个位置</p><p>重发控制<br>窗口在一定程度上较大时，即使有少部分的确认应答丢失也不会进行数据重发。可以通过下一个确认应答确认。<br>当某一报文段丢失后，发送端会一直收到序号为原数据的确认应答。连续 3 次 同一个确认应答，会进行重发</p><p>流控制<br>TCP 首部中有专门的字段用来通知窗口的大小<br>接收主机将自己可以接收的缓冲区大小放入这个字段中通知给发送端，这个字段的值越大，说明网络的吞吐量越高</p><p>拥塞控制<br>慢启动：通过拥塞窗口，第一次大小为 <strong>1 MSS</strong> ， 以后每次 收到一次确认应答（ACK）,拥塞窗口的值 加 1.<br>然后比较 两端 窗口的 大小，发送比小值还的小的数。</p><h3 id="1-3-路由协议"><a href="#1-3-路由协议" class="headerlink" title="1.3 路由协议"></a>1.3 路由协议</h3><ul><li>静态路由 与 动态路由</li><li>AS (Autonomous System) 与 路由选择域(Routing Domain)<br>  内部使用 IGP (Interior Gateway Protocol) 外部使用 EGP (Exterior Gateway Protocol).</li><li>IGP 中可以使用 RIP (Routing Information Protocol) , OSPF(Open Shortest Path First);<ul><li>RIP – 距离向量(Distance-Vector)协议:通过距离与方向决定目标网络或主机位置。</li><li>OSPF – 链路状态(Link-State)协议：了解网络整体连接状态的基础上生成路由控制表。<br>  将每条链路赋予一个权重，采用 <strong>Dijkstra 算法(最短路径优先算法)</strong>生成相应的路由控制表。<br>  权重，是通过 HELLO 协议， <strong>HELLO</strong>包在LAN中传递，<strong>3 次</strong>以上空等后，使用<strong>链路状态更新包(Link state update package) </strong>通知状态的改变。<br>  链路状态更新包 传达 ： 网络 LSA(Link State Advertisement 链路状态通告) , 路由器 LSA 信息。 从而让 路由器生成<strong>链路状态数据库</strong>。</li></ul></li><li>EGP 中使用 BGP(Border Gateway Protocol)<ul><li>BGP – 路径向量(Path-Vector)协议：</li></ul></li><li>总结 ：  路由选择时的度量 ， RIP表现为 路由器个数， OSPF则是每个子网的成本， BGP 为 AS 的个数。</li></ul><h3 id="1-4-HTTP"><a href="#1-4-HTTP" class="headerlink" title="1.4 HTTP"></a>1.4 HTTP</h3><h4 id="1-get与post"><a href="#1-get与post" class="headerlink" title="1. get与post"></a>1. get与post</h4><p>Http 定义了服务器交互的不同方法 ，最基本的有四种 ：GET查, POST改,PUT增,DELETE删。</p><ol><li>get一般用于信息获取，是安全与幂等的。<br> 安全指。该操作用于获取信息，所以不会对数据有什么破坏。<br> 幂等意味着 对同一URL 的多个请求返回同样的结果。</li><li>post表示可能修改服务器上的资源的请求。</li></ol><p>区别：</p><ol><li>GET请求的数据会附在URL之后，以 ？分割URL和传输数据，参数之间用&amp;相连。<br> post 方式则是将提交的数据放置在 HTTP 包的 包体中。</li><li>GET方式提交的数据有限制，是因为特定的浏览器及服务器对它的限制，URL不存在参数上限的问题。HTTP规范中并没有对URL长度进行限制。<br> post方式提交的大小是没有限制的，限制的是服务器的处理程序的处理能力。</li><li>POST比GET 提交的安全性高，是因为GET提交数据，用户名和密码是明文出现在URL上，POST数据是隐藏到HTTP包的包体中的。抓包时，仍然可以看见。</li></ol><h4 id="2-session与cookie"><a href="#2-session与cookie" class="headerlink" title="2. session与cookie"></a>2. session与cookie</h4><p>HTTP协议 （ <a href="http://www.w3.org/Protocols/" target="_blank" rel="noopener">http://www.w3.org/Protocols/</a> ）是“一次性单向”协议。<br>服务端不能主动连接客户端，只能被动等待并答复客户端请求。客户端连接服务端，发出一个HTTP Request，服务端处理请求，并且返回一个HTTP Response给客户端，本次HTTP Request-Response Cycle结束。<br>Session ID实际上是在客户端和服务端之间通过HTTP Request和HTTP Response传来传去的。</p><ol><li>Session对象在浏览器中的有效范围：<br>IE中:<ol><li>Session对象只在建立Session对象的窗口中有效。</li><li>在建立Session对象的窗口中新开链接的窗口也有效。<br>Session只会在内存中，他会随着IE窗口的关闭而死亡。<br>也就是说单用seesion是不会有产生自动登入的效果的。</li></ol></li><li>Cookie 是在服务器给客户端IE一个命令后在客户端产生并存的，<br>它可以存放用户信息，存到客户端硬盘上，在COOKIE记录被删除<br>或者失效日期之前，就可以实现自动登入的现象。</li><li>Session 和 Cookie 是不同的，但是他们确实是相关的。<br>当打开IE登入后，会向服务器发出一个指令请求SESSIONID以<br>及页面内容，服务器会返回页面内容和一个没有被使用的<br>SESSIONID让此IE使用，当时IE就对返回SESSIONID做存储；而当此IE再访问任何这个站点的JSP程序的时候,都会给服务器这个 SESSIONID，来确认客户端的身份。（在没有Cookie 的情况下session死亡 SESSIONID被取消就需要重新登入）</li></ol><h4 id="3-http-与-https-的区别"><a href="#3-http-与-https-的区别" class="headerlink" title="3. http 与 https 的区别"></a>3. http 与 https 的区别</h4><h5 id="一、HTTP"><a href="#一、HTTP" class="headerlink" title="一、HTTP"></a>一、HTTP</h5><p>1.支持客户/服务器模式。<br>2.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。<br>3.灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。<br>4.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。<br>5.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p><p>1) HTTP协议详解之请求篇</p><blockquote><p>http请求由三部分组成，分别是：<strong>请求行、消息报头、请求正文</strong><br>    1、请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本，格式如下：<br>        <strong>Method Request-URI HTTP-Version CRLF</strong><br>    其中 Method表示请求方法；Request-URI是一个统一资源标识符；HTTP-Version表示请求的HTTP协议版本；CRLF表示回车和换行（除了作为结尾的CRLF外，不允许出现单独的CR或LF字符）。<br>    请求方法（所有方法全为大写）有多种，各个方法的解释如下：<br>        GET　　　　请求获取Request-URI所标识的资源<br>        POST　　　 在Request-URI所标识的资源后附加新的数据<br>        HEAD　　　 请求获取由Request-URI所标识的资源的响应消息报头<br>        PUT　　　　 请求服务器存储一个资源，并用Request-URI作为其标识<br>        DELETE　　 请求服务器删除Request-URI所标识的资源<br>        TRACE　　  请求服务器回送收到的请求信息，主要用于测试或诊断<br>        CONNECT　 保留将来使用<br>        OPTIONS　  请求查询服务器的性能，或者查询与资源相关的选项和需求<br>    2、请求报头后述<br>    3、请求正文(略) </p></blockquote><p>2) HTTP协议详解之响应篇</p><blockquote><p>在接收和解释请求消息后，服务器返回一个HTTP响应消息。<br>    HTTP响应也是由三个部分组成，分别是：状态行、消息报头、响应正文<br>    1、状态行格式如下：<br>    <strong>HTTP-Version Status-Code Reason-Phrase CRLF</strong><br>    其中，HTTP-Version表示服务器HTTP协议的版本；Status-Code表示服务器发回的响应状态代码；Reason-Phrase表示状态代码的文本描述。<br>    状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：<br>    1xx：指示信息–表示请求已接收，继续处理<br>    2xx：成功–表示请求已被成功接收、理解、接受<br>    3xx：重定向–要完成请求必须进行更进一步的操作<br>    4xx：客户端错误–请求有语法错误或请求无法实现<br>    5xx：服务器端错误–服务器未能实现合法的请求<br>    常见状态代码、状态描述、说明：<br>    200 OK      //客户端请求成功<br>    400 Bad Request  //客户端请求有语法错误，不能被服务器所理解<br>    401 Unauthorized //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>    403 Forbidden  //服务器收到请求，但是拒绝提供服务<br>    404 Not Found  //请求资源不存在，eg：输入了错误的URL<br>    500 Internal Server Error //服务器发生不可预期的错误<br>    503 Server Unavailable  //服务器当前不能处理客户端的请求，一段时间后可能恢复正常<br>    eg：HTTP/1.1 200 OK （CRLF）<br>    2、响应报头后述<br>    3、响应正文就是服务器返回的资源的内容 </p></blockquote><p>3) HTTP协议详解之消息报头篇</p><blockquote><p>HTTP消息报头包括普通报头、请求报头、响应报头、实体报头。</p></blockquote><table><thead><tr><th>普通报头</th><th>请求报头</th><th>响应报头</th><th>实体报头</th></tr></thead><tbody><tr><td>Cache-Control</td><td>Accept</td><td>Location(重定向)</td><td></td></tr><tr><td>Date</td><td>Accept-Charset</td><td>Server（服务器用来处理软件的信息</td><td></td></tr><tr><td>Connection</td><td>Accept-Encoding</td><td></td><td>Content-Encoding</td></tr><tr><td></td><td>Accept-Language</td><td></td><td>Content-Language</td></tr><tr><td></td><td>Authorization</td><td>WWW-Authenticate</td><td>Content-Type</td></tr><tr><td></td><td>Host</td><td></td><td>Last-Modified</td></tr><tr><td></td><td>User-Agent</td><td></td><td>Expires</td></tr></tbody></table><h5 id="二、HTTPS"><a href="#二、HTTPS" class="headerlink" title="二、HTTPS"></a>二、HTTPS</h5><p>　　HTTPS（Hypertext Transfer Protocol over Secure Socket Layer，基于SSL的HTTP协议）使用了HTTP协议，但HTTPS使用不同于HTTP协议的默认端口及一个加密、身份验证层（HTTP与TCP之间）。提供了身份验证与加密通信方法，现在它被广泛用于互联网上安全敏感的通信。<br>　　客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤。<br>（1）客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。<br>（2）Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。<br>（3）客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。<br>（4）客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。<br>（5）Web服务器利用自己的私钥解密出会话密钥。<br>（6）Web服务器利用会话密钥加密与客户端之间的通信。</p><h3 id="1-5-RESTful（Representational-State-Transfer"><a href="#1-5-RESTful（Representational-State-Transfer" class="headerlink" title="1.5 RESTful（Representational State Transfer)"></a>1.5 RESTful（Representational State Transfer)</h3><p>（1）每一个URI代表一种资源；<br>（2）客户端和服务器之间，传递这种资源的某种表现层；<br>（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p><blockquote><p>(1)客户-服务器：客户-服务器约束背后的原则是分离关注点。通过分离用户接口和数据存储这两个关注点，改善了用户接口跨多个平台的可移植性；同时通过简化服务器组件，改善了系统的可伸缩性。<br>    (2)无状态：通信在本质上是无状态的，改善了可见性、可靠性、可伸缩性.<br>    (3)缓存：改善了网络效率减少一系列交互的平均延迟时间，来提高效率、可伸缩性和用户可觉察的性能。<br>    (4)统一接口：REST架构风格区别于其他基于网络的架构风格的核心特征是，它强调组件之间要有一个统一的接口。</p></blockquote><h3 id="1-6-网络安全"><a href="#1-6-网络安全" class="headerlink" title="1.6 网络安全"></a>1.6 网络安全</h3><h4 id="1-CSRF-Cross-Site-Request-Forgeries"><a href="#1-CSRF-Cross-Site-Request-Forgeries" class="headerlink" title="1. CSRF (Cross-Site Request Forgeries)"></a>1. CSRF (Cross-Site Request Forgeries)</h4><p>csrf 跨站点请求伪造 ： 冒充用户发起请求。<br>本质：通过已经认证的用户权限搞事情。<br><strong>模拟攻击：</strong> user – webA – webB</p><ol><li>user 浏览 webA</li><li>webA 上发送给 user 一个 cookie </li><li>user 浏览 webB</li><li>webB 要求 user 访问 webA</li><li>user 此时带着 cookie 访问 webA</li><li><p>cookie 验证合格，所以 webB 可以 通过 user 的权限操控 webA</p><blockquote><p>与 xss 区别：<br>通常来说 CSRF 是由 XSS 实现的，CSRF 时常也被称为 XSRF（CSRF 实现的方式还可以是直接通过命令行发起请求等）。<br>本质上讲，XSS 是代码注入问题，CSRF 是 HTTP 问题。XSS 是内容没有过滤导致浏览器将攻击者的输入当代码执行。CSRF 则是因为浏览器在发送 HTTP 请求时候自动带上 cookie，而一般网站的 session 都存在 cookie里面。</p></blockquote></li></ol><h4 id="2-XSS-Cross-Site-Scripting"><a href="#2-XSS-Cross-Site-Scripting" class="headerlink" title="2. XSS (Cross Site Scripting)"></a>2. XSS (Cross Site Scripting)</h4><p>xss 跨站脚本攻击 ： 通过注入非法的 html 标签 以及 javascript 代码，从而当用户浏览网页时，控制用户的浏览器</p><p>xss 主要分为三类：</p><ol><li>DOM xss :<br>DOM即文本对象模型，DOM通常代表在html、xhtml和xml中的对象，使用DOM可以允许程序和脚本动态的访问和更新文档的内容、结构和样式。它不需要服务器解析响应的直接参与，触发XSS靠的是浏览器端的DOM解析，可以认为完全是客户端的事情。</li><li>反射型 xss :<br>反射型XSS也被称为非持久性XSS，是现在最容易出现的一种XSS漏洞。发出请求时，XSS代码出现在URL中，最后输入提交到服务器，服务器解析后在响应内容中出现这段XSS代码，最后浏览器解析执行。</li><li>存储型 xss :<br>存储型XSS又被称为持久性XSS，它是最危险的一种跨站脚本，相比反射型XSS和DOM型XSS具有更高的隐蔽性，所以危害更大，因为它不需要用户手动触发。 允许用户存储数据的web程序都可能存在存储型XSS漏洞，当攻击者提交一段XSS代码后，被服务器端接收并存储，当所有浏览者访问某个页面时都会被XSS，其中最典型的例子就是留言板。</li></ol><p>跨站脚本攻击可能造成以下影响：</p><ol><li>利用虚假输入表单骗取用户个人信息。</li><li>利用脚本窃取用户的 Cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求。</li><li>显示伪造的文章或图片。</li></ol><p>防御：</p><ul><li>httpOnly: 在cookie 中设置 HttpOnly ,使得 js 脚本无法读取到 cookie 信息。</li><li>过滤 ：<ul><li>输入检查</li><li>HtmlEncode : 对一些标签进行转化，将之转化为文本内容，而非一段可以执行的代码</li><li>JavaScriptEncode : 对一些字符加上反斜杠</li></ul></li></ul><h4 id="3-DDos"><a href="#3-DDos" class="headerlink" title="3. DDos"></a>3. DDos</h4><p>因为自己没有这方面的经验与系统的学习，所以就大概了解了一下，没有过多的分析。<br><a href="https://www.leiphone.com/news/201509/9zGlIDvLhwguqOtg.html" target="_blank" rel="noopener">漫画告诉你什么是DDoS攻击？</a><br><a href="http://blog.csdn.net/huwei2003/article/details/45476743" target="_blank" rel="noopener">DDoS的攻击原理与防御方法</a></p><h3 id="1-7-socket编程"><a href="#1-7-socket编程" class="headerlink" title="1.7 socket编程"></a>1.7 socket编程</h3><p><a href="https://3dot141.cn/blogs/1.html" target="_blank" rel="noopener">过去整理过，请点这里的这么明显的清楚的链接</a></p><h3 id="1-8-补充"><a href="#1-8-补充" class="headerlink" title="1.8 补充"></a>1.8 补充</h3><p>在论坛上看到一个问题：<br><strong><a href="http://bbs.51cto.com/thread-821402-1-1.html" target="_blank" rel="noopener">ICMP 用的什么端口？</a></strong><br>有人是这么回答的，ICMP在网络层协议，不是用端口来说的，它的功能用类型来区别。</p><blockquote><p>重点是下面这些消息类型，可以防止 <strong>DDoS</strong> 攻击 , 所以补充一下 .<br>Echo Request和Reply（类型8和0）：<br>　　允许Echo Request消息出站以便于内部用户能够PING一个远程主机。阻止入站Echo Request和出站Echo Reply可以防止外部网络的主机对内部网络进行扫描。如果您使用了位于外部网络的监视器来监视内部网络，就应该只允许来自于特定外部IP的Echo Request进入您的网络。限制ICMP Echo包的大小可以防止“Ping Floods”攻击，并且可以阻止那些利用Echo Request和Reply来“偷运”数据通过防火墙的木马程序。<br>Destination unreachable （类型3）：<br>　　允许其入站以便于内部网用户可以使用traceroute。需要注意的是，有些攻击者可以使用它来进行针对会话的DoS攻击，如果您曾经历过类似的攻击，也可以阻止它。阻止出站的ICMP Destination unreachable消息，因为它可能会泄漏内部网络的结构。不过有一个例外，对于那些允许外部网络通过TCP访问的内部主机（如位于DMZ区的Web 服务器）发出的Destination unreachable，则应该允许它通过。为了能够支持“Path MTU Discovery”，您应该允许出站的“Packet Too Big”消息（类型3，代码4）到达那些主机。<br>Source quench（类型4）：<br>　　阻止其入站，因为它可以作为一种DoS攻击，能够降低发送者的发送速度。允许其出站以便于内部主机能够控制发送端发送数据的速度。有些防火墙会忽略所有直接发送到防火墙端口的Source Quench消息，以防止针对于防火墙的DoS攻击。<br>Redirect（类型5，9，10）：<br>　　Redirect、Router announcement、 Router selection（类型5，9，10）：这些消息都存在潜在危险，因为它们可以用来把数据重定向到攻击者的机器。这些消息都应该被阻止。<br>TTL exceeded（类型11）：<br>　　允许其进站以便于内部用户可以使用traceroute。“firewalking”使用很低的TTL值来对网络进行扫描，甚至可以通过防火墙对内网进行扫描，所以应该禁止其出站。一些防火墙可以阻止TTL值小于设定值的数据包进入防火墙。<br>Parameter problem（类型12）：<br>　　禁止其入站和出站。通过使用一个能够进行数据包一致性检查的防火墙，错误和恶意的数据包都会被阻塞。</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>都看到这里了，点个关注好不啦。<br>你的关注，是我最大的动力哦。<br>不定期干货更新。<br>一只相当程序员的1米88<strong>处女座</strong>大可爱。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逐梦offer -- JVM知识总结</title>
      <link href="/blogs/25914.html"/>
      <url>/blogs/25914.html</url>
      
        <content type="html"><![CDATA[<h2 id="4-JVM"><a href="#4-JVM" class="headerlink" title="4. JVM"></a>4. JVM</h2><h3 id="4-1-GC"><a href="#4-1-GC" class="headerlink" title="4.1 GC"></a>4.1 GC</h3><h4 id="1-垃圾收集"><a href="#1-垃圾收集" class="headerlink" title="1. 垃圾收集"></a>1. 垃圾收集</h4><p>基础 ： 可达性分析算法 GC ROOTS </p><ol><li>复制算法</li><li>标记清除 </li><li>标记整理 </li><li>分代收集 – 1. 新生代 ; 2.3 老年代<br>注： Oop Map – 安全点 – 安全区</li></ol><p>以下部分内容 来自 <a href="https://segmentfault.com/u/xixicat" target="_blank" rel="noopener">这个博主的文章</a> </p><h5 id="1-3种基本算法"><a href="#1-3种基本算法" class="headerlink" title="1. 3种基本算法"></a>1. 3种基本算法</h5><p>标记清除法/标记压缩法、复制收集算法、引用计数法</p><p>这里的 <strong>引用计数法</strong> 因为书中讲解少，所以讲一下：<br>引用计数法，它的基本原理是，在每个对象中保存该对象的引用计数，当引用发生增减时对计数进行更新。引用计数的增减，一般发生在变量赋值、对象内容更新、函数结束（局部变量不再被引用）等时间点。当一个对象的引用计数变为0时，则说明它将来不会再被引用，因此可以释放相应的内存空间。<br>缺点：</p><ol><li>无法释放循环引用的对象。</li><li>必须在引用发生增减时对引用计数做出正确的增减，而如果漏掉了某个增减的话，就会引发很难找到原因的内存错误。引用数忘了增加的话，会对不恰当的对象进行释放；而引用数忘了减少的话，对象会一直残留在内存中，从而导致内存泄漏。</li><li>引用计数管理并不适合并行处理: 就如同 <a href="https://3dot141.cn/blogs/29869.html" target="_blank" rel="noopener">ConcurrenHashMap源码分析</a> 中的算法一样，无法在并行情况下对数量进行准确的计算。</li></ol><h5 id="2-3种进阶算法"><a href="#2-3种进阶算法" class="headerlink" title="2. 3种进阶算法"></a>2. 3种进阶算法</h5><ol><li>分代回收<br>分代回收的目的，正是为了在程序运行期间，将GC所消耗的时间尽量缩短。<br>分代回收的基本思路，是利用了一般性程序所具备的性质，即大部分对象都会在短时间内成为垃圾，而经过一定时间依然存活的对象往往拥有较长的寿命。<br>HotSpot 虚拟机中，在新生代用复制算法，老年代使用标记清除/整理算法。</li></ol><p><strong>问题</strong>：如果存在老生代对象对新生代对象的引用。如果只扫描新生代区域的话，那么从老生代对新生代的引用就不会被检测到。<br>这样一来，如果一个年轻的对象只有来自老生代对象的引用，就会被<strong>误认为</strong>已经“死亡”了。<br>因此，在分代回收中，会对对象的更新进行监视，将从老生代对新生代的引用，<br>记录在一个叫做<strong>记录集 Rset（remembered set）的表</strong>中。在执行<strong>小回收(Minor Gc)</strong>的过程中，这个记录集也作为一个根来对待。</p><p><strong>解决方案</strong>：在老生代到新生代的引用产生的瞬间，就必须对该引用进行记录，而负责执行这个操作的子程序，需要被嵌入到所有涉及对象更新操作的地方。<br>这个负责记录引用的子程序是这样工作的。设有两个对象：A和B，当对A的内容进行改写，并加入对B的引用时，<br>如果①A属于老生代对象，②B属于新生代对象，则将该引用添加到记录集中。<br>这种检查程序需要对所有涉及修改对象内容的地方进行保护，因此被称为<strong>写屏障（Write barrier）</strong>。</p><ol start="2"><li><p>增量回收<br>为了维持程序的实时性，不等到GC全部完成，而是将GC操作细分成多个部分逐一执行。这种方式被称为增量回收</p></li><li><p>并行回收<br>并行回收的基本原理是，是在原有的程序运行的同时进行GC操作，这一点和增量回收是相似的。<br>不过，相对于在一个CPU上进行GC任务分割的增量回收来说，并行回收可以利用多CPU的性能，尽可能让这些GC任务并行（同时）进行。</p></li></ol><h5 id="3-Card-Table-数据结构"><a href="#3-Card-Table-数据结构" class="headerlink" title="3. Card Table 数据结构"></a>3. Card Table 数据结构</h5><p>为了支持高频率的新生代的回收，虚拟机使用一种叫做卡表（Card Table）的数据结构.<br>卡表作为一个<strong>比特位</strong>的集合，每一个比特位可以用来表示年老代的某一区域中的所有对象是否持有新生代对象的引用。<br><img src="images/15476297695927.jpg" alt=""></p><p><strong>一、作用</strong><br>卡表中每一个位表示年老代4K的空间，<br>卡表记录为 0 的年老代区域没有任何对象指向新生代，<br>卡表记录为 1 的区域才有对象包含新生代引用，<br>因此在新生代GC时，只需要扫描卡表位为1所在的年老代空间。使用这种方式，可以大大加快新生代的回收速度。<br><img src="images/15476298240463.jpg" alt=""></p><p><strong>二、结构</strong><br>卡表是个单字节数组，每个数组元素对应堆中的一张卡。<br>每次年老代对象中某个引用新生代的字段发生变化时，Hotspot VM就必须将该卡所对应的卡表元素设置为适当的值，从而将该引用字段所在的卡<strong>标记为脏</strong>。<br>如下图：<br><img src="images/15476298599833.jpg" alt=""><br>在Minor GC过程中，垃圾收集器只会在脏卡中扫描查找年老代-新生代引用。</p><p>Hotspot VM的字节码解释器和JIT编译器使用<strong>写屏障</strong> 维护卡表。<br><strong>写屏障 (Write barrier)</strong> 是一小段将卡状态设置为脏的代码。 解释器每次执行更新引用的字节码时，都会执行一段写屏障，JIT编译器在生成更新引用的代码后，也会生成一段写屏障。<br>虽然写屏障使得应用线程<strong>增加了 – 性能开销</strong>，但Minor GC变快了许多，整体的垃圾收集效率也提高了许多，通常应用的吞吐量也会有所改善。</p><h5 id="4-评价指标"><a href="#4-评价指标" class="headerlink" title="4. 评价指标"></a>4. 评价指标</h5><blockquote><p>1、 吞吐量<br>应用系统的生命周期内，应用程序所花费的时间和系统总运行时间的比值<br>系统总运行时间=应用程序耗时+GC耗时<br>2、 垃圾回收器负载<br>垃圾回收器负载=GC耗时/系统总运行时间<br>3、 停顿时间<br>垃圾回收器运行时，应用程序的暂停时间<br>4、 垃圾回收频率<br>垃圾回收器多长时间运行一次。一般而言，频率越低越好，通常增大堆空间可以有效降低垃圾回收发生的频率，但是会增加回收时产生的停顿时间。<br>5、 反应时间<br>当一个对象成为垃圾后，多长时间内，它所占用的内存空间会被释放掉。</p></blockquote><h4 id="2-内存分配"><a href="#2-内存分配" class="headerlink" title="2. 内存分配"></a>2. 内存分配</h4><h5 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h5><p>-Xms 堆大小<br>-Xmx 可扩展大小<br>-Xmn 老年代大小<br>-XX:SurvivorRatio Eden 区与 Survivor 区大小比例</p><p><strong>注： surivor 区分为 from 区与 to 区</strong></p><pre><code>- 在GC开始的时候，对象只会存在于Eden区和名为“From”的Survivor区，Survivor区“To”是空的。- 紧接着进行GC，Eden区中所有存活的对象都会被复制到“To”，而在“From”区中，仍存活的对象会根据他们的年龄值来决定去向。- 年龄达到一定值(年龄阈值，可以通过-XX:MaxTenuringThreshold来设置)的对象会被移动到年老代中，没有达到阈值的对象会被复制到“To”区域- 经过这次GC后，Eden区和From区已经被清空。这个时候，“From”和“To”会交换他们的角色，也就是新的“To”就是上次GC前的“From”- 新的“From”就是上次GC前的“To”。- 不管怎样，都会保证名为To的Survivor区域是空的。Minor GC会一直重复这样的过程，直到“To”区被填满，“To”区被填满之后，会将所有对象移动到年老代中。</code></pre><ol><li>大对象直接进入老年代 ：很长的字符串以及数组</li><li>长期存活的对象进入老年代 -XX:MaxTenuringThreshold</li><li>动态对象年龄判定 ：如果在Survivor 中，相同年龄所有对象的大小总和大于 Survivor 空间的一半， 大于或等于此年龄的对象就可以直接进入老年代。</li><li>分配担保机制 <ol><li>检查老年代最大可用连续空间 与 新生代所有对象的总空间 –&gt; yes –&gt; MinorGc</li><li>HandlePromotionFailure 是否允许担保失败 –&gt; yes –&gt; 检查老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小 –&gt; MinorGC</li></ol></li></ol><h5 id="2-Minor-GC-，Major-GC-，-Full-GC-触发条件"><a href="#2-Minor-GC-，Major-GC-，-Full-GC-触发条件" class="headerlink" title="2. Minor GC ，Major GC ， Full GC 触发条件"></a>2. Minor GC ，Major GC ， Full GC 触发条件</h5><p>堆内存空间： Eden、Survivor 和 Tenured/Old 空间</p><p>Minor GC触发条件：当Eden区满时，触发Minor GC。<br>Major GC触发条件：<a href="http://www.importnew.com/15820.html" target="_blank" rel="noopener">http://www.importnew.com/15820.html</a><br>Full GC触发条件：<br>（1）调用System.gc时，系统建议执行Full GC，但是不必然执行<br>（2）老年代空间不足<br>（3）方法区空间不足<br>（4）通过Minor GC后进入老年代的平均大小大于老年代的可用内存<br>（5）由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</p><h4 id="3-垃圾收集器"><a href="#3-垃圾收集器" class="headerlink" title="3. 垃圾收集器"></a>3. 垃圾收集器</h4><h5 id="1-CMS-Concurrent-Mark-Sweep"><a href="#1-CMS-Concurrent-Mark-Sweep" class="headerlink" title="1. CMS (Concurrent Mark Sweep)"></a>1. CMS (Concurrent Mark Sweep)</h5><ol><li>4个步骤： </li></ol><ul><li>初始标记：标记 GC ROOTS 可以直接关联的对象</li><li>并发标记：GC TRACING </li><li>重新标记：修正并发标记期间，用户程序继续动作而导致的标记产生变动的那一部分对象的标记记录</li><li>并发清除</li></ul><ol start="2"><li>3个缺点：</li></ol><ul><li>对 CPU 资源非常敏感</li><li>无法处理浮动垃圾(并发清理阶段，用户线程仍旧在运行，因此一直在产生垃圾，而无法在当次收集中处理掉它们)</li><li>产生大量的空间碎片</li></ul><h5 id="2-G1-Garbage-First"><a href="#2-G1-Garbage-First" class="headerlink" title="2. G1 (Garbage-First)"></a>2. G1 (Garbage-First)</h5><p>4个特点：</p><ul><li>并行与并发： 使用多个 CPU 或 CPU 核心来缩短 Stop-The-World 停顿的时间</li><li>分代收集</li><li>空间整合： 基于标记-整理算法</li><li>可预测的停顿： 可以建立<strong>可预测的停顿时间模型</strong>，让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在垃圾收集上的时间不超过 N 毫秒。</li></ul><p>4个步骤：</p><ul><li>初始标记</li><li>并发标记</li><li>最终标记</li><li><strong>筛选回收</strong>： 首先对各个 Region 的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。</li></ul><hr><p><strong>G1的GC模式</strong></p><blockquote><p>Young GC：选定所有年轻代里的Region。通过控制年轻代的region个数，即年轻代内存大小，来控制young GC的时间开销。<br>Mixed GC：选定所有年轻代里的Region，外加根据global concurrent marking统计得出收集收益高的若干老年代Region。在用户指定的开销目标范围内尽可能选择收益高的老年代Region。<br><strong>注意：</strong>Mixed GC不是full GC，它只能回收部分老年代的Region，如果mixed GC实在无法跟上程序分配内存的速度，导致老年代填满无法继续进行Mixed GC，就会使用serial old GC（full GC）来收集整个GC heap。</p></blockquote><p><strong>global concurrent marking</strong>:类似CMS，为Mixed GC提供标记服务。<br>四个过程：</p><ul><li>初始标记（initial mark，STW）。它标记了从GC Root开始直接可达的对象。</li><li>并发标记（Concurrent Marking）。这个阶段从GC Root开始对heap中的对象标记，标记线程与应用程序线程并行执行，并且收集各个Region的存活对象信息。</li><li>最终标记（Remark，STW）。标记那些在并发标记阶段发生变化的对象，将被回收。</li><li>清除垃圾（Cleanup）。清除空Region（没有存活对象的），加入到free list。</li></ul><hr><p>G1 中的几个重要概念 – <a href="https://tech.meituan.com/g1.html" target="_blank" rel="noopener">原文链接–美团点评</a></p><p><strong>一、Region</strong></p><blockquote><p>传统的GC收集器将连续的内存空间划分为新生代、老年代和永久代（JDK 8去除了永久代，引入了元空间Metaspace），这种划分的特点是各代的存储地址（逻辑地址，下同）是连续的。</p></blockquote><p>如下图所示：<br><img src="http://ovmspkp0s.bkt.clouddn.com/201710151610_922.png" alt=""><br>而G1的各代存储地址是不连续的，每一代都使用了n个不连续的大小相同的Region，每个Region占有一块连续的虚拟内存地址。如下图所示：<br><img src="http://ovmspkp0s.bkt.clouddn.com/201710151610_743.png" alt=""><br>在上图中，我们注意到还有一些Region标明了H，它代表Humongous，这表示这些Region存储的是巨大对象（humongous object，H-obj），即大小大于等于region一半的对象。H-obj有如下几个特征：</p><ul><li>H-obj直接分配到了old gen (老年代)，防止了反复拷贝移动。</li><li>H-obj在global concurrent marking 阶段的 <strong>cleanup</strong> 和 <strong>full GC</strong> 阶段回收。</li><li>在分配H-obj之前先检查是否超过 initiating heap occupancy percent和the marking threshold, 如果超过的话，就启动 global concurrent marking，为的是提早回收，防止 evacuation failures 和 full GC。<br>为了减少连续H-objs分配对GC的影响，需要把大对象变为普通的对象，建议增大Region size。</li></ul><hr><p><strong>二、SATB</strong></p><blockquote><p>全称是Snapshot-At-The-Beginning，由字面理解，是GC开始时活着的对象的一个快照。它是通过Root Tracing得到的，<strong>作用是</strong>维持并发GC的正确性。</p></blockquote><p>那么它是怎么维持并发GC的正确性的呢？根据三色标记算法，我们知道对象存在三种状态：</p><ul><li>白：对象没有被标记到，标记阶段结束后，会被当做垃圾回收掉。</li><li>灰：对象被标记了，但是它的field还没有被标记或标记完。</li><li>黑：对象被标记了，且它的所有field也被标记完了。</li></ul><p>由于并发阶段的存在，<strong>Mutator(更改器和)</strong>Garbage Collector线程同时对对象进行修改，就会出现白对象漏标的情况，这种情况发生的前提是：</p><ul><li>Mutator赋予一个黑对象该白对象的引用。</li><li>Mutator删除了所有从灰对象到该白对象的直接或者间接引用。</li></ul><p>对于第一个条件，在并发标记阶段，如果该白对象是new出来的，并没有被灰对象持有，那么它会不会被漏标呢？Region中有两个top-at-mark-start（TAMS）指针，分别为prevTAMS和nextTAMS。在TAMS以上的对象是新分配的，这是一种隐式的标记。<br>对于在GC时已经存在的白对象，如果它是活着的，它必然会被另一个对象引用，即条件二中的灰对象。如果灰对象到白对象的直接引用或者间接引用被替换了，或者删除了，白对象就会被漏标，从而导致被回收掉，这是非常严重的错误，所以SATB破坏了第二个条件。<br>也就是说，一个对象的引用被替换时，可以通过 write barrier 将旧引用记录下来。<strong>(并没有 看懂在说什么)</strong></p><p>SATB也是有副作用的，如果被替换的白对象就是要被收集的垃圾，这次的标记会让它躲过GC，这就是float garbage。因为SATB的做法精度比较低，所以造成的float garbage也会比较多。</p><hr><p><strong>三、RSet</strong></p><blockquote><p>全称是Remembered Set，是辅助GC过程的一种结构，典型的空间换时间工具，和Card Table有些类似。<br>还有一种数据结构也是辅助GC的：Collection Set（CSet），它记录了 <strong>GC要收集的Region集合</strong> ，集合里的Region可以是任意年代的。<br>在GC的时候，对于old-&gt;young和old-&gt;old的跨代对象引用，只要扫描对应的CSet中的RSet即可。</p></blockquote><p>Rset : 属于points-into结构（谁引用了我的对象）<br>Card Table : 则是一种points-out（我引用了谁的对象）的结构<br>G1的RSet是在Card Table的基础上实现的：每个Region会记录下别的Region有指向自己的指针，并标记这些指针分别在哪些Card的范围内。<br>这个RSet其实是一个Hash Table，<strong>Key</strong> – 别的Region的<strong>起始地址</strong>，<strong>Value</strong>是一个集合 – 里面的元素是<strong>Card Table的Index</strong>。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201710151908_543.png" alt=""><br>这里解释一下 :<br>上图有三个 Region 。红色代表 Rset ， 灰色大方框代表 Card Table。<br>Region2 的 Rset2 中有两个 Region 的起始地址，分别指向 Region1  , Region3。 – 代表 Region1 与 Region3 引用了我的对象。<br>Region1 的 Card Table 位置上，存在一个 对 Region2 的引用。 – 代表 Region1 引用了 Region2 的对象。<br>Region3 同理。</p><p><strong>作用：</strong><br>在做YGC(Minor GC)的时候，只需要选定young generation region的RSet作为根集，这些RSet记录了old-&gt;young的跨代引用，避免了扫描整个old generation。<br>而mixed gc的时候，old generation中记录了old-&gt;old的RSet，young-&gt;old的引用由扫描全部young generation region得到，这样也不用扫描全部old generation region。所以RSet的引入大大减少了GC的工作量。</p><hr><p><strong>四、Pause Prediction Model</strong></p><blockquote><p>G1 uses a pause prediction model to meet a user-defined pause time target and selects the number of regions to collect based on the specified pause time target.<br>G1 GC是一个响应时间优先的GC算法，它与CMS最大的不同是，用户可以设定整个GC过程的<strong>期望停顿时间</strong>，参数<strong>‘-XX:MaxGCPauseMillis’</strong>指定一个G1收集过程目标停顿时间，默认值200ms。<br>G1 通过这个模型统计计算出来的历史数据来预测本次收集需要选择的Region数量，从而尽量满足用户设定的目标停顿时间。<br>停顿预测模型是<strong>以衰减标准偏差为理论基础</strong>实现的。<br>这里就不详细介绍了，有兴趣的，可以看 <a href="https://tech.meituan.com/g1.html" target="_blank" rel="noopener">美团大神的文章</a></p></blockquote><h3 id="4-2-Java-内存"><a href="#4-2-Java-内存" class="headerlink" title="4.2 Java 内存"></a>4.2 Java 内存</h3><ol><li>程序计数器</li><li>虚拟机栈 ： 局部变量表、操作数栈、动态链接、方法出口</li><li>本地方法栈 ： native 方法</li><li>堆 ： 所有的对象实例以及数组</li><li>方法区 ： 已被加载的类信息、常量、静态变量、即时编译器编译后的代码</li><li>运行时常量池 ： 编译期生成的各种字面量和符号引用</li><li>直接内存 ： NIO类引入了一种基于通道（channel) 与 缓冲区(buffer) 的 I/O 方式，使用 Native 函数库直接分配堆外内存 ， 通过存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。</li></ol><h4 id="1-Java-对象的内存布局"><a href="#1-Java-对象的内存布局" class="headerlink" title="1. Java 对象的内存布局"></a>1. Java 对象的内存布局</h4><ol><li>对象头 : 哈希码(2bit)-分代年龄(4)、<strong>轻量级锁定（标志位 00）</strong>、重量级锁定、GC标记、<strong>可偏向（标志位 01）</strong>，<strong>补充</strong>： 类型指针、数组长度</li><li>实例数据 ：</li><li>对齐填充</li></ol><h4 id="2-OOM-异常"><a href="#2-OOM-异常" class="headerlink" title="2. OOM 异常"></a>2. OOM 异常</h4><ol><li>堆溢出： 不断创建对象，并且存在可达路径，不被清除。那么对象在达到最大堆容量限制后就会产生内存溢出<br>通过 内存映像分析工具 （Eclipse Memory Analyzer） 对 Dump 出来的堆转存储快照进行分析。判断是内存泄漏还是内存溢出。</li><li>虚拟机栈与本地方法栈溢出：<br>如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出 StackOverFlowError 异常。<br>如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出 OutOfMemoryError 异常。</li><li>方法区<br>方法区存放 Class 的相关信息。如果存在大量的类 填满 方法区。则会产生溢出。<br>通过 动态代理 或 通过 CGLIB 动态生成大量的类，以及大量 JSP与 动态JSP 文件的应用 。</li></ol><h4 id="3-OOM-异常的解决"><a href="#3-OOM-异常的解决" class="headerlink" title="3. OOM 异常的解决"></a>3. OOM 异常的解决</h4><p>一. 可通过命令定期抓取heap dump或者启动参数OOM时自动抓取heap dump文件。<br>二. 通过对比多个heap dump，以及heap dump的内容，分析代码找出内存占用最多的地方。<br>三. 分析占用的内存对象，是否是因为错误导致的内存未及时释放，或者数据过多导致的内存溢出。</p><h3 id="4-3-类加载器"><a href="#4-3-类加载器" class="headerlink" title="4.3 类加载器"></a>4.3 类加载器</h3><h4 id="1-类加载过程"><a href="#1-类加载过程" class="headerlink" title="1. 类加载过程"></a>1. 类加载过程</h4><ul><li>加载 ：可以通过自定义类加载器参与</li></ul><ol><li>通过一个类的全限定名获取定义此类的二进制字节流</li><li>将这个字节流代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口</li></ol><ul><li>验证</li></ul><ol><li>文件格式验证</li><li>元数据验证 : 语义校验</li><li>字节码验证 ：逻辑校验</li><li>符号引用验证 ：发生在解析阶段中，将符号引用转化为直接引用</li></ol><ul><li>准备 ： 为类变量分配内存并设置类变量初始值的阶段</li><li>解析 : 将符号引用 替换 为直接引用的过程。</li><li>初始化 ： <clinit>() 类构造器 : 将类中的赋值语句与静态代码块合并而成 – <init>() 实例构造器</init></clinit></li></ul><h4 id="2-双亲委派模型"><a href="#2-双亲委派模型" class="headerlink" title="2. 双亲委派模型"></a>2. 双亲委派模型</h4><p>启动（Bootstrap）类加载器：采用 <strong>C++</strong> 实现，它负责将 &lt;Java_Runtime_Home&gt;/lib下面的核心类库或-Xbootclasspath选项指定的jar包加载到内存中。由于启动类加载器到本地代码的实现，开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作。编写自定义类加载器时，如果需要把加载请求委派给启动类加载器，直接使用 null 代替.</p><p>扩展（Extension）类加载器：扩展类加载器是由Sun的ExtClassLoader（sun.misc.Launcher$ExtClassLoader）实现的。它负责将&lt; Java_Runtime_Home &gt;/lib/ext或者由系统变量-Djava.ext.dir指定位置中的类库加载到内存中。开发者可以直接使用标准扩展类加载器。   </p><p>系统（System）类加载器：系统类加载器是由 Sun的 AppClassLoader（sun.misc.Launcher$AppClassLoader）实现的。它负责将系统类路径java -classpath或-Djava.class.path变量所指的目录下的类库加载到内存中。开发者可以直接使用系统类加载器。</p><p>工作过程：<br>如果一个类加载器收到了类的加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成。直到顶层的启动类加载器中，当父加载器反馈自己无法完成这个加载请求时，子加载器会尝试自己去加载。</p><h4 id="3-线程上下文类加载器"><a href="#3-线程上下文类加载器" class="headerlink" title="3. 线程上下文类加载器"></a>3. 线程上下文类加载器</h4><p>方便 JNDI 服务：SPI 的接口是 Java 核心库的一部分，是由引导类加载器来加载的；SPI 实现的 Java 类一般是由系统类加载器来加载的。引导类加载器是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库。它也不能代理给系统类加载器，因为它是系统类加载器的祖先类加载器。也就是说，类加载器的代理模式无法解决这个问题。<br>解决方法：Java 应用的线程的上下文类加载器 <strong>默认</strong> 就是系统上下文类加载器。在 SPI 接口的代码中使用线程上下文类加载器，就可以成功的加载到 SPI 实现的类。线程上下文类加载器在很多 SPI 的实现中都会用到。<br>Java默认的线程上下文类加载器是系统类加载器(AppClassLoader)。以下代码摘自sun.misc.Launch的无参构造函数Launch()。<br>可以通过 java.lang.Thread类 的 <strong>setContextClassLoader()</strong> 设置。</p><h4 id="4-OSGI（open-service-gataway-initiative"><a href="#4-OSGI（open-service-gataway-initiative" class="headerlink" title="4. OSGI（open service gataway initiative)"></a>4. OSGI（open service gataway initiative)</h4><p>方便执部署的实现。可以在不重启服务器的情况下，对其中的逻辑代码进行更新。<br>由 父类加载器 与 Bundle 组成 , 每个 Bundle 的功能都是 发布 export 与依赖 import。从而形成复杂的网状结构<br><strong>原理：</strong><br>OSGi 中的每个模块都有对应的一个类加载器。它负责加载模块自己包含的 Java 包和类。<br>当它需要加载 Java 核心库的类时（以 java开头的包和类），它会代理给父类加载器（通常是启动类加载器）来完成。<br>当它需要加载所导入的 Java 类时，它会代理给导出此 Java 类的模块来完成加载。</p><h4 id="5-Tomcat"><a href="#5-Tomcat" class="headerlink" title="5. Tomcat"></a>5. Tomcat</h4><p>在双亲委派模型的基础上加入了 <strong>Common类加载器，Catalina类加载器，Shared类加载器，WebApp类加载器，Jsp类加载器</strong><br>Common类加载器， /common 目录 被 Tomcat 与 所以 Web 应用程序共同使用<br>Catalina类加载器， /server 目录中， 被 Tomcat 使用<br>Shared类加载器， /shared 目录中 ，被所有 Web 应用程序共同使用<br>WebApp类加载器，Jsp类加载器 ， /WebApp/WEB-INF 目录中，只能被此 Web 应用程序使用。</p><h3 id="4-4-解释器与编译器"><a href="#4-4-解释器与编译器" class="headerlink" title="4.4 解释器与编译器"></a>4.4 解释器与编译器</h3><h4 id="1-编译模式"><a href="#1-编译模式" class="headerlink" title="1. 编译模式"></a>1. 编译模式</h4><ol><li>Mixed Mode – 混合模式<br>默认为混合模式，解释器与编译器搭配使用。</li><li>Interpreted Mode – 解释模式<br>使用 <strong>“-Xint”</strong> 参数。只使用解释。</li><li>Compiled Mode – 编译模式<br>使用 <strong>“-Xcomp”</strong> 参数。 优先采用编译，当编译无法进行时，使用解释。</li></ol><p><strong>-version</strong> 命令，可以输出显示这三种模式</p><h4 id="2-分层编译-Tiered-Compilation"><a href="#2-分层编译-Tiered-Compilation" class="headerlink" title="2. 分层编译(Tiered Compilation)"></a>2. 分层编译(Tiered Compilation)</h4><p>JDK1.7 中的 Server 模式虚拟机中被作为默认编译策略。</p><ol><li>0层，程序解释执行，解释器不开启性能监控功能(Profiling)，可触发第一层编译</li><li>1层，也叫C1 编译(下文有解释)，将字节码编译为本地代码，进行简单、可靠的优化</li><li>2层，C2编译。</li></ol><h4 id="3-OSR编译"><a href="#3-OSR编译" class="headerlink" title="3. OSR编译"></a>3. OSR编译</h4><p>因为存在多次执行的循环体，所以触发 OSR 编译，以<strong>整个方法</strong> 作为编译对象。<br>发生在方法执行过程中，所以叫( On Stack Replacement ) 方法栈帧还在栈上，方法就被替换了。</p><h4 id="4-编译对象以及触发条件"><a href="#4-编译对象以及触发条件" class="headerlink" title="4. 编译对象以及触发条件"></a>4. 编译对象以及触发条件</h4><p><strong>热点代码</strong>的分类：</p><ol><li>被多次调用的方法</li><li>被多次执行的方法体 – OSR 编译</li></ol><p><strong>热点探测(Hot Spot Detection)</strong></p><ol><li>基于采样 : 如果周期性的检查各个线程的栈顶，如果发现某个方法经常出现在栈顶，则这个方法就是“热点方法”。</li><li>基于计数器 – HotSpot 虚拟机中采用。<ul><li>原理： 为每个方法建立计数器，统计方法的次数，如果执行次数超过一定的阈值，就认为它是“热点方法”</li><li>计数器分类： <ul><li>方法调用计数器(Invocation Counter) :<br>  <strong>统计一段时间内</strong>，方法被调用的次数，如果超过时间限度，则将这个方法的调用计数器减少一半，称为<strong>衰减</strong></li><li>回边计数器(Back Edge Counter) ： 统计一个方法中循环体被执行的次数 – OSR 编译<br>  在字节码中遇到控制流向后跳转的指令，称为回边。</li></ul></li></ul></li></ol><h4 id="5-优化措施"><a href="#5-优化措施" class="headerlink" title="5. 优化措施"></a>5. 优化措施</h4><p>hotspot中内嵌有2个JIT编译器，分别为Client Compiler，Server Compiler，但大多数情况下我们称之为C1编译器和C2编译器。</p><h5 id="5-1-C1-编译器"><a href="#5-1-C1-编译器" class="headerlink" title="5.1 C1 编译器"></a>5.1 C1 编译器</h5><p>client compiler，又称C1编译器，较为轻量，只做少量性能开销比较高的优化，它占用内存较少，适合于桌面交互式应用。<br>在寄存器分配策略上，JDK6以后采用的为<strong>线性扫描寄存器分配算法</strong>，其他方面的优化，主要有方法内联、去虚拟化、冗余消除等。</p><p>A、方法内联</p><blockquote><p>多个方法调用，执行时要经历多次参数传递，返回值传递及跳转等，C1采用方法内联，把调用到的方法的指令直接植入当前方法中。-XX:+PringInlining来查看方法内联信息，-XX:MaxInlineSize=35控制编译后文件大小。<br>B、去虚拟化<br>是指在装载class文件后，进行类层次的分析，如果发现类中的方法只提供一个实现类，那么对于调用了此方法的代码，也可以进行方法内联，从而提升执行的性能。<br>C、冗余消除<br>在编译时根据运行时状况进行代码折叠或消除。</p></blockquote><h5 id="5-2-C2-编译器"><a href="#5-2-C2-编译器" class="headerlink" title="5.2 C2 编译器"></a>5.2 C2 编译器</h5><p>Server compiler，称为C2编译器，较为重量，采用了大量传统编译优化的技巧来进行优化，占用内存相对多一些，适合服务器端的应用。和C1的不同主要在于寄存器分配策略及优化范围.<br>寄存器分配策略上C2采用的为传统的<strong>图着色寄存器分配算法</strong>，由于C2会收集程序运行信息，因此其优化范围更多在于全局优化，不仅仅是一个方块的优化。<br>收集的信息主要有：<strong>分支的跳转/不跳转的频率、某条指令上出现过的类型、是否出现过空值、是否出现过异常等</strong>。</p><p><strong>逃逸分析(Escape Analysis)</strong> 是C2进行很多优化的基础，它根据运行状态来判断方法中的变量是否会被外部读取，如不会则认为此变量是不会逃逸的，那么在编译时会做标量替换、栈上分配和同步消除等优化。<br>如果证明一个对象不会逃逸到<strong>方法或线程</strong>之外，则：</p><pre><code>- 栈上分配(Stack Allocation) ：确定不会逃逸到**方法外**，让这个对象在栈上分配内存，对象占用的内存空间可以随栈帧的出栈而销毁。- 同步消除(Synchronization Elimination) ：确定不会逃逸到**线程外**，则无法被其他线程访问，所以可以取消同步措施。- 标量替换(Scalar Repalcement) :     标量(Scalar)指一个数据无法再分解成更小的数据来表示 -- Java 中的原始数据类型    聚合量(Aggregate)指一个数据可以继续分解 -- Java 中的对象    **原理：**直接创建若干个可以被方法使用的成员变量来替代。</code></pre><h5 id="5-3-其他措施（注：-不知是-C1-还是-C2"><a href="#5-3-其他措施（注：-不知是-C1-还是-C2" class="headerlink" title="5.3 其他措施（注： 不知是 C1 还是 C2)"></a>5.3 其他措施（注： 不知是 C1 还是 C2)</h5><ol><li>语言无关的经典优化技术 – 公共子表达式消除(Common Subexpression Elimination)<blockquote><p>如果一个表达式E 已经计算过，并且从先前的计算 到现在 值未曾改变，那么如果 E 再次出现，则可以直接使用之前的表达式结果，代替 E 。</p></blockquote></li><li>语言相关的经典优化技术 – 数组边界检查消除(Array Bounds Checking Elimination)<br><strong>这个不是很了解，做一个重点。。。 以后整理</strong></li></ol><h3 id="4-零散知识点"><a href="#4-零散知识点" class="headerlink" title="4. 零散知识点"></a>4. 零散知识点</h3><h4 id="1-静态多分派与动态单分派"><a href="#1-静态多分派与动态单分派" class="headerlink" title="1. 静态多分派与动态单分派"></a>1. 静态多分派与动态单分派</h4><p>静态分派 ： 依靠静态类型 定位方法。<br>编译阶段：Human man = new Man();  // 静态类型为 Human<br>运行阶段：man.sayHello() // 动态类型为 Man</p><p>重载的优先级<br>sayHello(char arg);<br>char -&gt; int -&gt; long -&gt; float -&gt; double // 不可转化为 byte short ， 因为char 转化是不安全的。<br>-&gt; Character -&gt; Serializable/Comparable -&gt; Object -&gt; char…(变长参数)</p><p>宗量：方法的接收者与方法的参数统称为宗量<br>单分派 根据一个宗量对目标方法进行选择<br>多分派 根据多个宗量对目标方法进行选择</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQ</span></span>&#123;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">_360</span></span>&#123;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hardChoice</span><span class="params">(QQ arg)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hardChoice</span><span class="params">(_360 arg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hardChoice</span><span class="params">(QQ arg)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hardChoice</span><span class="params">(_360 arg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Father father = <span class="keyword">new</span> Father();</span><br><span class="line">Father son = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态多分派 - 编译 ： 方法的接收者 Father - Son, 参数 QQ - _360</span></span><br><span class="line">father.hardChoice(_360);</span><br><span class="line"><span class="comment">// 动态多分派 - 运行 ： 已经确定 参数为 QQ ，再判断 实际类型 , son的实际类型为 Son 。</span></span><br><span class="line">son.hardChoice(QQ);</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>都看到这里了，点个<strong>关注</strong>,点波<strong>赞</strong>再走，QAQ。<br>你的小手<strong>轻点</strong>，是我最大的动力哦。</p><blockquote><p>一只想当程序员的1米88<strong>处女座</strong>大可爱<strong>如此说</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>版本控制 -- SVN 整合 idea</title>
      <link href="/blogs/25108.html"/>
      <url>/blogs/25108.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在 GIT 确实是最火的 版本控制。 SVN 有被淘汰的感觉。但是。在小型团队中，不需要这种大范围的代码提交以及修改的情况下。<br>用 SVN 的效率并不会弱于 GIT 。尤其是目前 GIT 偶尔会出现一些小问题。(我不知道大家有没有，不过我在使用的时候，偶尔会产生连接不上 GIT，或者网速奇慢无比的情况。估计是 … 墙？)<br><a id="more"></a></p><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h2><p>首先打开 svn 官网(<a href="http://subversion.apache.org/packages.html#windows" target="_blank" rel="noopener">http://subversion.apache.org/packages.html#windows</a>)<br>然后找到适合自己的 svn 版本下载。<br>这里，我下载的是 <strong>visualSVN</strong>，所以以下都以 <strong>visualSVN Server</strong>为基准<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709032326_536.png" alt=""><br>然后可以选择个人使用版，免费使用，尊重版权</p><h2 id="2-基本命令"><a href="#2-基本命令" class="headerlink" title="2. 基本命令"></a>2. 基本命令</h2><p><strong>注：</strong> 以下所有的命令都默认带有前缀 <strong>svn</strong></p><ol><li>svnadmin create 创建版本库<br>   注： <code>svnadmin create .</code>：在当前位置建立版本库</li><li>svnserve -d -r 目录: 使用命令svnserve启动服务</li><li>checkout 从版本库创建工作副本<br> 用于从另外一台计算机上初始化目录。</li><li>update <strong>从版本库</strong>更新工作副本</li><li>add 添加文件</li><li>commit <strong>对版本库</strong>进行更改<br>   -m : 添加注释</li><li>status 复查变化</li><li>revert 修复错误,重置操作,版本回退<br>   -R : 恢复目录</li><li>merge 自动处理安全合并</li><li>resolve 解决冲突</li><li>分支操作<ul><li>copy 创建分支<br><code>copy main/  branches/my_branch</code>: 为 main 创建分支 branches/my_branch</li><li>cd 切换分支<br><code>cd branches/my_branch</code>: 切换到分支 branches/my_branch</li><li>merge 融合分支<br><code>1.cd main - 2. update - 3.merge ../branches/my_branch</code>: 切换到分支main,然后更新，再整合分支    </li></ul></li><li>创建标签<ul><li><code>copy main/  tags/01</code>：创建新目录tags</li></ul></li><li>查看历史：<ul><li>log: 用来展示svn 的版本作者、日期、路径等等。</li><li>diff: 用来显示特定修改的行级详细信息。</li><li>cat: 取得在特定版本的某文件显示在当前屏幕。</li><li>list: 显示一个目录或某一版本存在的文件。</li></ul></li></ol><p>下面介绍图形界面 <strong>visualSVN Server</strong> 。</p><h2 id="3-visualSVN-Server介绍"><a href="#3-visualSVN-Server介绍" class="headerlink" title="3. visualSVN Server介绍"></a>3. visualSVN Server介绍</h2><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709032335_598.png" alt="1"><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709032338_815.png" alt="2"><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709032341_789.png" alt="3"><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709032344_493.png" alt="4"><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709032350_416.png" alt="5"></p><p>直接在 visualSVN Server 中 可以完成一切关于SVN的操作，更加的方便。</p><h2 id="4-整合-idea"><a href="#4-整合-idea" class="headerlink" title="4. 整合 idea"></a>4. 整合 idea</h2><h3 id="1-上传至服务端"><a href="#1-上传至服务端" class="headerlink" title="1. 上传至服务端"></a>1. 上传至服务端</h3><p>当你写好一个项目，准备开始上传至SVN时，应该怎么办呢<br>首先打开一个新的项目，然后按照图示操作</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709040806_594.png" alt=""></p><p>选择一个仓库，进行上传<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709040810_472.png" alt=""></p><p>然后 share 。会让你选择 模式与 帐户密码<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709040811_726.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709040814_546.png" alt=""></p><p>下面完成真正的上传操作<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709040818_452.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709040823_999.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709040824_227.png" alt=""></p><ul><li><code>Reformat code</code> 格式化代码，如果是 Web 开发建议不要勾选，因为格式化 JSP 类文件，格式化效果不好。如果都是 Java 类则可以安心格式化。</li><li><code>Rearrange code</code> 重新编排代码，IntelliJ IDEA 支持各种复杂的编排设置选项，这个会在后面说。设置好了编码功能之后，这里就可以尝试勾选这个进行自动编排。</li><li><code>Optimize imports</code> 优化导入包，会在自动去掉没有使用的包。这个建议都勾选，这个只对 Java 类有作用，所以不用担心有副作用。</li><li><code>Perform code analysis</code> 进行代码分析，这个建议不用在提交的时候处理，而是在开发完之后，要专门养成对代码进行分析的习惯。IntelliJ IDEA 集成了代码分析功能。</li><li><code>Check TODO</code> 检查代码中的 TODO。</li><li><code>Cleanup</code> 清除下版本控制系统，去掉一些版本控制系统的错误信息，建议勾选。</li></ul><blockquote><p> 注： 这里的 Perform code analysis 是默认勾选的，但是这个有点坑，可能会出现你在代码里写的是对的，完全可以跑起来，但是不能上传的情况，所以，<strong>真的不建议大家勾选</strong>，其他的，看个人喜好</p></blockquote><p>这样，将服务端的代码就创建好了，下面开始模拟在客户端 checkout 的情况</p><h3 id="2-从服务端整合代码"><a href="#2-从服务端整合代码" class="headerlink" title="2. 从服务端整合代码"></a>2. 从服务端整合代码</h3><p>首先设置<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171909_478.png" alt=""><br>进入后，是这一个界面<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171910_518.png" alt=""></p><p>这里是为了，解决以下这种错误的出现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot load supported formats: Cannot run program <span class="string">"svn"</span>; CreateProcess error =<span class="number">2</span>,系统找不到指定的文件</span><br></pre></td></tr></table></figure></p><p>然后，我们继续</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709040001_166.png" alt=""></p><p>在下面的这个框里，写下你在 <strong>visualSVN</strong> 界面下找到的 url，然后点击 <strong>checkout</strong></p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709040003_88.png" alt=""></p><p>注意，如果，你设置了权限的话，需要输入，才能连接<br>然后按下图操作</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709040007_188.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709040008_219.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709040855_689.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709040011_461.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709040857_421.png" alt=""></p><p>当出现这种情况时，有以下两种方式使用。</p><ol><li>继续创建</li><li>放弃，导出到对应的项目名称的文件夹下。</li></ol><p>这个博主(<a href="http://blog.csdn.net/qq_27093465/article/details/74898489)给出了" target="_blank" rel="noopener">http://blog.csdn.net/qq_27093465/article/details/74898489)给出了</a> 第二种方法的使用，那我就给出第一种方法的使用。</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709171758_580.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709040902_348.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709040903_404.png" alt=""></p><p>然后一路确定就可以了<br>最后的界面是这样子的。。。</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709171809_939.png" alt=""></p><h3 id="3-界面的介绍"><a href="#3-界面的介绍" class="headerlink" title="3. 界面的介绍"></a>3. 界面的介绍</h3><h4 id="默认界面"><a href="#默认界面" class="headerlink" title="默认界面"></a>默认界面</h4><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709171805_501.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171811_788.png" alt=""></p><p>对于没有版本的文件，也就是新创建的文件，右键后选择添加即可。</p><h4 id="创建-changelist"><a href="#创建-changelist" class="headerlink" title="创建 changelist"></a>创建 changelist</h4><p>这里的 <strong> changelist</strong> 是 idea 独有的一个概念<br>可以将不同的文件归为不同的类别，然后分别提交<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171826_359.png" alt=""></p><p>我们点击 加号<br>可以创建 changelist 这里，我就不展示了。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171844_717.png" alt=""><br>这里有三个 <strong> changelist</strong><br>可以选中其中之一，然后点击提交。这样只会提交这一个 list ，而不会影响到其他的。<br>我认为极大的提高了效率。</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709171846_89.png" alt=""><br>当你想要移动文件到其他的分支时，可以右键这个文件，然后选择其他分支。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171847_12.png" alt=""><br>这里我移动到了test_02分支下，这是效果图。</p><h4 id="忽视界面"><a href="#忽视界面" class="headerlink" title="忽视界面"></a>忽视界面</h4><p>下面是针对性的忽视某些文件。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171810_137.png" alt=""></p><p>这里更正一下，上下的介绍相反了。。。 对不住各位。</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709171813_50.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171814_171.png" alt=""><br>点击加号后，有三个选项  </p><ol><li>按照详细文件忽视</li><li>按照文件夹忽视</li><li>按照正则表达式忽视<br>这里我选择三，因为大家上传时，除了第一个人，一般不会将 <strong>.iml</strong> 文件上传。<br>所以将其忽视。<br>最后的效果如下图</li></ol><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709171817_38.png" alt=""></p><p>可以看出，这里的 <strong>.iml</strong> 文件显示为<strong>灰黄色</strong>，所以不会改变。<br><strong>注：</strong> idea 默认会将 target 文件夹收入 ignore 中，所以不用手动设置 .</p><h4 id="提交界面"><a href="#提交界面" class="headerlink" title="提交界面"></a>提交界面</h4><p>再往下走，我们点击 提交。会显示如下的界面。<br>上文虽然简单的介绍过，不过这里再介绍下。</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709171828_105.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171829_683.png" alt=""></p><ol><li><strong>Reformat code</strong> 格式化代码，如果是 Web 开发建议不要勾选，因为格式化 JSP 类文件，格式化效果不好。如果都是 Java 类则可以安心格式化。</li><li><strong>Rearrange code</strong> 重新编排代码，IntelliJ IDEA 支持各种复杂的编排设置选项，这个会在后面说。设置好了编码功能之后，这里就可以尝试勾选这个进行自动编排。</li><li><strong>Optimize imports</strong> 优化导入包，会在自动去掉没有使用的包。这个建议都勾选，这个只对 Java 类有作用，所以不用担心有副作用。</li><li><strong>Perform code analysis</strong> 进行代码分析，这个建议不用在提交的时候处理，而是在开发完之后，要专门养成对代码进行分析的习惯。IntelliJ IDEA 集成了代码分析功能。</li><li><strong>Check TODO</strong> 检查代码中的 TODO。</li><li><strong>Cleanup</strong> 清除下版本控制系统，去掉一些版本控制系统的错误信息，建议勾选。</li><li><strong>update copyright</strong> 。。。不认识。</li></ol><h3 id="5-优化。"><a href="#5-优化。" class="headerlink" title="5. 优化。"></a>5. 优化。</h3><p>这里可以决定用什么来作 版本控制<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171854_217.png" alt=""></p><p>然后是选择添加和删除文件时默认的一些设置<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171855_782.png" alt=""><br>基本是三个套路</p><ol><li>通知你让你选择</li><li>默认做，你不知道</li><li>默认不做</li></ol><p>这里是一些 ignore 的文件。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171856_391.png" alt=""></p><p>然后就是关于 subversion 的配置<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171857_43.png" alt=""><br>第一个不要 打勾，不然可能会出现问题。<br>第二个是说你是否自己选择 SVN 的目录。这里如果你将 SVN 设置为 环境变量的话，一般不需要选择。<br>第三个默认就好，不会影响项目。</p><p>然后还有一个插件，可以帮助关闭SVN。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171902_557.png" alt=""><br>下载这个插件后，重启。就可以使用了。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709171902_889.png" alt=""><br>从 VCS 中可以找到这个插件。非常的方便。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是我在使用 SVN 时的一些步骤，应付基本的业务使用，应该是没有问题的。<br>至于更深入的使用，我想公司里会有专人负责版本控制的吧。</p><p>码字不易。。。 新人打滚求<strong>关注</strong>，求<strong>点赞</strong>。<br>撒花，谢谢各位大佬。    </p><p>下面是我的私人博客 <a href="https://3dot141.cn" target="_blank" rel="noopener">killCode</a> 阅读效果更好哟</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killTools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>killJava系列 -- ConcurrentHashmap源码分析</title>
      <link href="/blogs/29869.html"/>
      <url>/blogs/29869.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://segmentfault.com/a/1190000010959342" target="_blank" rel="noopener">私信请在SegmentFault</a><br><a href="http://3dot141.cn/blogs/29869.html" target="_blank" rel="noopener">转发请注明出处</a></p><h3 id="改进一"><a href="#改进一" class="headerlink" title="改进一"></a>改进一</h3><p>取消segments字段，直接采用transient volatile HashEntry&lt;K,V&gt;[] table保存数据，采用table数组元素作为锁，从而实现了对每一行数据进行加锁，进一步减少并发冲突的概率。</p><h3 id="改进二"><a href="#改进二" class="headerlink" title="改进二"></a>改进二</h3><p>将原先table数组＋单向链表的数据结构，变更为table数组＋单向链表＋红黑树的结构。对于hash表来说，最核心的能力在于将key hash之后能均匀的分布在数组中。如果hash之后散列的很均匀，那么table数组中的每个队列长度主要为0或者1。但实际情况并非总是如此理想，虽然ConcurrentHashMap类默认的加载因子为0.75，但是在数据量过大或者运气不佳的情况下，还是会存在一些队列长度过长的情况，如果还是采用单向列表方式，那么查询某个节点的时间复杂度为O(n)；因此，对于个数超过8(默认值)的列表，jdk1.8中采用了红黑树的结构，那么查询的时间复杂度可以降低到O(logN)，可以改进性能。</p><h2 id="1-内部参数"><a href="#1-内部参数" class="headerlink" title="1. 内部参数"></a>1. 内部参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//初始容积为 16 </span><br><span class="line">private static final int DEFAULT_CAPACITY = 16;</span><br><span class="line">//加载因子 0.75</span><br><span class="line">private static final float LOAD_FACTOR = 0.75f;</span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line">* 盛装Node元素的数组 它的大小是2的整数次幂 </span><br><span class="line">* Size is always a power of two. Accessed directly by iterators. </span><br><span class="line">*/  </span><br><span class="line">transient volatile Node&lt;K,V&gt;[] table;  </span><br><span class="line">/*</span><br><span class="line"> *   hash表初始化或扩容时的一个控制位标识量。 </span><br><span class="line"> *   负数代表正在进行初始化或扩容操作 </span><br><span class="line"> *   -1代表正在初始化 </span><br><span class="line"> *   -N 表示有N-1个线程正在进行扩容操作 </span><br><span class="line"> *   正数或0代表hash表还没有被初始化，这个数值表示初始化或下一次进行扩容的大小 </span><br><span class="line"> *   </span><br><span class="line"> *   **既代表 HashMap 的 threshold**</span><br><span class="line"> *   又代表 **进行扩容时的进程数**</span><br><span class="line">*/</span><br><span class="line">private transient volatile int sizeCtl;</span><br><span class="line"></span><br><span class="line">// 以下两个是用来控制扩容的时候 单线程进入的变量  </span><br><span class="line">// resize校验码</span><br><span class="line">private static int RESIZE_STAMP_BITS = 16;  </span><br><span class="line">// resize校验码的位移量。</span><br><span class="line">private static final int RESIZE_STAMP_SHIFT = 32 - RESIZE_STAMP_BITS;  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  /* </span><br><span class="line">   * Encodings for Node hash fields. See above for explanation. </span><br><span class="line">   */  </span><br><span class="line">  static final int MOVED     = -1; // hash值是-1，表示这是一个forwardNode节点  </span><br><span class="line">  static final int TREEBIN   = -2; // hash值是-2  表示这时一个TreeBin节点  </span><br><span class="line">  static final int RESERVED  = -3; // hash for transient reservations</span><br><span class="line">  //在 spread() 方法中 用来对 hashcode 进行 高位hash 减少可能发生的碰撞。</span><br><span class="line">  static final int HASH_BITS = 0x7fffffff; // usable bits of normal node hash</span><br></pre></td></tr></table></figure><a id="more"></a><p>上面的 sizectl 很重要。是解决 concurrenthashmap 扩容的基础</p><h2 id="2-内部类"><a href="#2-内部类" class="headerlink" title="2. 内部类"></a>2. 内部类</h2><h3 id="2-1-Node"><a href="#2-1-Node" class="headerlink" title="2.1. Node"></a>2.1. Node</h3><p>与 <code>HashMap</code> 最大的区别是 加入了对val 与 next 用了volatile关键字修饰<br>并且 setValue() 方法 直接抛出异常，可以看出，val 是不能直接改变的。<br>是通过 Unsafe 类的 方法进行全部替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    final int hash;</span><br><span class="line">    final K key;</span><br><span class="line">    //相比于 HashMap ，加入了 volatile 关键字</span><br><span class="line">    volatile V val;</span><br><span class="line">    volatile Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(int hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        this.hash = hash;</span><br><span class="line">        this.key = key;</span><br><span class="line">        this.val = val;</span><br><span class="line">        this.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final K getKey()       &#123; return key; &#125;</span><br><span class="line">    public final V getValue()     &#123; return val; &#125;</span><br><span class="line">    public final int hashCode()   &#123; return key.hashCode() ^ val.hashCode(); &#125;</span><br><span class="line">    public final String toString()&#123; return key + &quot;=&quot; + val; &#125;</span><br><span class="line">    public final V setValue(V value) &#123;</span><br><span class="line">        throw new UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-TreeNode"><a href="#2-2-TreeNode" class="headerlink" title="2.2 TreeNode"></a>2.2 TreeNode</h3><p>与 <code>HashMap</code> 不同的是</p><ol><li>这次 <code>TreeNode</code> 不再是继承自 LinkedHashMap.Entry 而是继承自本类中的 Node.</li><li>并不直接用于红黑树的结点，而是将 结点包装成 TreeNode 后，用下面的 TreeBin 进行二次包装。</li><li>优点是可以使用 Node 类的 next 指针，方便TreeBin 后续 从 <code>链表</code> 到 <code>红黑树</code> 的转换。<br>构造函数可以看出，原先对TreeNode 的初始化只是设置了其的后续结点。组成了链表。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">static final class TreeNode&lt;K,V&gt; extends Node&lt;K,V&gt; &#123;</span><br><span class="line">TreeNode&lt;K,V&gt; parent;  // red-black tree links</span><br><span class="line">TreeNode&lt;K,V&gt; left;</span><br><span class="line">TreeNode&lt;K,V&gt; right;</span><br><span class="line">TreeNode&lt;K,V&gt; prev;    // needed to unlink next upon deletion</span><br><span class="line">boolean red;</span><br><span class="line"></span><br><span class="line">TreeNode(int hash, K key, V val, Node&lt;K,V&gt; next,</span><br><span class="line">            TreeNode&lt;K,V&gt; parent) &#123;</span><br><span class="line">    super(hash, key, val, next);</span><br><span class="line">    this.parent = parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-TreeBin"><a href="#2-3-TreeBin" class="headerlink" title="2.3. TreeBin"></a>2.3. TreeBin</h3><p>特点：  1. 不持有key与val ，指向TreeNode 的 root 与 list。</p><pre><code>2. 加入读写锁。方便并发的访问。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">static final class TreeBin&lt;K,V&gt; extends Node&lt;K,V&gt; &#123;</span><br><span class="line">     TreeNode&lt;K,V&gt; root;</span><br><span class="line">     volatile TreeNode&lt;K,V&gt; first;</span><br><span class="line">     volatile Thread waiter;</span><br><span class="line">     //通过锁的状态 ， 判断锁的类型。</span><br><span class="line">     volatile int lockState;</span><br><span class="line">     // values for lockState</span><br><span class="line">     static final int WRITER = 1; // set while holding write lock</span><br><span class="line">     static final int WAITER = 2; // set when waiting for write lock</span><br><span class="line">     static final int READER = 4; // increment value for setting read lock</span><br></pre></td></tr></table></figure><p>构造方法如下<br>root 代表 TreeNode 的根结点<br>使用first ，是用于第一次初始化时，因为root的特殊性，所以不便于 <code>this.root = b</code> 因此通过 first代替第一次的初始化过程。<br>然后在 过程中 用r 代表root ，直到结束 红黑树的初始化后，再 <code>root =r</code>保证root的安全性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">TreeBin(TreeNode&lt;K,V&gt; b) &#123;  </span><br><span class="line">    super(TREEBIN, null, null, null);  </span><br><span class="line">    this.first = b;  </span><br><span class="line">    TreeNode&lt;K,V&gt; r = null;  </span><br><span class="line">    for (TreeNode&lt;K,V&gt; x = b, next; x != null; x = next) &#123;  </span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next;  </span><br><span class="line">        x.left = x.right = null;  </span><br><span class="line">        if (r == null) &#123;  </span><br><span class="line">            x.parent = null;  </span><br><span class="line">            x.red = false;  </span><br><span class="line">            r = x;  </span><br><span class="line">        &#125;  </span><br><span class="line">        else &#123;  </span><br><span class="line">            K k = x.key;  </span><br><span class="line">            int h = x.hash;  </span><br><span class="line">            Class&lt;?&gt; kc = null;  </span><br><span class="line">            for (TreeNode&lt;K,V&gt; p = r;;) &#123;  </span><br><span class="line">                int dir, ph;  </span><br><span class="line">                K pk = p.key;  </span><br><span class="line">                if ((ph = p.hash) &gt; h)  </span><br><span class="line">                    dir = -1;  </span><br><span class="line">                else if (ph &lt; h)  </span><br><span class="line">                    dir = 1;  </span><br><span class="line">                else if ((kc == null &amp;&amp;  </span><br><span class="line">                            (kc = comparableClassFor(k)) == null) ||  </span><br><span class="line">                            (dir = compareComparables(kc, k, pk)) == 0)  </span><br><span class="line">                    dir = tieBreakOrder(k, pk);  </span><br><span class="line">                    TreeNode&lt;K,V&gt; xp = p;  </span><br><span class="line">                if ((p = (dir &lt;= 0) ? p.left : p.right) == null) &#123;  </span><br><span class="line">                    x.parent = xp;  </span><br><span class="line">                    if (dir &lt;= 0)  </span><br><span class="line">                        xp.left = x;  </span><br><span class="line">                    else  </span><br><span class="line">                        xp.right = x;  </span><br><span class="line">                    r = balanceInsertion(r, x);  </span><br><span class="line">                    break;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    this.root = r;  </span><br><span class="line">    assert checkInvariants(root);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-ForwardingNode"><a href="#2-4-ForwardingNode" class="headerlink" title="2.4. ForwardingNode"></a>2.4. ForwardingNode</h3><p>作用是在 transfer() 过程中，插入到 TreeBin 之间，用作链接作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static final class ForwardingNode&lt;K,V&gt; extends Node&lt;K,V&gt; &#123;</span><br><span class="line">    final Node&lt;K,V&gt;[] nextTable;</span><br><span class="line">    ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;</span><br><span class="line">        super(MOVED, null, null, null);</span><br><span class="line">        this.nextTable = tab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-Unsafe-类-与-常用的操作"><a href="#3-Unsafe-类-与-常用的操作" class="headerlink" title="3. Unsafe 类 与 常用的操作"></a>3. Unsafe 类 与 常用的操作</h2><h3 id="3-1-Unsafe-与-静态代码块"><a href="#3-1-Unsafe-与-静态代码块" class="headerlink" title="3.1. Unsafe 与 静态代码块"></a>3.1. Unsafe 与 静态代码块</h3><p>Unsafe提供了硬件级别的原子操作。内部的方法均为 <code>native方法</code> ,可以访问系统底层。<br>这里用了 CAS 算法（compare and swap) 大大的避免了使用时对性能的消耗，以及保证了使用时的安全性。<br>    <strong>注：</strong> CAS 算法的核心是 将需要改变的参数，与内存中已经存在的变量的值进行对比，一致就改变，不一致就放弃这次操作。与之相类似的优化操作还有 LL/SC(Load-Linked/Store-Conditional : 加载链接/条件存储) 、 Test-and-Set(测试并设置)<br>这里额外介绍一下 Unsafe 类的 <code>compareAndSwapInt</code> 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 比较obj的offset处内存位置中的值和期望的值，如果相同则更新。此更新是不可中断的。</span><br><span class="line">* </span><br><span class="line">* @param obj 需要更新的对象</span><br><span class="line">* @param offset obj中整型field的偏移量</span><br><span class="line">* @param expect 希望field中存在的值</span><br><span class="line">* @param update 如果期望值expect与field的当前值相同，设置filed的值为这个新值</span><br><span class="line">* @return 如果field的值被更改返回true</span><br><span class="line">*/</span><br><span class="line">public native boolean compareAndSwapInt(Object obj, long offset, int expect, int update);</span><br></pre></td></tr></table></figure></p><p>下面是 <code>ConcurrentHashMap 中有关的应用</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// Unsafe mechanics</span><br><span class="line">private static final sun.misc.Unsafe U;</span><br><span class="line">//对应于 类中的 sizectl</span><br><span class="line">private static final long SIZECTL;</span><br><span class="line">//在 transfer() 方法的使用时，计算索引</span><br><span class="line">private static final long TRANSFERINDEX;</span><br><span class="line">// 用于对 ConcurrentHashMap 的 size 统计。</span><br><span class="line">// 下文 第8点关于 size 会说明。</span><br><span class="line">private static final long BASECOUNT;</span><br><span class="line">// 辅助类 countercell 类中的属性，用于分布式计算</span><br><span class="line">// 是实现  java8 中 londAddr 的基础</span><br><span class="line">private static final long CELLSBUSY;</span><br><span class="line">private static final long CELLVALUE;</span><br><span class="line">// 用来确定在数组中的位置</span><br><span class="line">// 数组中的偏移地址</span><br><span class="line">private static final long ABASE;</span><br><span class="line">// 数组中的增量地址</span><br><span class="line">private static final int ASHIFT;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //通过反射调用 类中的值，从而对 这些变量赋值</span><br><span class="line">        U = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">        Class&lt;?&gt; k = ConcurrentHashMap.class;</span><br><span class="line">        SIZECTL = U.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(&quot;sizeCtl&quot;));</span><br><span class="line">        TRANSFERINDEX = U.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(&quot;transferIndex&quot;));</span><br><span class="line">        BASECOUNT = U.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(&quot;baseCount&quot;));</span><br><span class="line">        CELLSBUSY = U.objectFieldOffset</span><br><span class="line">            (k.getDeclaredField(&quot;cellsBusy&quot;));</span><br><span class="line">        Class&lt;?&gt; ck = CounterCell.class;</span><br><span class="line">        CELLVALUE = U.objectFieldOffset</span><br><span class="line">            (ck.getDeclaredField(&quot;value&quot;));</span><br><span class="line">        Class&lt;?&gt; ak = Node[].class;</span><br><span class="line">        ABASE = U.arrayBaseOffset(ak);</span><br><span class="line">        int scale = U.arrayIndexScale(ak);</span><br><span class="line">        if ((scale &amp; (scale - 1)) != 0)</span><br><span class="line">            throw new Error(&quot;data type scale not a power of two&quot;);</span><br><span class="line">        ASHIFT = 31 - Integer.numberOfLeadingZeros(scale);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        throw new Error(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-2-常用方法"><a href="#3-2-常用方法" class="headerlink" title="3.2 常用方法"></a>3.2 常用方法</h3><p>在操作过程中，经常会看到以下几个，或者相类似的方法。<br>其核心是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   //获得 i 位置上的 Node 节点</span><br><span class="line">static final &lt;K,V&gt; Node&lt;K,V&gt; tabAt(Node&lt;K,V&gt;[] tab, int i) &#123;  </span><br><span class="line">      return (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((long)i &lt;&lt; ASHIFT) + ABASE);  </span><br><span class="line">  &#125;  </span><br><span class="line">   //利用CAS算法设置i位置上的Node节点。</span><br><span class="line">  static final &lt;K,V&gt; boolean casTabAt(Node&lt;K,V&gt;[] tab, int i,  </span><br><span class="line">                                      Node&lt;K,V&gt; c, Node&lt;K,V&gt; v) &#123;  </span><br><span class="line">      return U.compareAndSwapObject(tab, ((long)i &lt;&lt; ASHIFT) + ABASE, c, v);  </span><br><span class="line">  &#125;  </span><br><span class="line">   //利用volatile方法设置节点位置的值  </span><br><span class="line">  static final &lt;K,V&gt; void setTabAt(Node&lt;K,V&gt;[] tab, int i, Node&lt;K,V&gt; v) &#123;  </span><br><span class="line">      U.putObjectVolatile(tab, ((long)i &lt;&lt; ASHIFT) + ABASE, v);  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-初始化函数-initTable"><a href="#4-初始化函数-initTable" class="headerlink" title="4. 初始化函数 initTable"></a>4. 初始化函数 initTable</h2><p>调用ConcurrentHashMap的构造方法仅仅是设置了一些参数而已，而整个table的初始化是在向ConcurrentHashMap中插入元素的时候发生的。<br>当向 map 插入数据的时候 table == null , 则会调用 initTable()方法 。<br>用 <strong> put 方法</strong> 简单展示一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">final V putVal(K key, V value, boolean onlyIfAbsent) &#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    for (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; int n, i, fh;</span><br><span class="line">        if (tab == null || (n = tab.length) == 0)</span><br><span class="line">            tab = initTable();</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>initTable() 方法展示如下<br>其中有 sizectl 变量，这里回顾一下<br>    hash表初始化或扩容时的一个控制位标识量。<br>    负数代表正在进行初始化或扩容操作<br>    -1代表正在初始化<br>    -N 表示有N-1个线程正在进行扩容操作<br>    正数或0代表hash表还没有被初始化，这个数值表示初始化或下一次进行扩容的大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line"> * Initializes table, using the size recorded in sizeCtl. </span><br><span class="line"> */  </span><br><span class="line">private final Node&lt;K,V&gt;[] initTable() &#123;  </span><br><span class="line">    Node&lt;K,V&gt;[] tab; int sc;  </span><br><span class="line">    while ((tab = table) == null || tab.length == 0) &#123;  </span><br><span class="line"></span><br><span class="line">            //sizeCtl &lt;0 表示有其他线程正在进行初始化操作，把线程挂起。对于table的初始化工作，只能有一个线程在进行。  </span><br><span class="line">        if ((sc = sizeCtl) &lt; 0)  </span><br><span class="line">            Thread.yield(); // lost initialization race; just spin  </span><br><span class="line"></span><br><span class="line">            //利用CAS方法把sizectl的值置为-1 表示本线程正在进行初始化  </span><br><span class="line">        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) &#123;</span><br><span class="line">            try &#123;  </span><br><span class="line">                if ((tab = table) == null || tab.length == 0) &#123;  </span><br><span class="line">                    int n = (sc &gt; 0) ? sc : DEFAULT_CAPACITY;  </span><br><span class="line">                    @SuppressWarnings(&quot;unchecked&quot;)  </span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])new Node&lt;?,?&gt;[n];  </span><br><span class="line">                    table = tab = nt;  </span><br><span class="line">                    //相当于0.75*n 设置一个扩容的阈值  </span><br><span class="line">                    // sc = n - n/4</span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; 2);</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125; finally &#123;  </span><br><span class="line">                // 更新 sizectl</span><br><span class="line">                sizeCtl = sc;  </span><br><span class="line">            &#125;  </span><br><span class="line">            break;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return tab;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-transfer-扩容操作"><a href="#5-transfer-扩容操作" class="headerlink" title="5. transfer() 扩容操作"></a>5. transfer() 扩容操作</h2><p>当ConcurrentHashMap容量不足的时候，需要对table进行扩容。这个方法的基本思想跟HashMap是很像的，但是由于它是支持并发扩容的，所以要复杂的多。原因是它支持多线程进行扩容操作，而并没有加锁。我想这样做的目的不仅仅是为了满足concurrent的要求，而是希望利用并发处理去减少扩容带来的时间影响。因为在扩容的时候，总是会涉及到从一个“数组”到另一个“数组”拷贝的操作，如果这个操作能够并发进行，那真真是极好的了。</p><p>整个扩容操作分为两个部分:</p><pre><code>1. 第一部分是构建一个nextTable,它的容量是原来的两倍，这个操作是单线程完成的。这个单线程的保证是通过RESIZE_STAMP_SHIFT这个常量经过一次运算来保证的，这个地方在后面会有提到；2. 第二个部分就是将原来table中的元素复制到nextTable中，这里允许多线程进行操作。</code></pre><p>先来看一下单线程是如何完成的：<br>它的大体思想就是遍历、复制的过程。首先根据运算得到需要遍历的次数i，然后利用tabAt方法获得i位置的元素：</p><pre><code>1. 如果这个位置为空，就在原table中的i位置放入forwardNode节点，这个也是触发并发扩容的关键点；2. 如果这个位置是Node节点（fh&gt;=0），就构造两个链表，一个代表高位为 0 ， 一个代表高位为 1 。将原来的结点 分别放在nextTable的i和i+n的位置上，并且除了lastRun的位置相对位于链表的底部外，其余元素均为 **反序** 。3. 如果这个位置是TreeBin节点（fh&lt;0），也做一个处理，并且判断是否需要untreefi，把处理的结果分别放在nextTable的i和i+n的位置上</code></pre><p>遍历过所有的节点以后就完成了复制工作，这时让nextTable作为新的table，并且更新sizeCtl为新容量的0.75倍 ，完成扩容。</p><p>再看一下多线程是如何完成的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//如果遍历到ForwardingNode节点  说明这个点已经被处理过了,直接跳过  这里是控制并发扩容的核心</span><br><span class="line"> else if ((fh = f.hash) == MOVED)</span><br><span class="line">     advance = true; // already processed</span><br></pre></td></tr></table></figure><p>这是一个判断，如果遍历到的节点是forward节点，就向后继续遍历，再加上给节点上锁的机制，就完成了多线程的控制。多线程遍历节点，处理了一个节点，就把对应点的值set为forward，另一个线程看到forward，就向后遍历。这样交叉就完成了复制工作。而且还很好的解决了线程安全的问题。</p><p>下面是源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 一个过渡的table表  只有在扩容的时候才会使用</span><br><span class="line"> */</span><br><span class="line">private transient volatile Node&lt;K, V&gt;[] nextTable;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Moves and/or copies the nodes in each bin to new table. See</span><br><span class="line"> * above for explanation.</span><br><span class="line"> */</span><br><span class="line">private final void transfer(Node&lt;K, V&gt;[] tab, Node&lt;K, V&gt;[] nextTab) &#123;</span><br><span class="line">    int n = tab.length, stride;</span><br><span class="line">    // 通过计算 NCPU CPU的核心数与 表的大小的比值，将表进行范围的细分，以方便 并发。</span><br><span class="line">    // 感觉上 有点像 segment 分段锁的意思。</span><br><span class="line">    if ((stride = (NCPU &gt; 1) ? (n &gt;&gt;&gt; 3) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">        stride = MIN_TRANSFER_STRIDE; // subdivide range</span><br><span class="line">    if (nextTab == null) &#123;            // initiating</span><br><span class="line">        try &#123;</span><br><span class="line">            //构造一个nextTable对象 它的容量是原来的两倍。</span><br><span class="line">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">            Node&lt;K, V&gt;[] nt = (Node&lt;K, V&gt;[]) new Node&lt;?, ?&gt;[n &lt;&lt; 1];</span><br><span class="line">            nextTab = nt;</span><br><span class="line">        &#125; catch (Throwable ex) &#123;      // try to cope with OOME</span><br><span class="line">            //原来的 容量限制为 1&lt;&lt;30</span><br><span class="line">            //HashMap 在扩容时，会用 resize（） 方法，扩大 threshold 的值</span><br><span class="line">            //当大于 MAXIMUM_CAPACITY 时，会将 threshold 设置为 Integer.MAX_VALUE</span><br><span class="line">            sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        nextTable = nextTab;</span><br><span class="line">        transferIndex = n;</span><br><span class="line">    &#125;</span><br><span class="line">    int nextn = nextTab.length;</span><br><span class="line">    ForwardingNode&lt;K, V&gt; fwd = new ForwardingNode&lt;K, V&gt;(nextTab);//构造一个连节点指针 用于标志位</span><br><span class="line">    boolean advance = true;//并发扩容的关键属性 如果等于true 说明这个节点已经处理过</span><br><span class="line">    boolean finishing = false; // to ensure sweep before committing nextTab</span><br><span class="line"></span><br><span class="line">    for (int i = 0, bound = 0; ; ) &#123;</span><br><span class="line">        Node&lt;K, V&gt; f;</span><br><span class="line">        int fh;</span><br><span class="line">        //这个while循环体的作用就是在控制i递减  通过i可以依次遍历原hash表中的节点</span><br><span class="line">        while (advance) &#123;</span><br><span class="line">            int nextIndex, nextBound;</span><br><span class="line">            if (--i &gt;= bound || finishing)</span><br><span class="line">                advance = false;</span><br><span class="line">            else if ((nextIndex = transferIndex) &lt;= 0) &#123;</span><br><span class="line">                i = -1;</span><br><span class="line">                advance = false;</span><br><span class="line">            &#125; else if (U.compareAndSwapInt</span><br><span class="line">                    (this, TRANSFERINDEX, nextIndex,</span><br><span class="line">                            nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                    nextIndex - stride : 0))) &#123;</span><br><span class="line">                bound = nextBound;</span><br><span class="line">                i = nextIndex - 1;</span><br><span class="line">                advance = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (i &lt; 0 || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">            int sc;</span><br><span class="line">            if (finishing) &#123;</span><br><span class="line">                //如果所有的节点都已经完成复制工作  就把nextTable赋值给table 清空临时对象nextTable</span><br><span class="line">                nextTable = null;</span><br><span class="line">                table = nextTab;</span><br><span class="line">                sizeCtl = (n &lt;&lt; 1) - (n &gt;&gt;&gt; 1);//扩容阈值设置为原来容量的1.5倍  依然相当于现在容量的0.75倍</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            //利用CAS方法更新这个扩容阈值，在这里面sizectl值减一，说明新加入一个线程参与到扩容操作</span><br><span class="line">            if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) &#123;</span><br><span class="line">                if ((sc - 2) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                    return;</span><br><span class="line">                finishing = advance = true;</span><br><span class="line">                i = n; // recheck before commit</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果遍历到的节点为空 则放入ForwardingNode指针</span><br><span class="line">        else if ((f = tabAt(tab, i)) == null)</span><br><span class="line">            advance = casTabAt(tab, i, null, fwd);</span><br><span class="line">        //如果遍历到ForwardingNode节点  说明这个点已经被处理过了,直接跳过  这里是控制并发扩容的核心</span><br><span class="line">        else if ((fh = f.hash) == MOVED)</span><br><span class="line">            advance = true; // already processed</span><br><span class="line">        else &#123;</span><br><span class="line">            //节点上锁</span><br><span class="line">            synchronized (f) &#123;</span><br><span class="line">                if (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    Node&lt;K, V&gt; ln, hn;</span><br><span class="line">                    //如果fh&gt;=0 证明这是一个Node节点</span><br><span class="line">                    if (fh &gt;= 0) &#123;</span><br><span class="line">                        // runBit 代表正在 运行的 Node 节点的 分类</span><br><span class="line">                        // 因此链表根据高位为0或者1分为两个子链表，高位为0的节点桶位置没有发生变化，高位为1的节点桶位置增加了n，</span><br><span class="line">                        // 所以有setTabAt(nextTab, i, ln);和 setTabAt(nextTab, i + n, hn);</span><br><span class="line">                        // n = 2的幂 。 二进制 0001000</span><br><span class="line">                        // fh &amp; n =  1. 1000</span><br><span class="line">                        //           2. 0000  所以划分出两个链表。</span><br><span class="line">                        int runBit = fh &amp; n;</span><br><span class="line">                        // lastRun 是正在运行的节点</span><br><span class="line">                        Node&lt;K, V&gt; lastRun = f;</span><br><span class="line">                        //以下的部分在完成的工作是构造两个链表  一个是高位为 0 的链表  另一个是高位为 1 的链表 </span><br><span class="line">                        // 找出最后一个 与后面的结点不同的 结点</span><br><span class="line">                        for (Node&lt;K, V&gt; p = f.next; p != null; p = p.next) &#123;</span><br><span class="line">                            int b = p.hash &amp; n;</span><br><span class="line">                            if (b != runBit) &#123;</span><br><span class="line">                                runBit = b;</span><br><span class="line">                                lastRun = p;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        // 将最后一个 结点保存起来</span><br><span class="line">                        if (runBit == 0) &#123;</span><br><span class="line">                            ln = lastRun;</span><br><span class="line">                            hn = null;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            hn = lastRun;</span><br><span class="line">                            ln = null;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        for (Node&lt;K, V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                            int ph = p.hash;</span><br><span class="line">                            K pk = p.key;</span><br><span class="line">                            V pv = p.val;</span><br><span class="line">                            //这个链表是从低层向上构建</span><br><span class="line">                            // ln 或 hn = lastRun, 构建一个 node 结点</span><br><span class="line">                            // 其下一个结点为 lastRun 。</span><br><span class="line">                            if ((ph &amp; n) == 0) // 构建低位链表</span><br><span class="line">                                ln = new Node&lt;K, V&gt;(ph, pk, pv, ln);</span><br><span class="line">                            else     // 构建高位链表</span><br><span class="line">                                hn = new Node&lt;K, V&gt;(ph, pk, pv, hn);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        //在nextTable的i位置上插入一个链表</span><br><span class="line">                        setTabAt(nextTab, i, ln);</span><br><span class="line">                        //在nextTable的i+n的位置上插入另一个链表</span><br><span class="line">                        setTabAt(nextTab, i + n, hn);</span><br><span class="line">                        //在table的i位置上插入forwardNode节点  表示已经处理过该节点</span><br><span class="line">                        setTabAt(tab, i, fwd);</span><br><span class="line">                        //设置advance为true 返回到上面的while循环中 就可以执行 --i 操作</span><br><span class="line">                        advance = true;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //对TreeBin对象进行处理  与上面的过程类似</span><br><span class="line">                    else if (f instanceof TreeBin) &#123;</span><br><span class="line">                        TreeBin&lt;K, V&gt; t = (TreeBin&lt;K, V&gt;) f;</span><br><span class="line">                        TreeNode&lt;K, V&gt; lo = null, loTail = null;</span><br><span class="line">                        TreeNode&lt;K, V&gt; hi = null, hiTail = null;</span><br><span class="line">                        int lc = 0, hc = 0;</span><br><span class="line">                        //构造高位和低位两个链表</span><br><span class="line">                        for (Node&lt;K, V&gt; e = t.first; e != null; e = e.next) &#123;</span><br><span class="line">                            int h = e.hash;</span><br><span class="line">                            TreeNode&lt;K, V&gt; p = new TreeNode&lt;K, V&gt;</span><br><span class="line">                                    (h, e.key, e.val, null, null);</span><br><span class="line">                            if ((h &amp; n) == 0) &#123;</span><br><span class="line">                                if ((p.prev = loTail) == null)</span><br><span class="line">                                    lo = p;</span><br><span class="line">                                else</span><br><span class="line">                                    loTail.next = p;</span><br><span class="line">                                loTail = p;</span><br><span class="line">                                ++lc;</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                if ((p.prev = hiTail) == null)</span><br><span class="line">                                    hi = p;</span><br><span class="line">                                else</span><br><span class="line">                                    hiTail.next = p;</span><br><span class="line">                                hiTail = p;</span><br><span class="line">                                ++hc;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        //如果扩容后已经不再需要tree的结构 反向转换为链表结构</span><br><span class="line">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                                (hc != 0) ? new TreeBin&lt;K, V&gt;(lo) : t;</span><br><span class="line">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                                (lc != 0) ? new TreeBin&lt;K, V&gt;(hi) : t;</span><br><span class="line">                        //在nextTable的i位置上插入一个链表</span><br><span class="line">                        setTabAt(nextTab, i, ln);</span><br><span class="line">                        //在nextTable的i+n的位置上插入另一个链表</span><br><span class="line">                        setTabAt(nextTab, i + n, hn);</span><br><span class="line">                        //在table的i位置上插入forwardNode节点  表示已经处理过该节点</span><br><span class="line">                        setTabAt(tab, i, fwd);</span><br><span class="line">                        //设置advance为true 返回到上面的while循环中 就可以执行 --i 操作</span><br><span class="line">                        advance = true;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-put-方法"><a href="#6-put-方法" class="headerlink" title="6. put 方法"></a>6. put 方法</h2><blockquote><p>put方法依然沿用HashMap的put方法的思想，根据hash值计算这个新插入的点在table中的位置i。 </p></blockquote><p><strong>注：</strong></p><pre><code>1. hash = spread(key.hashCode())2. spread(int h) --&gt; return (h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS;  --&gt; 通过hashCode()的高16位异或低16位优化高位运算的算法3. else if ((f = tabAt(tab, i = (n - 1) &amp; hash)) == null) {         if (casTabAt(tab, i, null,              new Node&lt;K,V&gt;(hash, key, value, null)))                break;                   // no lock when adding to empty bin    }</code></pre><p>如果i位置是空的，直接放进去，否则进行判断，<br>如果i位置是树节点，按照树的方式插入新的节点，否则把i插入到链表的末尾<br><strong>不同点</strong>：ConcurrentHashMap不允许key或value为null值。</p><p><strong>多线程的情况下：</strong></p><ol><li>如果一个或多个线程正在对ConcurrentHashMap进行扩容操作，当前线程也要进入扩容的操作中。这个扩容的操作之所以能被检测到，是因为transfer方法中在空结点上插入forward节点，如果检测到需要插入的位置被forward节点占有，就帮助进行扩容； –&gt; helpTransfer() 方法。</li><li>如果检测到要插入的节点是非空且不是forward节点，就对这个节点加锁，这样就保证了线程安全。尽管这个有一些影响效率，但是还是会比hashTable的synchronized要好得多。<ol><li>首先判断这个节点的类型。如果是链表节点（fh&gt;0）,则得到的结点就是hash值相同的节点组成的链表的头节点。需要依次向后遍历确定这个新加入的值所在位置。如果遇到hash值与key值都与新加入节点是一致的情况，则只需要更新value值即可。否则依次向后遍历，直到链表尾插入这个结点。  </li><li>如果加入这个节点以后链表长度大于8，就把这个链表转换成红黑树。</li><li>如果这个节点的类型已经是树节点的话，直接调用树节点的插入方法进行插入新的值。</li></ol></li></ol><p>源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    return putVal(key, value, false);</span><br><span class="line">&#125;</span><br><span class="line">final V putVal(K key, V value, boolean onlyIfAbsent) &#123;</span><br><span class="line">    //不允许 key或value为null  </span><br><span class="line">    if (key == null || value == null) throw new NullPointerException();</span><br><span class="line">    //计算hash值  </span><br><span class="line">    int hash = spread(key.hashCode());</span><br><span class="line">    //计算该链表 节点的数量</span><br><span class="line">    int binCount = 0;</span><br><span class="line">    for (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; int n, i, fh;</span><br><span class="line">        // 第一次 put 操作的时候初始化，如果table为空的话，初始化table  </span><br><span class="line">        if (tab == null || (n = tab.length) == 0)</span><br><span class="line">            tab = initTable();</span><br><span class="line"></span><br><span class="line">        //根据hash值计算出在table里面的位置   </span><br><span class="line">        else if ((f = tabAt(tab, i = (n - 1) &amp; hash)) == null) &#123;</span><br><span class="line">            // 根据对应的key hash 到具体的索引，如果该索引对应的 Node 为 null，则采用 CAS 操作更新整个 table</span><br><span class="line">            // 如果这个位置没有值 ，直接放进去，不需要加锁  </span><br><span class="line">            if (casTabAt(tab, i, null,</span><br><span class="line">                        new Node&lt;K,V&gt;(hash, key, value, null)))</span><br><span class="line">                break;                   // no lock when adding to empty bin</span><br><span class="line">        &#125;</span><br><span class="line">        //当遇到表连接点时，需要进行整合表的操作  </span><br><span class="line">        else if ((fh = f.hash) == MOVED)</span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        else &#123;</span><br><span class="line">            V oldVal = null;</span><br><span class="line">            // 结点上锁，只是对链表头结点作锁操作</span><br><span class="line">            synchronized (f) &#123;</span><br><span class="line">                if (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    //fh &gt; 0 说明这个节点是一个链表的节点 不是树的节点  </span><br><span class="line">                    if (fh &gt;= 0) &#123;</span><br><span class="line">                        binCount = 1;</span><br><span class="line">                        //在这里遍历链表所有的结点  </span><br><span class="line">                        //并且计算链表里结点的数量</span><br><span class="line">                        for (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            //如果hash值和key值相同  则修改对应结点的value值  </span><br><span class="line">                            if (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                (ek != null &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                if (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            //如果遍历到了最后一个结点，那么就证明新的节点需要插入 就把它插入在链表尾部  </span><br><span class="line">                            if ((e = e.next) == null) &#123;</span><br><span class="line">                                // 插入到链表尾</span><br><span class="line">                                pred.next = new Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                            value, null);</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    //如果这个节点是树节点，就按照树的方式插入值  </span><br><span class="line">                    else if (f instanceof TreeBin) &#123;</span><br><span class="line">                        // 如果是红黑树结点，按照红黑树的插入</span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        // 如果为树节点， binCount一直为2，不会引发扩容。</span><br><span class="line">                        binCount = 2;</span><br><span class="line">                        if ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                        value)) != null) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            if (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (binCount != 0) &#123;</span><br><span class="line">                // 如果这个链表结点达到了临界值8，那么把这个链表转换成红黑树</span><br><span class="line">                if (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                if (oldVal != null)</span><br><span class="line">                    return oldVal;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //将当前ConcurrentHashMap的元素数量+1，table的扩容是在这里发生的</span><br><span class="line">    addCount(1L, binCount);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-1-helpTransfer-方法"><a href="#6-1-helpTransfer-方法" class="headerlink" title="6.1 helpTransfer() 方法"></a>6.1 helpTransfer() 方法</h3><p>出现于 <code>put 方法</code> 如下地点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//当遇到表连接点时，需要进行整合表的操作  </span><br><span class="line">else if ((fh = f.hash) == MOVED)  </span><br><span class="line">    tab = helpTransfer(tab, f);</span><br></pre></td></tr></table></figure></p><p>helpTransfer() 方法的源码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">final Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;  </span><br><span class="line">      Node&lt;K,V&gt;[] nextTab; int sc;  </span><br><span class="line">      // 当前 table 不为 null , 且 f 为 forwardingNode 结点 ， 且存在下一张表</span><br><span class="line">      if (tab != null &amp;&amp; (f instanceof ForwardingNode) &amp;&amp;  </span><br><span class="line">          (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != null) &#123;  </span><br><span class="line">          int rs = resizeStamp(tab.length);//计算一个扩容校验码  </span><br><span class="line">           // 当 sizeCtl &lt; 0 时，表示有线程在 transfer().</span><br><span class="line">          while (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;  </span><br><span class="line">                 (sc = sizeCtl) &lt; 0) &#123;  </span><br><span class="line">               //正常情况下 sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT  == resizeStamp(tab.length);</span><br><span class="line">              if ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||  </span><br><span class="line">                  sc == rs + MAX_RESIZERS || transferIndex &lt;= 0)  </span><br><span class="line">                  break;  </span><br><span class="line">               //将 扩容的线程先行减一，表示，这是来辅助 transfer，而非进行 transfer的线程。</span><br><span class="line">              if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) &#123;  </span><br><span class="line">                  transfer(tab, nextTab);  </span><br><span class="line">                  break;  </span><br><span class="line">              &#125;  </span><br><span class="line">          &#125;  </span><br><span class="line">          return nextTab;  </span><br><span class="line">      &#125;  </span><br><span class="line">      return table;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-2-treeifyBin-方法"><a href="#6-2-treeifyBin-方法" class="headerlink" title="6.2 treeifyBin() 方法"></a>6.2 treeifyBin() 方法</h3><p>涉及变量 MIN_TREEIFY_CAPACITY = 64;<br>如果数组长度n小于阈值MIN_TREEIFY_CAPACITY，默认是64，则会调用tryPresize方法把数组长度扩大到原来的两倍，并触发transfer方法，重新调整节点的位置。<br>出现于 <code>put 方法</code> 如下地点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (binCount != 0) &#123;</span><br><span class="line">    // TREEIFY_THRESHOLD 默认为 8.</span><br><span class="line">    if (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">        treeifyBin(tab, i);</span><br><span class="line">    if (oldVal != null)</span><br><span class="line">        return oldVal;</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">private final void treeifyBin(Node&lt;K,V&gt;[] tab, int index) &#123;</span><br><span class="line">    Node&lt;K,V&gt; b; int n, sc;</span><br><span class="line">    if (tab != null) &#123;</span><br><span class="line">        if ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            // 将原来的数组扩大为原来的两倍</span><br><span class="line">            tryPresize(n &lt;&lt; 1);</span><br><span class="line"></span><br><span class="line">        else if ((b = tabAt(tab, index)) != null &amp;&amp; b.hash &gt;= 0) &#123;</span><br><span class="line">            synchronized (b) &#123;</span><br><span class="line">                if (tabAt(tab, index) == b) &#123;</span><br><span class="line">                    TreeNode&lt;K,V&gt; hd = null, tl = null;</span><br><span class="line">                    for (Node&lt;K,V&gt; e = b; e != null; e = e.next) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; p =</span><br><span class="line">                            new TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,</span><br><span class="line">                                              null, null);</span><br><span class="line">                        if ((p.prev = tl) == null)</span><br><span class="line">                            hd = p;</span><br><span class="line">                        else</span><br><span class="line">                            tl.next = p;</span><br><span class="line">                        tl = p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    setTabAt(tab, index, new TreeBin&lt;K,V&gt;(hd));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-3-tableSizeFor-方法"><a href="#6-3-tableSizeFor-方法" class="headerlink" title="6.3 tableSizeFor 方法"></a>6.3 tableSizeFor 方法</h3><p>这里讲一个 JDK8 中设计的非常巧妙的算法。看了好久才看懂。<br>出自<strong> tryPresize </strong> 方法中的以下位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//数组的最大容积为 1&lt;&lt;30 。如果数组大小超过 1&lt;&lt;29 ，则将最大大小设置为 MAXIMUM_CAPACITY</span><br><span class="line">//否则，设置为原来的两倍。</span><br><span class="line">private final void tryPresize(int size) &#123;</span><br><span class="line">    int c = (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; 1)) ? MAXIMUM_CAPACITY :</span><br><span class="line">        tableSizeFor(size + (size &gt;&gt;&gt; 1) + 1);</span><br></pre></td></tr></table></figure></p><p>下面让我们来分析一下，tableSizeFor()<br>这个算法的目的，是得出相比较于给定参数，返回一个<strong>刚好</strong>比参数大的 2次幂 整数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static final int tableSizeFor(int cap) &#123;</span><br><span class="line">    int n = cap - 1;</span><br><span class="line">    n |= n &gt;&gt;&gt; 1;</span><br><span class="line">    n |= n &gt;&gt;&gt; 2;</span><br><span class="line">    n |= n &gt;&gt;&gt; 4;</span><br><span class="line">    n |= n &gt;&gt;&gt; 8;</span><br><span class="line">    n |= n &gt;&gt;&gt; 16;</span><br><span class="line">    return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>先来分析有关n位操作部分：先来假设n的二进制为01xxx…xxx。接着<br>对n右移1位：001xx…xxx，再位或：011xx…xxx<br>对n右移2为：00011…xxx，再位或：01111…xxx<br>此时前面已经有四个1了，再右移4位且位或可得8个1<br>同理，有8个1，右移8位肯定会让后八位也为1。<br>综上可得，该算法让最高位的1后面的位全变为1。    </p><p>最后再让结果n+1，即得到了2的整数次幂的值了。</p><p>现在回来看看第一条语句：<br>int n = cap - 1;<br>　　让cap-1再赋值给n的目的是另找到的目标值大于或等于原值。例如二进制1000，十进制数值为8。如果不对它减1而直接操作，将得到答案10000，即16。显然不是结果。减1后二进制为111，再进行操作则会得到原来的数值1000，即8。</p><p>引用自(<a href="http://www.cnblogs.com/loading4/p/6239441.html" target="_blank" rel="noopener">http://www.cnblogs.com/loading4/p/6239441.html</a>)</p><h2 id="7-get-方法"><a href="#7-get-方法" class="headerlink" title="7. get 方法"></a>7. get 方法</h2><p>通过 key值 搜索 value 值。<br>并且要 通过分辨 结点的种类，进行不同形式的寻找。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public V get(Object key) &#123;  </span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; int n, eh; K ek;  </span><br><span class="line">        //计算hash值  </span><br><span class="line">        int h = spread(key.hashCode());  </span><br><span class="line">        //根据hash值确定节点位置  </span><br><span class="line">        if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;  </span><br><span class="line">            (e = tabAt(tab, (n - 1) &amp; h)) != null) &#123;  </span><br><span class="line">            //如果搜索到的节点key与传入的key相同且不为null,直接返回这个节点    </span><br><span class="line">            if ((eh = e.hash) == h) &#123;  </span><br><span class="line">                if ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek)))  </span><br><span class="line">                    return e.val;  </span><br><span class="line">            &#125;  </span><br><span class="line">            //如果eh&lt;0 说明这个节点在树上 直接寻找  </span><br><span class="line">            else if (eh &lt; 0)  </span><br><span class="line">                return (p = e.find(h, key)) != null ? p.val : null;  </span><br><span class="line">             //否则遍历链表 找到对应的值并返回  </span><br><span class="line">            while ((e = e.next) != null) &#123;  </span><br><span class="line">                if (e.hash == h &amp;&amp;  </span><br><span class="line">                    ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek))))  </span><br><span class="line">                    return e.val;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return null;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="8-Size相关"><a href="#8-Size相关" class="headerlink" title="8. Size相关"></a>8. Size相关</h2><p>《并发编程实战》中有提到，size返回的结果在计算时可能已经过期了，它实际上只是一个估计值，因此允许size返回一个近似值，而不是一个精确值。</p><h3 id="8-1-CounterCell-类"><a href="#8-1-CounterCell-类" class="headerlink" title="8.1 CounterCell 类"></a>8.1 CounterCell 类</h3><p>从注释中可以看出，这是从 LongAdder 类中的思想，拷贝过来的一个类。<br>LongAdder 类 是 JDK 1.8 新引进的类，其思想：</p><blockquote><p>多个线程持有自己的加数（cell),线程个数增加时，会自动提供新的加数。<br>当所有工作做完后，再提供新的加数。</p></blockquote><p>有时间写一篇相关的源码分析.</p><p>不过，这里一样不能精确统计，这里的 <strong>CounterCell 等同于 LongAdder.Cell</strong> <strong>sumCount() 等同于 LongAdder.sum()</strong>方法。<br>执行逻辑是一样的。<br>就 LongAdder 类中的 <strong>sum</strong> 方法所说， 当有线程在运行时，一样只是估计值，只有当所有线程执行完毕，才是实际值。<br>而统计 Size ，不能够像垃圾清除一样，有 Safe point 或 Safe region ，所以，这个假设不成立。。。</p><p>其相关的源码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    /**</span><br><span class="line">     * A padded cell for distributing counts.  Adapted from LongAdder</span><br><span class="line">     * and Striped64.  See their internal docs for explanation.</span><br><span class="line">     */</span><br><span class="line">    @sun.misc.Contended static final class CounterCell &#123;</span><br><span class="line">        volatile long value;</span><br><span class="line">        CounterCell(long x) &#123; value = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //执行逻辑</span><br><span class="line">    final long sumCount() &#123;</span><br><span class="line">    CounterCell[] as = counterCells; CounterCell a;</span><br><span class="line">    long sum = baseCount;</span><br><span class="line">    if (as != null) &#123;</span><br><span class="line">        for (int i = 0; i &lt; as.length; ++i) &#123;</span><br><span class="line">            if ((a = as[i]) != null)</span><br><span class="line">                sum += a.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-mappingCount-方法"><a href="#8-2-mappingCount-方法" class="headerlink" title="8.2 mappingCount 方法"></a>8.2 mappingCount 方法</h3><p>就官方文档中所说， mappingCount 方法，应该取代 size 方法，<br>但这个方法得出的值一样在线程运行的时候，只是一个估计的值。<br>从源码中就可以看出，使用的是上文分析的 sumCount() 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public long mappingCount() &#123;</span><br><span class="line">    long n = sumCount();</span><br><span class="line">    return (n &lt; 0L) ? 0L : n; // ignore transient negative values</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-addCount-方法"><a href="#8-3-addCount-方法" class="headerlink" title="8.3 addCount 方法"></a>8.3 addCount 方法</h3><p>出自于 <strong>put</strong> 方法的如下位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    //将当前ConcurrentHashMap的元素数量+1  </span><br><span class="line">    addCount(1L, binCount);  </span><br><span class="line">    return null;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计上：<br>这里用到 CounterCell类，并且统计的值的计算一样是采用的 sumCount() 方法。<br>所以缺点如上，不再阐述。<br>扩容上：<br>逻辑与 helpTransfer() 类似，都是判断是否有多个线程在执行扩容，然后判断是否需要辅助 transfer();<br>源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">private final void addCount(long x, int check) &#123;  </span><br><span class="line">        //用到了 CounterCell 类</span><br><span class="line">        CounterCell[] as; long b, s;  </span><br><span class="line">        //利用CAS方法更新baseCount的值   </span><br><span class="line">        if ((as = counterCells) != null ||  </span><br><span class="line">            !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) &#123;  </span><br><span class="line">            CounterCell a; long v; int m;  </span><br><span class="line">            boolean uncontended = true;  </span><br><span class="line">            if (as == null || (m = as.length - 1) &lt; 0 ||  </span><br><span class="line">                (a = as[ThreadLocalRandom.getProbe() &amp; m]) == null ||  </span><br><span class="line">                !(uncontended =  </span><br><span class="line">                  U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;  </span><br><span class="line">                fullAddCount(x, uncontended);  </span><br><span class="line">                return;  </span><br><span class="line">            &#125;  </span><br><span class="line">            if (check &lt;= 1)  </span><br><span class="line">                return;  </span><br><span class="line">            s = sumCount();  </span><br><span class="line">        &#125;  </span><br><span class="line">        //如果check值大于等于0 则需要检验是否需要进行扩容操作  </span><br><span class="line">        //下面的逻辑与 helpTransfer() 类似，可以与 helpTransfer() 一起参考。</span><br><span class="line">        if (check &gt;= 0) &#123;  </span><br><span class="line">            Node&lt;K,V&gt;[] tab, nt; int n, sc;  </span><br><span class="line">            while (s &gt;= (long)(sc = sizeCtl) &amp;&amp; (tab = table) != null &amp;&amp;  </span><br><span class="line">                   (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;  </span><br><span class="line">                int rs = resizeStamp(n);  </span><br><span class="line">                //如果已经有其他线程在执行扩容操作  </span><br><span class="line">                if (sc &lt; 0) &#123;  </span><br><span class="line">                    //校验失效，直接退出。</span><br><span class="line">                    if ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||  </span><br><span class="line">                        sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||  </span><br><span class="line">                        transferIndex &lt;= 0)  </span><br><span class="line">                        break;  </span><br><span class="line">                    </span><br><span class="line">                    if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))  </span><br><span class="line">                        transfer(tab, nt);  </span><br><span class="line">                &#125;  </span><br><span class="line">                //当前线程是唯一的或是第一个发起扩容的线程  此时nextTable=null  </span><br><span class="line">                else if (U.compareAndSwapInt(this, SIZECTL, sc,  </span><br><span class="line">                                             (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2))  </span><br><span class="line">                    transfer(tab, null);  </span><br><span class="line">                s = sumCount();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>喜欢的小伙伴可以点个关注，不定期干货更新<br>加油加油</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索为将 -- IKAnalyzer中文搜词器</title>
      <link href="/blogs/47564.html"/>
      <url>/blogs/47564.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在中文分词器中， IKAnalyzer 做的是相对不错的，有着细度分割和智能使用两个模式 。<br>但是，这个版本因为太陈旧，作者不再维护，（项目估计是。。。），所以与现在的Lucene 6.6 版本差距有些大。所以，我就根据网上各位大神的文章，加上自己对 API 与源码的阅读，稍微的进行了改动，可以简单的运行。<br><a id="more"></a><br><strong>注：</strong> 这里的简单是指，可以简单的运行<em>源码</em> 中的简单案例。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h3><ol><li>IKAnaylzer版本： IK Analyzer 2012FF<br>感谢提供的分词源码  <a href="http://git.oschina.net/wltea/IK-Analyzer-2012FF" target="_blank" rel="noopener">http://git.oschina.net/wltea/IK-Analyzer-2012FF</a></li><li>lucene 版本：lucene 6.60</li></ol><h3 id="代码改动"><a href="#代码改动" class="headerlink" title="代码改动"></a>代码改动</h3><h4 id="1-对IKTokenizer的改动"><a href="#1-对IKTokenizer的改动" class="headerlink" title="1. 对IKTokenizer的改动"></a>1. 对<strong>IKTokenizer</strong>的改动</h4><p>源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Lucene 4.0 Tokenizer适配器类构造函数</span><br><span class="line"> * @param in</span><br><span class="line"> * @param useSmart</span><br><span class="line"> */</span><br><span class="line">public IKTokenizer(Reader in, boolean useSmart) &#123;</span><br><span class="line">  super(in);</span><br><span class="line">  offsetAtt = addAttribute(OffsetAttribute.class);</span><br><span class="line">  termAtt = addAttribute(CharTermAttribute.class);</span><br><span class="line">  typeAtt = addAttribute(TypeAttribute.class);</span><br><span class="line">  _IKImplement = new IKSegmenter(input, useSmart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>经查阅 <strong>lucene</strong> 源码<br>Tokenizer类的构造器已经不再接收 Reader 源码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">protected Tokenizer() &#123;</span><br><span class="line">    this.input = ILLEGAL_STATE_READER;</span><br><span class="line">    this.inputPending = ILLEGAL_STATE_READER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected Tokenizer(AttributeFactory factory) &#123;</span><br><span class="line">    super(factory);</span><br><span class="line">    this.input = ILLEGAL_STATE_READER;</span><br><span class="line">    this.inputPending = ILLEGAL_STATE_READER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因此改动 <strong>IKTokenizer</strong> 类 ，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public IKTokenizer( boolean useSmart) &#123;</span><br><span class="line">    super();</span><br><span class="line">    offsetAtt = addAttribute(OffsetAttribute.class);</span><br><span class="line">    termAtt = addAttribute(CharTermAttribute.class);</span><br><span class="line">    typeAtt = addAttribute(TypeAttribute.class);</span><br><span class="line">    //传入 IKSegmenter 的 input Reader  流，会被 父类 Tokenizer 类的无参构造器</span><br><span class="line">    //初始化为 this.input = ILLEGAL_STATE_READER;</span><br><span class="line">    _IKImplement = new IKSegmenter(input, useSmart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>去除了 Reader 形参 。 默认调用 父类 的 无参构造函数 <em>Tokenizer()</em><br>注：在该<a href="https://m.baidu.com/from=1011440l/bd_page_type=1/ssid=0/uid=0/pu=usm%401%2Csz%40320_1001%2Cta%40iphone_2_6.0_3_537/baiduid=2E22EE2ECDC06CD17ECFCFDDC6786461/w=0_10_/t=iphone/l=3/tc?ref=www_iphone&amp;lid=14500985251722113881&amp;order=4&amp;fm=alop&amp;tj=www_normal_4_0_10_title&amp;vit=osres&amp;m=8&amp;srd=1&amp;cltj=cloud_title&amp;asres=1&amp;title=Solr6.5%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8-%E6%96%9C%E6%9C%88%E6%B8%85%E9%A3%8E-%E5%8D%9A%E5%AE%A2%E5%9B%AD&amp;dict=30&amp;w_qd=IlPT2AEptyoA_ykzqA5bxwGuCVNUi9m6GRaDshO5de2zGvhU4lk2mJaH&amp;sec=22624&amp;di=b5ccaf7d5d6ab0f1&amp;bdenc=1&amp;tch=124.252.31.809.1.274&amp;nsrc=IlPT2AEptyoA_yixCFOxXnANedT62v3IEQGG_ytK1DK6mlrte4viZQRAWzryL7mCIkm9w7aFcdkYwk0b3mRU8xl3qK6is8N8nyC-&amp;eqid=c93dd941c6133000100000055970d955&amp;wd=&amp;clk_info=%7B%22srcid%22%3A%221599%22%2C%22tplname%22%3A%22www_normal%22%2C%22t%22%3A1500567906532%2C%22sig%22%3A%2212311%22%2C%22xpath%22%3A%22div-a-h3-em%22%7D&amp;sfOpen=1&amp;winzoom=1" target="_blank" rel="noopener">博客</a>下发现，还需要配置分词器工厂类，因此还要多增加一段构造器代码，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//方便创建 工厂类</span><br><span class="line">public IKTokenizer(AttributeFactory factory, boolean useSmart) &#123;</span><br><span class="line">    super(factory);</span><br><span class="line">    offsetAtt = addAttribute(OffsetAttribute.class);</span><br><span class="line">    termAtt = addAttribute(CharTermAttribute.class);</span><br><span class="line">    typeAtt = addAttribute(TypeAttribute.class);</span><br><span class="line">    _IKImplement = new IKSegmenter(input, useSmart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-对IKAnalyzer-的改动"><a href="#2-对IKAnalyzer-的改动" class="headerlink" title="2. 对IKAnalyzer  的改动"></a>2. 对<strong>IKAnalyzer </strong> 的改动</h4><p>源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 重载Analyzer接口，构造分词组件</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">protected TokenStreamComponents createComponents(String fieldName, final Reader in) &#123;</span><br><span class="line">  Tokenizer _IKTokenizer = new IKTokenizer(in, this.useSmart());</span><br><span class="line">  return new TokenStreamComponents(_IKTokenizer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>lucene 6.6 关于 Analyzer 接口中 关于 createComponents() 方法的源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected abstract Analyzer.TokenStreamComponents createComponents(String var1);</span><br></pre></td></tr></table></figure></p><p>结合上文中对 IKTokenizer 源码的改动，因此需要去除  参数 Reader in<br>改动的代码 如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 重载Analyzer接口，构造分词组件</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">protected TokenStreamComponents createComponents(String fieldName) &#123;</span><br><span class="line">Tokenizer _IKTokenizer = new IKTokenizer(this.useSmart());</span><br><span class="line">return new Analyzer.TokenStreamComponents(_IKTokenizer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-对SWMCQueryBuilder-的改动"><a href="#3-对SWMCQueryBuilder-的改动" class="headerlink" title="3. 对SWMCQueryBuilder  的改动"></a>3. 对SWMCQueryBuilder  的改动</h4><p>源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 借助lucene queryparser 生成SWMC Query</span><br><span class="line">QueryParser qp = new QueryParser(Version.LUCENE_43, fieldName, new StandardAnalyzer(</span><br><span class="line">    Version.LUCENE_43));</span><br><span class="line">qp.setDefaultOperator(QueryParser.AND_OPERATOR);</span><br><span class="line">qp.setAutoGeneratePhraseQueries(true);</span><br></pre></td></tr></table></figure></p><p>由于新版本的  lucene 已经不在使用  Version 类 进行定义，（我的上一篇<a href="IKQueryExpressionParser">lucene6.6 学习心得</a>说的很清楚）因此需要将之移除。<br>移除后，改动版本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//借助lucene queryparser 生成SWMC Query</span><br><span class="line">QueryParser qp = new QueryParser(fieldName, new StandardAnalyzer());</span><br><span class="line">qp.setDefaultOperator(QueryParser.AND_OPERATOR);</span><br><span class="line">qp.setAutoGeneratePhraseQueries(true);</span><br></pre></td></tr></table></figure></p><h4 id="4-对IKQueryExpressionParser-的改动"><a href="#4-对IKQueryExpressionParser-的改动" class="headerlink" title="4. 对IKQueryExpressionParser  的改动"></a>4. 对<strong>IKQueryExpressionParser </strong> 的改动</h4><p>IKQueryExpressionParser 类中方法 BooleanQuery ，在近期的 lucene 中有了较大改动，不知道的话，可以 查阅我的上一篇文章<a href="https://my.oschina.net/kxln1314/blog/1477042" target="_blank" rel="noopener">lucene6.6 学习心得</a>.<br>因此源码中对 IKQueryExpressionParser 类中关于 BooleanQuery 的方法都需要进行更改。<br>因为方法中代码过多 ， 因此，我选取其中比较关键的几个地方，进行展示。<br>关键源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private Query toBooleanQuery(Element op) &#123;</span><br><span class="line">BooleanQuery resultQuery = new BooleanQuery();</span><br><span class="line">Query q2 = this.querys.pop();</span><br><span class="line">Query q1 = this.querys.pop();</span><br><span class="line">BooleanClause[] clauses = ((BooleanQuery) q1).getClauses();</span><br><span class="line">resultQuery.add(c);</span><br><span class="line">return resultQuery;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改动代码如下：<br>1.数组版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private Query toBooleanQuery(Element op)&#123;</span><br><span class="line">BooleanQuery.Builder builder = new BooleanQuery.Builder();</span><br><span class="line">Query q2 = this.querys.pop();    </span><br><span class="line">Query q1 = this.querys.pop();</span><br><span class="line"></span><br><span class="line"> //因为，我看源码，并没有发现会增删的地方 ，于是直接转成了数组 </span><br><span class="line">//迭代器版本的在下文</span><br><span class="line">if(q1 instanceof BooleanQuery)&#123;    </span><br><span class="line">    BooleanClause[] clauses =(BooleanClause[]) ((BooleanQuery)q1).clauses().toArray();</span><br><span class="line"> if(clauses.length &gt; 0</span><br><span class="line">    &amp;&amp; clauses[0].getOccur() == Occur.MUST)&#123;</span><br><span class="line">    for(BooleanClause c : clauses)&#123;</span><br><span class="line">        builder.add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">    builder.add(q1,Occur.MUST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     return builder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.迭代器版本    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private Query toBooleanQuery(Element op)&#123;</span><br><span class="line">BooleanQuery.Builder builder = new BooleanQuery.Builder();</span><br><span class="line"></span><br><span class="line">Query q2 = this.querys.pop();    </span><br><span class="line">Query q1 = this.querys.pop();</span><br><span class="line"></span><br><span class="line">if(q1 instanceof BooleanQuery)&#123;</span><br><span class="line">    Iterator&lt;BooleanClause&gt; clauses = ((BooleanQuery) q1).iterator();</span><br><span class="line">    while (clauses.hasNext()) &#123;</span><br><span class="line">    BooleanClause clause = clauses.next();</span><br><span class="line">    if (clause.getOccur() == Occur.MUST) &#123;</span><br><span class="line">    builder.add(clause);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    builder.add(q1,Occur.MUST);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line">return builder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-项目运行"><a href="#5-项目运行" class="headerlink" title="5. 项目运行"></a>5. 项目运行</h4><p>打开包中的测试代码<br>1.IKAnalzyerDemo<br>运行结果如下图<br><img src="https://static.oschina.net/uploads/img/201707/21162511_ZqhY.png" alt="输入图片说明"></p><p>2.LuceneIndexAndSearchDemo<br>运行结果如下图    </p><p><img src="https://static.oschina.net/uploads/img/201707/21162655_jwKt.png" alt="输入图片说明"></p><h4 id="6-源码与整合包的下载"><a href="#6-源码与整合包的下载" class="headerlink" title="6. 源码与整合包的下载"></a>6. 源码与整合包的下载</h4><p>源码与整合包 已经上传至我的 <a href="https://github.com/Cupid13/IKAnalyzer/tree/master" target="_blank" rel="noopener">GitHub</a>  上，有兴趣的可以去那里下载，不嫌弃的话，<strong>Star</strong> 一下 ，也是可以的哦~</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索为将 -- Solr 从入门到进阶(一)</title>
      <link href="/blogs/27541.html"/>
      <url>/blogs/27541.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文首发于 个人博客 <a href="https://segmentfault.com/a/1190000010387238" target="_blank" rel="noopener">初心阁</a></p></blockquote><h1 id="一、版本介绍"><a href="#一、版本介绍" class="headerlink" title="一、版本介绍"></a>一、版本介绍</h1><p>tomcat 9<br>JDK 1.8<br>solr 6.6    </p><h1 id="二、流程介绍"><a href="#二、流程介绍" class="headerlink" title="二、流程介绍"></a>二、流程介绍</h1><ol><li><p>官网下载 solr 6.6 然后解压到文件夹。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709021716_605.png" alt=""></p></li><li><p>将 server/server-webapp 下的 webapp 复制到 tomcat 的 webapp 包下<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709021719_309.png" alt=""><br>并改名为 solr </p></li><li><p>打开 在 tomcat 下的 solr 项目， solr ( webapp 改名后的solr ）/WEB-INF/web.xml 文件，在开头找到类似代码，取消注释并修改，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;env-entry&gt;</span><br><span class="line">   &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt;</span><br><span class="line">   &lt;env-entry-value&gt;D:/Programme/0-Java/J_workspace/solr_home&lt;/env-entry-value&gt;</span><br><span class="line">   &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;</span><br><span class="line">&lt;/env-entry&gt;</span><br></pre></td></tr></table></figure></li></ol><p>注：此处是我的 solrhome 的文件位置 ， 你可以自行设置 </p><ol start="4"><li><p>将 server/lib 下的 metrics-<em>.jar 包 与 dist 下的 solr-dataimporthandler-</em> .jar 包 复制到你在tomcat / webapp 下的 solr /WEB-INF/ lib 目录中。</p></li><li><p>将 server/resources 目录下的 log4j.properties 文件 拷贝到 tomcat/webapp/solr/WEB-INF/classes 目录下，没有，就自己新建一个。</p></li><li><p>自己根据上文 web.xml 中配置的 solr/home 信息，建立 solr_home 文件夹 。并将 server / solr  下的文件全部 拷贝到 solr_home 文件夹下。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709021714_147.png" alt=""></p></li><li><p>在 solr_home 目录下建立一个 文件夹，new_core 作为 你 的solr_core。并将 上图中 configsets / sample_techproducts_configs 目录下的 conf 文件夹 拷贝到 new_core 文件夹下。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709021729_433.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709021730_423.png" alt=""></p></li><li><p>配置 lib 标签。<br> 将 solr 6.6 压缩包内的 contrib 与 dist 文件夹 复制到 solr_home 文件夹下。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709021731_761.png" alt=""><br> 打开 new_core/conf/solrconfig.xml 文件，从中找到如下代码形式。    </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;lib dir=&quot;$&#123;solr.install.dir:</span><br></pre></td></tr></table></figure><p> 将之更改为如下形式</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;lib dir=&quot;$&#123;solr.install.dir:..&#125;/contrib/extraction/lib&quot; regex=&quot;.*\.jar&quot; /&gt;</span><br><span class="line">&lt;lib dir=&quot;$&#123;solr.install.dir:..&#125;/dist/&quot; regex=&quot;solr-cell-\d.*\.jar&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;lib dir=&quot;$&#123;solr.install.dir:..&#125;/contrib/clustering/lib/&quot; regex=&quot;.*\.jar&quot; /&gt;</span><br><span class="line">&lt;lib dir=&quot;$&#123;solr.install.dir:..&#125;/dist/&quot; regex=&quot;solr-clustering-\d.*\.jar&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;lib dir=&quot;$&#123;solr.install.dir:..&#125;/contrib/langid/lib/&quot; regex=&quot;.*\.jar&quot; /&gt;</span><br><span class="line">&lt;lib dir=&quot;$&#123;solr.install.dir:..&#125;/dist/&quot; regex=&quot;solr-langid-\d.*\.jar&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;lib dir=&quot;$&#123;solr.install.dir:..&#125;/contrib/ltr/lib/&quot; regex=&quot;.*\.jar&quot; /&gt;</span><br><span class="line">&lt;lib dir=&quot;$&#123;solr.install.dir:..&#125;/dist/&quot; regex=&quot;solr-ltr-\d.*\.jar&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;lib dir=&quot;$&#123;solr.install.dir:..&#125;/contrib/velocity/lib&quot; regex=&quot;.*\.jar&quot; /&gt;</span><br><span class="line">&lt;lib dir=&quot;$&#123;solr.install.dir:..&#125;/dist/&quot; regex=&quot;solr-velocity-\d.*\.jar&quot; /&gt;</span><br></pre></td></tr></table></figure><p> 解释一下，这里的根目录是 你自身的 solr_core 目录。对我来说 ，就是 new_core 所在的目录。</p><p> 所以 </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">../  == solr_home 目录</span><br></pre></td></tr></table></figure></li><li><p>成果展示<br>打开<a href="http://localhost:8080/solr/index.html" target="_blank" rel="noopener">http://localhost:8080/solr/index.html</a> 会出现如下画面<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709021737_568.png" alt=""></p></li></ol><h1 id="三、可能出现的异常"><a href="#三、可能出现的异常" class="headerlink" title="三、可能出现的异常"></a>三、可能出现的异常</h1><p>根据这位博主的文章<a href="http://www.jianshu.com/p/dd7a59b3f0b5" target="_blank" rel="noopener">http://www.jianshu.com/p/dd7a59b3f0b5</a></p><p>总结如下：</p><p>1.启动tomcat时如果报下面的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">严重: Exception starting filter SolrRequestFilter</span><br><span class="line">java.lang.NoClassDefFoundError: com/codahale/metrics/MetricSetat java.lang.Class.getDeclaredConstructors0(Native Method)</span><br><span class="line">at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)</span><br><span class="line">at java.lang.Class.getConstructor0(Class.java:3075)at java.lang.Class.newInstance(Class.java:412)</span><br><span class="line">at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:119)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterConfig.getFilter(ApplicationFilterConfig.java:258)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterConfig.&lt;init&gt;(ApplicationFilterConfig.java:105)</span><br><span class="line">at org.apache.catalina.core.StandardContext.filterStart(StandardContext.java:4700)</span><br><span class="line">at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5340)</span><br><span class="line">at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:145)</span><br><span class="line">at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:753)</span><br><span class="line">at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:729)</span><br><span class="line">at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:717)</span><br><span class="line">at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1092)</span><br><span class="line">at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1834)</span><br><span class="line">at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</span><br><span class="line">at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class="line">at java.lang.Thread.run(Thread.java:745)Caused by: java.lang.ClassNotFoundException:com.codahale.metrics.MetricSet</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1333)</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1167)</span><br><span class="line">... 20 more</span><br></pre></td></tr></table></figure><blockquote><p>请把solr-6.4.1/server/lib下的metrics-core-3.1.2.jar，metrics-ganglia-3.1.2.jar,metrics-graphite-3.1.2.jar,metrics-jetty9-3.1.2.jar,metrics-jvm-3.1.2.jar这几个jar包放到tomcat下的solr项目的WEB-INF/lib目录下。</p></blockquote><p>2.访问<a href="http://localhost:8080/solr/index.html时如果报下面的错误：" target="_blank" rel="noopener">http://localhost:8080/solr/index.html时如果报下面的错误：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP Status 403 - Access to the requested resource has been denied</span><br></pre></td></tr></table></figure><p>把tomcat下的solr项目的web.xml文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;security-constraint&gt;</span><br><span class="line">  &lt;web-resource-collection&gt;</span><br><span class="line">    &lt;web-resource-name&gt;Disable TRACE&lt;/web-resource-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;http-method&gt;TRACE&lt;/http-method&gt;</span><br><span class="line">  &lt;/web-resource-collection&gt;</span><br><span class="line">  &lt;auth-constraint/&gt;</span><br><span class="line">&lt;/security-constraint&gt;</span><br><span class="line">&lt;security-constraint&gt;</span><br><span class="line">  &lt;web-resource-collection&gt;</span><br><span class="line">    &lt;web-resource-name&gt;Enable everything but TRACE&lt;/web-resource-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;http-method-omission&gt;TRACE&lt;/http-method-omission&gt;</span><br><span class="line">  &lt;/web-resource-collection&gt;</span><br><span class="line">&lt;/security-constraint&gt;</span><br></pre></td></tr></table></figure><p>这段注释掉。这段配置限制了对solr资源的访问，注释掉就可以访问了。</p><p>3.java.lang.NoSuchMethodError:</p><blockquote><p>解决：solr5.5以上版本在tomcat8下运行<br>由于solr5.5.0和solr5.5.1 版本部署在tomcat7下的时候，会报Java.lang.NoSuchMethodError: javax.servlet.ServletInputStream.isFinished()Z的错误，这个是serverlet3.1才有的方法。</p></blockquote><p>4.javax.servlet.ServletInputStream.isFinished</p><blockquote><p>解决：solr5版本以上的部署最好使用JDK1.8<br>solr5版本以上的部署最好使用JDK1.8，虽然官网没有明确表示solr5必须是要使用JDK1.8，但是其中一部分功能锁需求的JDK版本在JDK1.7以下是没有的<br>比如：Java.lang.NoSuchMethodError: javax.servlet.ServletInputStream.isFinished()Z<br>我是在全量索引的时候发生的此异常提示：找不到ServletInputStream类下面的isFinished()方法，那么现在我们找到该类ServletInputStream<br>如果在这个类下面没有isFinished()方法，那就是JAR包问题，这个类所在的jar包是servlet-api.jar</p></blockquote><p>5.待解决：</p><p>web.xml 文件中 的 <strong><welcome-file-list></welcome-file-list></strong> 标签失效的原因 。</p><p>正常部署后，直接访问 localhost:8080/solr 应该就可以使用，但是，会出现不能加载 UI 的说明。</p><p>只有访问 localhost:8080/solr/index.html 才可以正常加载。</p><p>分析web.xml 文件，发现一段 servlet 配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;LoadAdminUI&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;org.apache.solr.servlet.LoadAdminUiServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;LoadAdminUI&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/index.html&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>但是，自己太菜，分析不出原因。所以还需要，之后的学习中多注意。</p><h1 id="四、与中文分词器的适配"><a href="#四、与中文分词器的适配" class="headerlink" title="四、与中文分词器的适配"></a>四、与中文分词器的适配</h1><h2 id="1-smart-cn"><a href="#1-smart-cn" class="headerlink" title="1.smart-cn"></a>1.smart-cn</h2><p>从 solr-6.6.0/contrib/analysis-extras/lucene-libs 下拷贝 lucene-analyzers-smartcn-6.6.0 到      apache-tomcat-9.0.0.M20/webapps/solr/WEB-INF/lib 目录下。</p><ol><li>打开 solrhome\new_core\conf 下的managed-scheme 文档</li><li>加入以下内容 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;fieldType name=&quot;text_sm&quot; class=&quot;solr.TextField&quot;&gt;</span><br><span class="line">    &lt;analyzer class=&quot;org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer&quot; /&gt;</span><br><span class="line">&lt;/fieldType&gt;</span><br></pre></td></tr></table></figure><p>或者可以使用TokenizerFactory<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;fieldType name=&quot;text_sm&quot; class=&quot;solr.TextField&quot; &gt;</span><br><span class="line">    &lt;analyzer type=&quot;index&quot;&gt;</span><br><span class="line">      &lt;tokenizer class=&quot;org.apache.lucene.analysis.cn.smart.HMMChineseTokenizerFactory&quot;/&gt;</span><br><span class="line">    &lt;/analyzer&gt;</span><br><span class="line">    &lt;analyzer type=&quot;query&quot;&gt;</span><br><span class="line">       &lt;tokenizer class=&quot;org.apache.lucene.analysis.cn.smart.HMMChineseTokenizerFactory&quot;/&gt;</span><br><span class="line">    &lt;/analyzer&gt;</span><br><span class="line">&lt;/fieldType&gt;</span><br></pre></td></tr></table></figure></p><h2 id="2-IKAnalyzer"><a href="#2-IKAnalyzer" class="headerlink" title="2.IKAnalyzer"></a>2.IKAnalyzer</h2><p>这里有最新适配 solr6.6 的 IKAnalyzer,这里是 <a href="http://localhost:4000/blogs/47564.html" target="_blank" rel="noopener">适配攻略</a><br>进入可下载. <a href="https://github.com/3Dot141/IKAnalyzer" target="_blank" rel="noopener">下载地址</a><br>下载后，将IKAnalyzer.jar 包 拷贝到 apache-tomcat-9.0.0.M20/webapps/solr/WEB-INF/lib 目录下</p><ol><li>打开 solrhome\new_core\conf 下的managed-scheme 文档</li><li>加入以下内容</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextField&quot;&gt;</span><br><span class="line">&lt;analyzer class=&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot; /&gt;</span><br><span class="line">&lt;/fieldType&gt;</span><br></pre></td></tr></table></figure><p>或者可以使用TokenizerFactory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextField&quot;&gt;</span><br><span class="line">    &lt;analyzer type=&quot;index&quot;&gt;</span><br><span class="line">      &lt;tokenizer class=&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot;/&gt;</span><br><span class="line">    &lt;/analyzer&gt;</span><br><span class="line">    &lt;analyzer type=&quot;query&quot;&gt;</span><br><span class="line">       &lt;tokenizer class=&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot;/&gt;</span><br><span class="line">    &lt;/analyzer&gt;</span><br><span class="line">&lt;/fieldType&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>成果展示<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709021846_228.png" alt="输入图片说明"></li></ol><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>以上就是对 solr 进行的一些简单操作，下一篇文章将会介绍如何将 solr 与 java 、 mysql 数据库结合起来，使用。</p><blockquote><p>喜欢的话可以点一下收藏，与关注哦~，码字不易。<br>谢谢~~~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>killBase系列 -- C/S 与 B/S 架构的区别</title>
      <link href="/blogs/3153.html"/>
      <url>/blogs/3153.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、C-S-架构"><a href="#一、C-S-架构" class="headerlink" title="一、C/S 架构"></a>一、C/S 架构</h3><p>1、 概念<br>C/S 架构是一种典型的两层架构，其全程是Client/Server，即客户端服务器端架构，其客户端包含一个或多个在用户的电脑上运行的程序，而服务器端有两种，一种是数据库服务器端，客户端通过数据库连接访问服务器端的数据；另一种是Socket服务器端，服务器端的程序通过Socket与客户端的程序通信。<br>C/S 架构也可以看做是胖客户端架构。因为客户端需要实现绝大多数的业务逻辑和界面展示。这种架构中，作为客户端的部分需要承受很大的压力，因为显示逻辑和事务处理都包含在其中，通过与数据库的交互（通常是SQL或存储过程的实现）来达到持久化数据，以此满足实际项目的需要。<br>2 、优点和缺点<br>优点：<br>2.1 C/S架构的界面和操作可以很丰富。<br>2.2 安全性能可以很容易保证，实现多层认证也不难。<br>2.3 由于只有一层交互，因此响应速度较快。<br>缺点：<br>2.4 适用面窄，通常用于局域网中。<br>2.5 用户群固定。由于程序需要安装才可使用，因此不适合面向一些不可知的用户。<br>2.6 维护成本高，发生一次升级，则所有客户端的程序都需要改变。</p><h3 id="二、B-S架构"><a href="#二、B-S架构" class="headerlink" title="二、B/S架构"></a>二、B/S架构</h3><p>1、概念<br>B/S架构的全称为Browser/Server，即浏览器/服务器结构。Browser指的是Web浏览器，极少数事务逻辑在前端实现，但主要事务逻辑在服务器端实现，Browser客户端，WebApp服务器端和DB端构成所谓的三层架构。B/S架构的系统无须特别安装，只有Web浏览器即可。<br>B/S架构中，显示逻辑交给了Web浏览器，事务处理逻辑在放在了WebApp上，这样就避免了庞大的胖客户端，减少了客户端的压力。因为客户端包含的逻辑很少，因此也被成为瘦客户端。<br>2 、优点和缺点<br>优点：<br>1）客户端无需安装，有Web浏览器即可。<br>2）BS架构可以直接放在广域网上，通过一定的权限控制实现多客户访问的目的，交互性较强。<br>3）BS架构无需升级多个客户端，升级服务器即可。<br>缺点：<br>1）在跨浏览器上，BS架构不尽如人意。<br>2）表现要达到CS程序的程度需要花费不少精力。<br>3）在速度和安全性上需要花费巨大的设计成本，这是BS架构的最大问题。<br>4）客户端服务器端的交互是请求-响应模式，通常需要刷新页面，这并不是客户乐意看到的。（在Ajax风行后此问题得到了一定程度的缓解）</p><h3 id="三、B-S对C-S的改进和扩展"><a href="#三、B-S对C-S的改进和扩展" class="headerlink" title="三、B/S对C/S的改进和扩展"></a>三、B/S对C/S的改进和扩展</h3><p>正如前文所说，C/S和B/S都可以进行同样的业务处理，但是B/S随着Internet技术的兴起，是对C/S结构的一种改进或者扩展的结构。相对于C/S，B/S具有如下优势：<br>1、分布性：可以随时进行查询、浏览等业务<br>2、业务扩展方便：增加网页即可增加服务器功能<br>3、维护简单方便：改变网页，即可实现所有用户同步更新<br>4、开发简单，共享性强，成本低，数据可以持久存储在云端而不必担心数据的丢失。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索为将 -- lucene 6.6 学习心得</title>
      <link href="/blogs/43623.html"/>
      <url>/blogs/43623.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文首发于<a href="https://segmentfault.com/a/1190000010367206" target="_blank" rel="noopener">segmentfault的个人专栏</a><br>学习的资料是 lucene 4.10 版本，比较沉旧，查阅最新的 lucene 版本 6.6 的官方文档，整理出以下几个使用中的不同。<br>从浅入深依次为    （注：不是根据版本先后）</p><ol><li>IndexWriterConfig 的构造方法</li><li>Directory 的生成方法 FSDirectory.open()</li><li>legacy<strong>XX</strong>Field 与legacy<strong>Numeric</strong>RangeQuery 的废弃</li><li>BooleanQuery() 方法的改变</li><li>setBoost()方法的废除    </li><li>中文分词器的改进</li></ol><p>下面，就让我详细的整理出不同。</p><h2 id="1-IndexWriterConfig"><a href="#1-IndexWriterConfig" class="headerlink" title="1.IndexWriterConfig"></a>1.IndexWriterConfig</h2><p>以下是 IndexWriterConfig 4.10 的源码部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public IndexWriterConfig(Version matchVersion, Analyzer analyzer) &#123;</span><br><span class="line">    super(analyzer, matchVersion);</span><br><span class="line">&#125;</span><br><span class="line">//这里的version 一般要写为     </span><br><span class="line">Version 类中</span><br><span class="line">public static final Version LATEST;</span><br></pre></td></tr></table></figure></p><p>而 IndexWriterConfig 6.6 中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//无参构造方法 </span><br><span class="line">public IndexWriterConfig() &#123;</span><br><span class="line">    this(new StandardAnalyzer());</span><br><span class="line">&#125;</span><br><span class="line">//有参构造方法</span><br><span class="line">public IndexWriterConfig(Analyzer analyzer) &#123;</span><br><span class="line">    super(analyzer);</span><br><span class="line">    this.writer = new SetOnce();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出，在 6.6 版本中 version 不再是必要的，并且，存在无参构造方法，可以直接使用默认的 StandardAnalyzer 分词器。</p><h2 id="2-Directory"><a href="#2-Directory" class="headerlink" title="2.Directory"></a>2.Directory</h2><p>正常创建 Directory 类的方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Directory di = FSdirectory.open();</span><br></pre></td></tr></table></figure></p><p>以下是 IndexWriterConfig 4.10 的源码部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static FSDirectory open(File path) throws IOException &#123;</span><br><span class="line">    return open(path, (LockFactory)null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里可以看出 open 方法 用的参数类型 为File</p><p>而 IndexWriterConfig 6.6 中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static FSDirectory open(Path path) throws IOException &#123;</span><br><span class="line">    return open(path, FSLockFactory.getDefault());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>open</strong> 方法使用了 <strong>Path</strong> 类，这个类是 NIO 中的类，可以提高查询的效率。<br>由 File 转化为 Path 的 方法<br>—&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File file = new File (absolutePath);</span><br><span class="line">Path path = file.toPath()</span><br></pre></td></tr></table></figure></p><h2 id="3-legacyXXField-与legacyNumericRangeQuery"><a href="#3-legacyXXField-与legacyNumericRangeQuery" class="headerlink" title="3.legacyXXField 与legacyNumericRangeQuery"></a>3.legacyXXField 与legacyNumericRangeQuery</h2><h3 id="1-分析"><a href="#1-分析" class="headerlink" title="1. 分析"></a>1. 分析</h3><p>根据 官方的 <a href="https://lucene.apache.org/core/6_6_0/index.html" target="_blank" rel="noopener">Migration Guide</a> 中的说法</p><blockquote><p>PointValues replaces NumericField (LUCENE-6917)    </p></blockquote><blockquote><p>PointValues provides faster indexing and searching, a smaller index size, and less heap used at search time. See org.apache.lucene.index.PointValues for an introduction.    </p></blockquote><blockquote><p>Legacy numeric encodings from previous versions of Lucene are deprecated as LegacyIntField, LegacyFloatField, LegacyLongField, and LegacyDoubleField, and can be searched with LegacyNumericRangeQuery.</p></blockquote><p>以及<a href="https://issues.apache.org/jira/browse/LUCENE-6917" target="_blank" rel="noopener">开发者的测试</a></p><blockquote><p>DimensionalValues seems to be better across the board (indexing time, indexing size, search-speed, search-time heap required) than NumericField, at least in my testing so far.<br>I think for 6.0 we should move IntField, LongField, FloatField, DoubleField and NumericRangeQuery to backward-codecs, and rename with Legacy prefix?</p></blockquote><h3 id="2-结论："><a href="#2-结论：" class="headerlink" title="2.结论："></a>2.结论：</h3><blockquote><p>   <strong>PointValues</strong> 取代了<strong>NumericField</strong><br>    因为PointValues 更快，更小，更便于资源的利用。所以，所有的 legacy**都被取代了。</p></blockquote><h3 id="3-代码对比"><a href="#3-代码对比" class="headerlink" title="3.代码对比"></a>3.代码对比</h3><p>代码的话，<a href="https://lucene.apache.org/core/6_6_0/core/index.html" target="_blank" rel="noopener">lucene 的官方文档</a>给了一个简单的例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// add year 1970 to document</span><br><span class="line">document.add(new IntPoint(&quot;year&quot;, 1970));</span><br><span class="line">// index document</span><br><span class="line">writer.addDocument(document);</span><br><span class="line">...</span><br><span class="line">// issue range query of 1960-1980</span><br><span class="line">Query query = IntPoint.newRangeQuery(&quot;year&quot;, 1960, 1980);</span><br><span class="line">TopDocs docs = searcher.search(query, ...);</span><br></pre></td></tr></table></figure></p><p>另外我自己写了一个 已经<strong>@Deprecated</strong>的方法 与上面 进行对比<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   // add year 1970 to document</span><br><span class="line">document.add(new IntField(&quot;year&quot;, 1970));</span><br><span class="line">// index document</span><br><span class="line">writer.addDocument(document);</span><br><span class="line">...</span><br><span class="line">// issue range query of 1960-1980</span><br><span class="line">Query query = new NumericRangeQuery(&quot;year&quot;, 1960, 1980,false,false);</span><br><span class="line">TopDocs docs = searcher.search(query, ...);</span><br></pre></td></tr></table></figure></p><p><strong>还要注意的是:</strong>    </p><ol><li>如果要存储，必须创建同名的StoredField类</li><li>如果要排序使用，必须同时创建同名的StoredField类与NumericDocValuesField类<br> 例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doc.add(new NumericDocValuesField(&quot;price&quot;,price));  </span><br><span class="line">doc.add(new IntPoint(&quot;price&quot;,price));  </span><br><span class="line">doc.add(new StoredField(&quot;price&quot;,price));</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-BooleanQuery-的构造方法改变"><a href="#4-BooleanQuery-的构造方法改变" class="headerlink" title="4.BooleanQuery() 的构造方法改变"></a>4.BooleanQuery() 的构造方法改变</h2><h3 id="1-分析-1"><a href="#1-分析-1" class="headerlink" title="1.分析"></a>1.分析</h3><p>根据 官方的 <a href="https://lucene.apache.org/core/6_6_0/index.html" target="_blank" rel="noopener">Migration Guide</a> 中的说法</p><blockquote><p>PhraseQuery, MultiPhraseQuery, and BooleanQuery made immutable (LUCENE-6531 LUCENE-7064 LUCENE-6570)<br>也就是说， BooleanQuery这个类 一旦建立就不能再改变了。    </p></blockquote><p>从源码中我们可以更好的看出改变<br>lucene 4.10 的源码里 BooleanQuery 的类 主要方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/* 构造器*/</span><br><span class="line">public BooleanQuery() &#123;</span><br><span class="line">    this.disableCoord = false;</span><br><span class="line">&#125;</span><br><span class="line">public BooleanQuery(boolean disableCoord) &#123;</span><br><span class="line">    this.disableCoord = disableCoord;</span><br><span class="line">&#125;</span><br><span class="line">/*主要方法*/</span><br><span class="line">public void add(BooleanClause clause) &#123;</span><br><span class="line">    if(this.clauses.size() &gt;= maxClauseCount) &#123;</span><br><span class="line">        throw new BooleanQuery.TooManyClauses();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.clauses.add(clause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> lucene 6.6 的源码里， BooleanQuery 的主要方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private BooleanQuery(boolean disableCoord, int minimumNumberShouldMatch, BooleanClause[] clauses)</span><br></pre></td></tr></table></figure></p><p>可以看出 ， BooleanQuery 的构造器的范围是<strong> private </strong>的，只能在类的内部调用。<br>并且最大的改变是多出了静态内部类 <strong>Builder</strong><br>以下是 Builder 的部分源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static class Builder &#123;</span><br><span class="line">    private boolean disableCoord;</span><br><span class="line">    private int minimumNumberShouldMatch;</span><br><span class="line">    private final List&lt;BooleanClause&gt; clauses = new ArrayList();</span><br><span class="line">    /* 无参构造器 */</span><br><span class="line">    // 相当于 BooleanQuery 的 构造器</span><br><span class="line">    public Builder() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    //相当于 BooleanQuery 的 add 方法</span><br><span class="line">    public BooleanQuery.Builder add(Query query, Occur occur) &#123;</span><br><span class="line">        return this.add(new BooleanClause(query, occur));</span><br><span class="line">    &#125;</span><br><span class="line">    //返回值是 BooleanQuery, 构造一个BooleanQuery 类。</span><br><span class="line">    public BooleanQuery build() &#123;</span><br><span class="line">        return new BooleanQuery(this.disableCoord, this.minimumNumberShouldMatch, (BooleanClause[])this.clauses.toArray(new BooleanClause[0]), null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-结论"><a href="#2-结论" class="headerlink" title="2.结论"></a>2.结论</h3><p>通过用静态内部类实例化自身的方法，加强了类自身的稳定性与安全性。避免可能发生的小意外，而导致代码出现问题的可能性</p><h3 id="3-代码对比-1"><a href="#3-代码对比-1" class="headerlink" title="3.代码对比"></a>3.代码对比</h3><p>下面给出代码，可以更好的看出差别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//原先的 使用方法</span><br><span class="line">BooleanQuery bq = new BooleanQuery();     </span><br><span class="line">bq.add(q1, Occur.SHOULD);     </span><br><span class="line">bq.add(q2, Occur.SHOULD); bq.add(q3, Occur.MUST); </span><br><span class="line"></span><br><span class="line">//现在的 使用方法</span><br><span class="line">BooleanQuery bq = new BooleanQuery.Builder()</span><br><span class="line">                                     .add(q1, Occur.SHOULD)    </span><br><span class="line">                                     .add(q2, Occur.SHOULD)</span><br><span class="line">                                     .add(q3, Occur.SHOULD)</span><br><span class="line">                                     .build();</span><br></pre></td></tr></table></figure></p><h2 id="5-setBoost-方法的废除"><a href="#5-setBoost-方法的废除" class="headerlink" title="5. setBoost()方法的废除"></a>5. setBoost()方法的废除</h2><p>在 lucene 4.10 包中， setBoost方法被用于 相关度 的排序中。改变创建索引时的 Boost – 权值。根据一系列计算方法 （旧版采用的 <strong>空间向量模型算法</strong>），最终得出其打分。<br>代码如下 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Field fi1 = <span class="keyword">new</span> Field(<span class="string">"id"</span> , <span class="number">1</span>, STORE.YES)；</span><br><span class="line"><span class="comment">// Boost 值默认为 1.0f </span></span><br><span class="line">fi1.setBoost(<span class="number">100f</span>)</span><br><span class="line">Document <span class="keyword">do</span> = <span class="keyword">new</span> Document();</span><br><span class="line"><span class="keyword">do</span>.add(fi1);</span><br></pre></td></tr></table></figure><p>而在新版 lucene 6.6 中， setBoost 方法被 废除<br>根据<a href="https://lucene.apache.org/core/6_6_0/core/index.html" target="_blank" rel="noopener">lucene 的官方文档</a>中的说法</p><blockquote><p>org.apache.lucene.document.Field.setBoost(float)<br>Index-time boosts are deprecated, please index index-time scoring factors into a doc value field and combine them with the score at query time using eg. FunctionScoreQuery.</p></blockquote><blockquote><p>中文翻译后：<br>索引时权值被废除，请将索引时打分因素添加入field域中，然后在查询时，使用功能性打分查询语句，进行关联查询。</p></blockquote><blockquote><p>我在查看了 大部分关联的 api 后，发现了几个与之相关的 类    </p><ol><li>BoostAttribute</li><li>termsEnum</li><li>MultiQuery    </li></ol></blockquote><blockquote><p><a href="https://lucene.apache.org/core/6_6_0/core/index.html" target="_blank" rel="noopener">lucene 的官方文档</a>中对 BoostAttribute 的描述是这样的。<br>BoostAttribute    —   &gt;<br>Add this Attribute to a TermsEnum returned by MultiTermQuery.getTermsEnum(Terms,AttributeSource) and update the boost on each returned term.<br>方法描述如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected abstract TermsEnum getTermsEnum(Terms terms,AttributeSource atts)</span><br><span class="line">//Construct the enumeration to be used, expanding the pattern term.</span><br><span class="line">//很明显，这是个抽象方法，必须由子类实现</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p><strong>BoostAttribute </strong>是个接口，其实现类 BoostAttributeImpl 中源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public BoostAttributeImpl() &#123;</span><br><span class="line">&#125;</span><br><span class="line">public void setBoost(float boost) &#123;</span><br><span class="line">    this.boost = boost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>推测使用如下     —  以下是伪代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//设置 Boost 属性</span><br><span class="line">BoostAttribute ba = new BoostAttributeImpl();</span><br><span class="line">ba.setBoost(100f);</span><br><span class="line">//设置 Query 的实现类</span><br><span class="line">Query query =  new MultiTermqueryChildren(new Terms（)）;</span><br><span class="line">TermEnum te = query.getTermsEnum(Terms,ba);</span><br></pre></td></tr></table></figure><p><strong>具体方法还不清楚，希望知道的大神可以给我解答</strong> </p><p>另外，还有两个便于操作的类：</p><ol><li>BoostQuery</li><li>MultiFieldQueryParser</li></ol><h3 id="1-BoostQuery"><a href="#1-BoostQuery" class="headerlink" title="1.BoostQuery"></a>1.BoostQuery</h3><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BoostQuery</span><span class="params">(Query query, <span class="keyword">float</span> boost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.query = (Query)Objects.requireNonNull(query);</span><br><span class="line">    <span class="keyword">this</span>.boost = boost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：<br>相当于一个包装类，将 Query 设置 Boost 值 ，然后包装起来。<br>再通过复合查询语句，可以突出 Query 的优先级。    </p><p>使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//查询 索引域 中的 file_name , file_content</span></span><br><span class="line">Query q1 = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(“file_name” ,”springmvc.txt”);</span><br><span class="line">Query q2 = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(“file_content”,”springmvc.txt”);</span><br><span class="line"><span class="comment">//将 q1 设置 Boost 值 </span></span><br><span class="line">BoostQuery q3 = <span class="keyword">new</span> BoostQuery(q1,<span class="number">100f</span>);</span><br><span class="line"><span class="comment">//复合语句查询</span></span><br><span class="line">BooleanQuery.Builder() builder = <span class="keyword">new</span> <span class="keyword">new</span> BooleanQuery.Builder();</span><br><span class="line">builder.add(q3, Occur.MUST)</span><br><span class="line">builder.add(q2, Occur.MUST)</span><br><span class="line"><span class="comment">//由于 file_name 的查询语句经过 BoostQuery 的包装</span></span><br><span class="line"><span class="comment">//因此 file_name 的优先级更高。</span></span><br><span class="line">BooleanQuery query = builder.build();</span><br></pre></td></tr></table></figure><p>2.MultiFieldQueryParser<br>和原先版本相同 ， 就不阐述源码，直接上使用方法<br>使用如下 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置组合查询域</span></span><br><span class="line">String[] fields = &#123;<span class="string">"file_name"</span>,<span class="string">"file_content"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置评分,文件名称中包括关键字的评分高</span></span><br><span class="line">Map&lt;String,Float&gt; boosts = <span class="keyword">new</span> HashMap&lt;String,Float&gt;();</span><br><span class="line">boosts.put(<span class="string">"file_name"</span>, <span class="number">10.0f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建查询解析器</span></span><br><span class="line">QueryParser queryParser =  <span class="keyword">new</span> MultiFieldQueryParser(fields, <span class="keyword">new</span> IKAnalyzer(), boosts);</span><br><span class="line"><span class="comment">//查询文件名、文件内容中包括“springmvc.txt”关键字的文档，由于设置了文件名称域的加权值高，所以名称中匹配到关键字的应该排在前边</span></span><br><span class="line">Query query = queryParser.parse(<span class="string">"springmvc.txt"</span>);</span><br></pre></td></tr></table></figure><h2 id="6-中文分词器-–-iKAnalyzer-的-lucene-6-6-适配"><a href="#6-中文分词器-–-iKAnalyzer-的-lucene-6-6-适配" class="headerlink" title="6. 中文分词器 – iKAnalyzer 的 lucene 6.6 适配"></a>6. 中文分词器 – iKAnalyzer 的 lucene 6.6 适配</h2><blockquote><p>调皮的超链接<a href="http://3dot141.cn/blogs/47564.html" target="_blank" rel="noopener">个人博客中有更多</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库范式与优化</title>
      <link href="/blogs/facc1860.html"/>
      <url>/blogs/facc1860.html</url>
      
        <content type="html"><![CDATA[<p>1NF的定义为：符合1NF的关系中的每个属性都不可再分。</p><p>2NF: 消除了非主属性对于码的部分函数依赖。</p><ol><li>函数依赖：<br>若在一张表中，在属性（或属性组）X的值确定的情况下，必定能确定属性Y的值，那么就可以说Y函数依赖于X，写作 X → Y</li><li>完全函数依赖 ： 在一张表中，若 X → Y，且对于 X 的任何一个真子集（假如属性组 X 包含超过一个属性的话），X ‘ → Y 不成立，那么我们称 Y 对于 X 完全函数依赖</li><li>部分函数依赖</li><li>传递函数依赖</li><li>码，最小完全依赖</li><li>非主属性。<br>3NF: 消除了非主属性对于码的传递函数依赖。</li></ol><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h4 id="5-1-SELECT子句中避免使用-“-”"><a href="#5-1-SELECT子句中避免使用-“-”" class="headerlink" title="5.1.SELECT子句中避免使用 “*”"></a>5.1.SELECT子句中避免使用 “*”</h4><p>当你想在SELECT子句中列出所有的COLUMN时，使用动态SQL列引用‘<em>’是一个方便的方法。不幸的是，这是一个非常低效的方法。 实际上，ORACLE在解析的过程中, 会将“</em>” 依次转换成所有的列名, 这个工作是通过查询数据字典完成的, 这意味着将耗费更多的时间。  </p><h4 id="5-2-删除重复记录！"><a href="#5-2-删除重复记录！" class="headerlink" title="5.2.删除重复记录！"></a>5.2.删除重复记录！</h4><p>最高效的删除重复记录方法 ( 因为使用了ROWID)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM EMP E WHERE E.ROWID &gt; (SELECT MIN(X.ROWID) FROM EMP X WHERE X.EMP_NO = E.EMP_NO)</span><br></pre></td></tr></table></figure><h4 id="5-3-用TRUNCATE替代DELETE"><a href="#5-3-用TRUNCATE替代DELETE" class="headerlink" title="5.3. 用TRUNCATE替代DELETE"></a>5.3. 用TRUNCATE替代DELETE</h4><p> 当删除表中的记录时，在通常情况下，回滚段(rollback segments ) 用来存放可以被恢复的信息，如果你没有COMMIT事务，ORACLE会将数据恢复到删除之前的状态(准确地说是恢复到执行删除命令之前的状况)，而当运用TRUNCATE时, 回滚段不再存放任何可被恢复的信息.当命令运行后,数据不能被恢复.因此很少的资源被调用,执行时间也会很短.   </p><h4 id="5-4-计算记录条数！"><a href="#5-4-计算记录条数！" class="headerlink" title="5.4.计算记录条数！"></a>5.4.计算记录条数！</h4><p> 和一般的观点相反, count(*) 比count(1)稍快 ，当然如果可以通过索引检索，对索引列的计数仍旧是最快的. 例如 COUNT(EMPNO)   </p><h4 id="5-5-用EXISTS替代IN"><a href="#5-5-用EXISTS替代IN" class="headerlink" title="5.5. 用EXISTS替代IN"></a>5.5. 用EXISTS替代IN</h4><p>在许多基于基础表的查询中,为了满足一个条件,往往需要对另一个表进行联接.在这种情况下, 使用EXISTS(或NOT EXISTS)通常将提高查询的效率. </p><p>–低效    </p><figure class="highlight plain"><figcaption><span>* FROM EMP WHERE EMPNO > 0 AND DEPTNO IN (SELECT DEPTNO FROM DEPT WHERE LOC </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">--高效</span><br><span class="line"></span><br><span class="line">```SELECT * FROM EMP WHERE EMPNO &gt; 0 AND EXISTS (SELECT ‘X’  FROM DEPT WHERE DEPT.DEPTNO = EMP.DEPTNO AND LOC = ‘MELB’)</span><br></pre></td></tr></table></figure><h4 id="5-6-用EXISTS替换DISTINCT"><a href="#5-6-用EXISTS替换DISTINCT" class="headerlink" title="5.6.用EXISTS替换DISTINCT"></a>5.6.用EXISTS替换DISTINCT</h4><p>当提交一个包含一对多表信息(比如部门表和雇员表)的查询时,避免在SELECT子句中使用DISTINCT. 一般可以考虑用EXIST替换  例如:   </p><p>–低效:     </p><figure class="highlight plain"><figcaption><span>DISTINCT DEPT_NO,DEPT_NAME  FROM DEPT D,EMP E WHERE D.DEPT_NO </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">--高效:    </span><br><span class="line"></span><br><span class="line">```SELECT DEPT_NO,DEPT_NAME  FROM DEPT D WHERE EXISTS ( SELECT ‘X’ FROM EMP E WHERE E.DEPT_NO = D.DEPT_NO)</span><br></pre></td></tr></table></figure><p>–EXISTS 使查询更为迅速</p><h4 id="5-7-用-gt-替代-gt"><a href="#5-7-用-gt-替代-gt" class="headerlink" title="5.7. 用&gt;=替代&gt;"></a>5.7. 用&gt;=替代&gt;</h4><p>–如果DEPTNO上有一个索引    </p><p>–高效：    </p><p>   SELECT *  FROM EMP  WHERE DEPTNO &gt;=4    </p><p>–低效：    </p><p>   SELECT *  FROM EMP   WHERE DEPTNO &gt;3    </p><p>   两者的区别在于, 前者DBMS将直接跳到第一个DEPT等于4的记录而后者将首先定位到DEPTNO=3的记录并且向前扫描到第一个DEPT大于3的记录.</p><h4 id="5-8-应尽量避免在-where-子句中对字段判断"><a href="#5-8-应尽量避免在-where-子句中对字段判断" class="headerlink" title="5.8.应尽量避免在 where 子句中对字段判断!"></a>5.8.应尽量避免在 where 子句中对字段判断!</h4><p>如：</p><p>select id from t where num is null</p><p>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</p><p>select id from t where num=0</p><h4 id="5-9-应避免在-where-中使用-或-lt-gt-操作符"><a href="#5-9-应避免在-where-中使用-或-lt-gt-操作符" class="headerlink" title="5.9.应避免在 where 中使用!=或&lt;&gt;操作符"></a>5.9.应避免在 where 中使用!=或&lt;&gt;操作符</h4><p>将导致引擎放弃使用索引而进行全表扫描。优化器将无法通过索引来确定将要命中的行数,因此需要搜索该表的所有行。</p><h4 id="5-10-应避免在-where-子句中使用-or-连接"><a href="#5-10-应避免在-where-子句中使用-or-连接" class="headerlink" title="5.10.应避免在 where 子句中使用 or 连接!"></a>5.10.应避免在 where 子句中使用 or 连接!</h4><p>否则将导致引擎放弃使用索引而进行全表扫描，如：</p><p>select id from t where num=10 or num=20</p><p>可以这样查询：</p><p>select id from t where num=10 union all select id from t where num=20</p><h4 id="5-11-in-和-not-in-也要慎用"><a href="#5-11-in-和-not-in-也要慎用" class="headerlink" title="5.11.in 和 not in 也要慎用!"></a>5.11.in 和 not in 也要慎用!</h4><p>因为IN会使系统无法使用索引,而只能直接搜索表中的数据。如：</p><p>select id from t where num in(1,2,3)</p><p>对于连续的数值，能用 between 就不要用 in 了：</p><p>select id from t where num between 1 and 3</p><h4 id="5-12-应避免在-where-中进行表达式操作"><a href="#5-12-应避免在-where-中进行表达式操作" class="headerlink" title="5.12.应避免在 where 中进行表达式操作!"></a>5.12.应避免在 where 中进行表达式操作!</h4><p>这将导致引擎放弃使用索引而进行全表扫描。如：</p><p>SELECT * FROM T1 WHERE F1/2=100</p><p>应改为:</p><p>SELECT <em> FROM T1 WHERE F1=100</em>2</p><p>SELECT * FROM RECORD WHERE SUBSTRING(CARD_NO,1,4)=’5378’</p><p>应改为:</p><p>SELECT * FROM RECORD WHERE CARD_NO LIKE ‘5378%’</p><p>SELECT member_number, first_name, last_name FROM members WHERE DATEDIFF(yy,datofbirth,GETDATE()) &gt; 21</p><p>应改为:</p><p>SELECT member_number, first_name, last_name FROM members WHERE dateofbirth &lt; DATEADD(yy,-21,GETDATE())</p><p>即：任何对列的操作都将导致表扫描，它包括数据库函数、计算表达式等等，查询时要尽可能将操作移至等号右边。</p><h4 id="5-13-应避免在where子句中进行函数操作！"><a href="#5-13-应避免在where子句中进行函数操作！" class="headerlink" title="5.13.应避免在where子句中进行函数操作！"></a>5.13.应避免在where子句中进行函数操作！</h4><p>这将导致引擎放弃使用索引而进行全表扫描。如：</p><p>select id from t where substring(name,1,3)=’abc’</p><p>–name以abc开头的id</p><p>select id from t where datediff(day,createdate,’2005-11-30’)=0</p><p>–‘2005-11-30’生成的id</p><p>应改为:</p><p>select id from t where name like ‘abc%’</p><p>select id from t where createdate&gt;=’2005-11-30′ and createdate&lt;’2005-12-1’</p><h4 id="5-14-不要在-where-中的“-”左边运算！"><a href="#5-14-不要在-where-中的“-”左边运算！" class="headerlink" title="5.14.不要在 where 中的“=”左边运算！"></a>5.14.不要在 where 中的“=”左边运算！</h4><p>进行函数、算术运算或其他表达式运算，系统将可能无法正确使用索引。</p><h4 id="5-15-尽量避免向客户端返回大数据量！"><a href="#5-15-尽量避免向客户端返回大数据量！" class="headerlink" title="5.15.尽量避免向客户端返回大数据量！"></a>5.15.尽量避免向客户端返回大数据量！</h4><p>若数据量过大，应该考虑相应需求是否合理。</p><h4 id="5-16-避免使用不兼容的数据类型！"><a href="#5-16-避免使用不兼容的数据类型！" class="headerlink" title="5.16. 避免使用不兼容的数据类型！"></a>5.16. 避免使用不兼容的数据类型！</h4><p>例如float和int、char和varchar、binary和varbinary是不兼容的。数据类型的不兼容可能使优化器无法执行一些本来可以进行的优化操作。例如:</p><figure class="highlight plain"><figcaption><span>name FROM employee WHERE salary > 60000```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在这条语句中,如salary字段是money型的,则优化器很难对其进行优化,因为60000是个整型数。我们应当在编程时将整型转化成为钱币型,而不要等到运行时转化。</span><br><span class="line"></span><br><span class="line">#### 5.17.充分利用连接条件！</span><br><span class="line">在某种情况下，两个表之间可能不只一个的连接条件，这时在 WHERE 子句中将连接条件完整的写上，有可能大大提高查询速度。</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"></span><br><span class="line">SELECT SUM(A.AMOUNT) FROM ACCOUNT A,CARD B WHERE A.CARD_NO = B.CARD_NO</span><br><span class="line"></span><br><span class="line">```SELECT SUM(A.AMOUNT) FROM ACCOUNT A,CARD B WHERE A.CARD_NO = B.CARD_NO AND A.ACCOUNT_NO=B.ACCOUNT_NO</span><br></pre></td></tr></table></figure><p>第二句将比第一句执行快得多。</p><h4 id="5-18、能用GROUP-BY的就不用DISTINCT"><a href="#5-18、能用GROUP-BY的就不用DISTINCT" class="headerlink" title="5.18、能用GROUP BY的就不用DISTINCT"></a>5.18、能用GROUP BY的就不用DISTINCT</h4><p>SELECT DISTINCT OrderID FROM Details WHERE UnitPrice &gt; 10</p><p>可改为：</p><p><code>SELECT OrderID FROM Details WHERE UnitPrice &gt; 10 GROUP BY OrderID</code></p><h4 id="5-19-能用UNION-ALL就不要用UNION！"><a href="#5-19-能用UNION-ALL就不要用UNION！" class="headerlink" title="5.19.能用UNION ALL就不要用UNION！"></a>5.19.能用UNION ALL就不要用UNION！</h4><p>UNION ALL不执行SELECT DISTINCT函数，这样就会减少很多不必要的资源</p><h4 id="5-20-尽量不要用SELECT-INTO语句！"><a href="#5-20-尽量不要用SELECT-INTO语句！" class="headerlink" title="5.20.尽量不要用SELECT INTO语句！"></a>5.20.尽量不要用SELECT INTO语句！</h4><p>SELECT INOT 语句会导致表锁定，阻止其他用户访问该表。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索为将 -- Solr 从入门到进阶(二)</title>
      <link href="/blogs/5049.html"/>
      <url>/blogs/5049.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇已经介绍了 solr 的基本操作。<br>传送门： <a href="https://segmentfault.com/a/1190000010387238" target="_blank" rel="noopener">搜索为将 – solr 入门</a><br>现在介绍如何 与数据库 整合。<br><a id="more"></a></p><h2 id="solr-managed-scheme-文档"><a href="#solr-managed-scheme-文档" class="headerlink" title="solr managed-scheme 文档"></a>solr managed-scheme 文档</h2><p>这个文档位于 solrhome\new_core\conf 下<br>如图所示 :<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709181950_627.png" alt=""></p><p>这个文档中可以设置一些属性，便于之后与数据库整合后，在搜索中使用。</p><h3 id="1-Field"><a href="#1-Field" class="headerlink" title="1. Field"></a>1. Field</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Name：指定域的名称<br>Type：指定域的类型  – 指定使用的分词器。<br>Indexed：是否索引<br>Stored：是否存储<br>Required：是否必须<br>multiValued：是否多值，比如商品信息中，一个商品有多张图片，一个Field像存储多个值的话，必须将multiValued设置为true。</p><h3 id="2-dynamicField"><a href="#2-dynamicField" class="headerlink" title="2. dynamicField"></a>2. dynamicField</h3><p>动态域，通过 <strong>通配符</strong> 进行匹配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dynamicField</span> <span class="attr">name</span>=<span class="string">"*_i"</span>  <span class="attr">type</span>=<span class="string">"int"</span>    <span class="attr">indexed</span>=<span class="string">"true"</span>  <span class="attr">stored</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-uniqueKey"><a href="#3-uniqueKey" class="headerlink" title="3. uniqueKey"></a>3. uniqueKey</h3><p>指定唯一键<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uniqueKey</span>&gt;</span>id<span class="tag">&lt;/<span class="name">uniqueKey</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中的<strong>id</strong> 是在<strong> Field标签</strong> 中已经定义好的域名，而且该域要设置为<strong> required为true</strong> 。<br>一个<strong> schema.xml </strong> 文件中必须有且仅有一个唯一键.</p><h3 id="4-copyField"><a href="#4-copyField" class="headerlink" title="4. copyField"></a>4. copyField</h3><p>从已有的<strong> field</strong>中直接复制属性，被复制的<strong>field </strong>必须拥有<strong>multiValued = “true”</strong> 属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"cat"</span> <span class="attr">dest</span>=<span class="string">"text"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-FieldType"><a href="#5-FieldType" class="headerlink" title="5. FieldType"></a>5. FieldType</h3><p>也就是设置的 field 域的类型。通过各种分词器以及内置的类型设置。<br>常用类型都已经被设置好了，如下<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709181958_937.png" alt=""><br>如果还需要其他类型的 域 ,通过分词器设置。<br>可以参考我 之前的文章.<br><a href="https://segmentfault.com/a/1190000010387238" target="_blank" rel="noopener">搜索为将 – solr 入门</a><br>这里介绍了 将 smart_cn 以及 IKAnalyzer 设置为 相应的 field 域的方法.</p><h2 id="solr-插件-–-DataimportHandler"><a href="#solr-插件-–-DataimportHandler" class="headerlink" title="solr 插件 – DataimportHandler"></a>solr 插件 – DataimportHandler</h2><h3 id="第一步、"><a href="#第一步、" class="headerlink" title="第一步、"></a>第一步、</h3><p>将 solr/dist 目录下的 solr-dataimporthandler.jar 文件拷贝到 solrhome/contrib/dataimporthandler/lib 目录下.<br>将 自己准备好的 mysql 连接的 jar 包 拷贝到 solrhome/contrib/db/lib 下<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709182104_111.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709182106_851.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709182118_311.png" alt=""><br>这里是用 linux 建立的服务器,所以使用了 xshell 中的 xftp,帮助对文件进行管理  </p><h3 id="第二步、"><a href="#第二步、" class="headerlink" title="第二步、"></a>第二步、</h3><p>进入 core 文件夹 , 分别修改 solrConfig.xml 、 managed-scheme 文档<br>solrConfig.xml 文档下添加相应的内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新建相应的 lib 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lib</span> <span class="attr">dir</span>=<span class="string">"$&#123;solr.install.dir:../..&#125;/contrib/dataimporthandler/lib"</span> <span class="attr">regex</span>=<span class="string">".*\.jar"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lib</span> <span class="attr">dir</span>=<span class="string">"$&#123;solr.install.dir:../..&#125;/contrib/db/lib"</span> <span class="attr">regex</span>=<span class="string">".*\.jar"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>lib 的修改原则，我的上篇文章写的很清楚，不再阐述。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 添加相应的 requestHandler -- &gt;</span><br><span class="line">&lt;requestHandler name=&quot;/dataimport&quot; class=&quot;org.apache.solr.handler.dataimport.DataImportHandler&quot;&gt;</span><br><span class="line">    &lt;lst name=&quot;defaults&quot;&gt;</span><br><span class="line">        &lt;str name=&quot;config&quot;&gt;data-config.xml&lt;/str&gt;</span><br><span class="line">    &lt;/lst&gt;</span><br><span class="line">&lt;/requestHandler&gt;</span><br></pre></td></tr></table></figure></p><p>managed-scheme 文档下添加 与 数据库中的文件相应的属性，以我的为例。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- IKAnalyzer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_ik"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKTokenizerFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- taotao_shop --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"item_title"</span> <span class="attr">type</span>=<span class="string">"text_ik"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"item_sell_point"</span> <span class="attr">type</span>=<span class="string">"text_ik"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"item_price"</span>  <span class="attr">type</span>=<span class="string">"long"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"item_image"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"false"</span> <span class="attr">stored</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"item_category_name"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"item_desc"</span> <span class="attr">type</span>=<span class="string">"text_ik"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"item_keywords"</span> <span class="attr">type</span>=<span class="string">"text_ik"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"false"</span> <span class="attr">multiValued</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"item_title"</span> <span class="attr">dest</span>=<span class="string">"item_keywords"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"item_sell_point"</span> <span class="attr">dest</span>=<span class="string">"item_keywords"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"item_category_name"</span> <span class="attr">dest</span>=<span class="string">"item_keywords"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">copyField</span> <span class="attr">source</span>=<span class="string">"item_desc"</span> <span class="attr">dest</span>=<span class="string">"item_keywords"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="第三步、"><a href="#第三步、" class="headerlink" title="第三步、"></a>第三步、</h3><p>同级目录下创建 data-config.xml 文件<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709182119_701.png" alt=""></p><p>在其中加入相应的内容<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dataConfig</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"JdbcDataSource"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">driver</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">url</span>=<span class="string">"jdbc:mysql://192.168.1.101:3306/taotao"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">user</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">"1996915"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">document</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span> <span class="attr">name</span>=<span class="string">"item"</span> <span class="attr">query</span>=<span class="string">"SELECT id,title,sell_point,price,image FROM tb_item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">name</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"item_title"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"sell_point"</span> <span class="attr">name</span>=<span class="string">"item_sell_point"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">name</span>=<span class="string">"item_price"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"image"</span> <span class="attr">name</span>=<span class="string">"item_image"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataConfig</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="第四步、"><a href="#第四步、" class="headerlink" title="第四步、"></a>第四步、</h3><p>然后打开 tomcat 。 进入网站 192.168.1.102:8080/solr/index.html,出现如下画面<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709182122_547.png" alt=""></p><p>按照我在图片上标明的 步骤 ， 就可以达到如下的效果。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709182124_385.png" alt=""></p><h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><p>问题：不同服务器部属后， mysql 的访问权限设置<br>详情：因为我的 solr 服务器是在 虚拟机上 通过 静态ip 地址的桥接设置的，所以 IP 地址与主机的 IP 地址不同，不能使用 <strong> localhost</strong> 作为 域名。当我使用 192.168.1.101 (<strong>注：</strong> 我主机的 IP 地址)时， mysql 的用户 root 没有相应的访问权限。如图：<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709182130_419.png" alt=""><br>解决：那么只需要重新创建一个用户，并赋予相应的权限即可。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709182131_924.png" alt=""><br>这样，我们就拥有了 root@% 账户， <strong>%</strong> 代表着所有的域名。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逐梦Offer -- 6 个月学习归纳[整合版]</title>
      <link href="/blogs/93.html"/>
      <url>/blogs/93.html</url>
      
        <content type="html"><![CDATA[<h2 id="2-Java-基础"><a href="#2-Java-基础" class="headerlink" title="2. Java 基础"></a>2. Java 基础</h2><h3 id="2-1-引用"><a href="#2-1-引用" class="headerlink" title="2.1 引用"></a>2.1 引用</h3><p>强引用<br>软引用 ：即将发生内存溢出时，会对这些对象列进回收范围内，进行第二次回收<br>弱引用 : 只能生存到下一次垃圾收集之前<br>虚引用 ：无法通过虚引用取得一个对象的实例，唯一目的是为了在这个对象被收集器回收时收到 一个系统通知</p><h3 id="2-2-重载时的特征签名"><a href="#2-2-重载时的特征签名" class="headerlink" title="2.2 重载时的特征签名"></a>2.2 重载时的特征签名</h3><p>Java代码层面的特征签名与字节码层面的特征签名不同。</p><h3 id="2-3-动态代理"><a href="#2-3-动态代理" class="headerlink" title="2.3 动态代理"></a>2.3 动态代理</h3><p>JDK ：JDK中的动态代理是通过反射类Proxy以及InvocationHandler回调接口实现的，<br>但是，JDK中所要进行动态代理的类必须要实现一个接口，也就是说只能对该类所实现接口中定义的方法进行代理，这在实际编程中具有一定的局限性，而且使用反射的效率也并不是很高。<br>CGLIB ：使用CGLib实现动态代理，完全不受代理类必须实现接口的限制，而且CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理，因为CGLib原理是动态生成被代理类的子类。</p><h3 id="2-4-输入输出流"><a href="#2-4-输入输出流" class="headerlink" title="2.4 输入输出流"></a>2.4 输入输出流</h3><h4 id="1-NIO与IO的区别"><a href="#1-NIO与IO的区别" class="headerlink" title="1. NIO与IO的区别"></a>1. NIO与IO的区别</h4><p>一.IO是面向流的，NIO是面向缓冲区的。<br>二.IO的各种流是阻塞的，NIO是非阻塞模式。<br>三.Java NIO的选择器允许一个单独的线程来监视多个输入通道，你可以注册多个通道使用一个选择器，然后使用一个单独的线程来“选择”通道：这些通道里已经有可以处理的输入，或者选择已准备写入的通道。这种选择机制，使得一个单独的线程很容易来管理多个通道。</p><h4 id="2-相关类"><a href="#2-相关类" class="headerlink" title="2. 相关类"></a>2. 相关类</h4><p>1、FileChannel<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileChannel fc = new FileOutputStream(&quot;data.txt&quot;).getChannel;</span><br></pre></td></tr></table></figure></p><p>2、FileLock<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 对整个文件加锁</span><br><span class="line">FileLock fl = new FileOutputStream(&quot;data.txt&quot;).getChannel.tryLock();</span><br><span class="line">// 对文件的一部分加锁</span><br><span class="line">tryLock(long position, long size, boolean shared);</span><br><span class="line">lock(long position, long size, boolean shared);</span><br><span class="line">// 检查锁的类型</span><br><span class="line">FileLock.isShared();</span><br></pre></td></tr></table></figure></p><p>3、ByteBuffer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 用于写时 OutputStream</span><br><span class="line">fc.write(ByteBuffer.wrap(&quot;somethind&quot;.getBytes()));</span><br><span class="line">// 用于读时 InputStream</span><br><span class="line">ByteBuffer buff = ByteBuffer.allocate(1024);</span><br><span class="line">fc.read(buff);</span><br><span class="line">// 用于转化</span><br><span class="line">buff.asXxBuffer;</span><br></pre></td></tr></table></figure></p><p>细节 : 四个索引 1，mark 2，position 3, limit 4, capacity;<br>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mark() -- 将mark 设置为 postion</span><br><span class="line">position() -- 返回postion 值</span><br><span class="line">position(int pos) -- 设置 。。 </span><br><span class="line">limit() -- 返回limit 值</span><br><span class="line">limit(int lim) </span><br><span class="line">capacity()</span><br><span class="line">flip() -- 将limit 设置为 position ，position设置为0，用于准备从缓冲区读取已经写入的数据</span><br><span class="line">clear() -- 清空缓冲区，将position 设置为0，limit设置为 capacity ，用于覆写缓冲区。</span><br><span class="line">remaining()</span><br><span class="line">hasRemaining()</span><br></pre></td></tr></table></figure></p><p>4、 MappedByteBuffer 内存映射文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MappedByteBuffer out = new RandomAccessFile(&quot;test.dat&quot;,&quot;rw&quot;)</span><br><span class="line">                        .getChannel().map(FileChannel.MapMode.READ_WRITE(模式),0(位置),length(长度));</span><br></pre></td></tr></table></figure></p><h3 id="2-5-序列化与反序列化"><a href="#2-5-序列化与反序列化" class="headerlink" title="2.5 序列化与反序列化"></a>2.5 序列化与反序列化</h3><blockquote><p>把对象转换为字节序列的过程称为对象的序列化。<br>把字节序列恢复为对象的过程称为对象的反序列化。<br>对象的序列化主要有两种用途：<br>一.把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；<br>二.在网络上传送对象的字节序列。<br>当两个进程在进行远程通信时，彼此可以发送各种类型的数据。无论是何种类型的数据，都会以二进制序列的形式在网络上传送。发送方需要把这个Java对象转换为字节序列，才能在网络上传送；接收方则需要把字节序列再恢复为Java对象。</p></blockquote><p>1、Serializable – &gt; ObjectOutputStream -&gt; writeObject();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(Bean.out));</span><br><span class="line">out.writeObject(Bean);</span><br></pre></td></tr></table></figure></p><p>2、Serializable – &gt; ObjectInputStream -&gt; readObject();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream in = new ObjectInputStream(new FileInputStream(Bean.out));</span><br><span class="line">Bean bean = in.writeObject(Bean);</span><br></pre></td></tr></table></figure></p><p>3、transient + Serializable == Externalizable</p><h3 id="xml-解析-的方式"><a href="#xml-解析-的方式" class="headerlink" title="xml 解析 的方式"></a>xml 解析 的方式</h3><table><thead><tr><th>方式</th><th>原理</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>DOM(Document Object Model)</td><td>将结点形成树状结构</td><td>方便增删改减</td><td>文件过大，内存容易溢出</td></tr><tr><td>SAX(Simple API for XML)</td><td>基于事件驱动</td><td>不会产生内存溢出</td><td>不能增删改</td></tr></tbody></table><p>开发包： JAXP 与 DOM4J</p><h3 id="Statement-与-PreparedStatement-之间的区别"><a href="#Statement-与-PreparedStatement-之间的区别" class="headerlink" title="Statement 与 PreparedStatement 之间的区别"></a>Statement 与 PreparedStatement 之间的区别</h3><ol><li>preparedStatement 会使用 预编译 ，以及批处理。 statement 不会。所以每次数据库进行查询时，preparedStatement 可以直接使用 sql 语句。 statement 不行。 但是，如果只是使用一次的话， preparedStatement 不会带来性能提升。不如使用 statement 方便。</li><li>preparedStatement 可以使用 占位符 ？，然后再赋值，相对于 statement 更为的灵活</li><li>preparedStatement 在导入参数的时候，会进行强制性的类型转换。所以在查询，更新的时候，与底层数据库类型一致，不容易出现问题。更为的安全。</li></ol><p><strong>api</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">Connection conn = (Connection)DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306"</span>,username,password);</span><br><span class="line">PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rows = pstmt.executeUpdate();</span><br><span class="line">ResultSet rs = pstmt.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列数统计</span></span><br><span class="line"><span class="keyword">int</span> col = rs.getMetaData.getColumnCount();</span><br><span class="line"><span class="keyword">while</span>(rs.next)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=col;i++)&#123;</span><br><span class="line">        System.out.println(rs.getString(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSP-与-Servlet"><a href="#JSP-与-Servlet" class="headerlink" title="JSP 与 Servlet"></a>JSP 与 Servlet</h3><hr><h2 id="3-多线程"><a href="#3-多线程" class="headerlink" title="3. 多线程"></a>3. 多线程</h2><h3 id="线程安全的单例模式-–-（DCL）"><a href="#线程安全的单例模式-–-（DCL）" class="headerlink" title="线程安全的单例模式 – （DCL）"></a>线程安全的单例模式 – （DCL）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance == <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ol><li>newFixedThreadPool 固定长度的线程池</li><li>newCachedThreadPool 可缓存的线程池 规模不受限制</li><li>newSingleThreadExecutor 单个工作者线程来执行任务</li><li>newScheduledThreadPool 固定长度的线程池，并且以延迟或定时的方式来执行。</li></ol><h3 id="基础框架"><a href="#基础框架" class="headerlink" title="基础框架"></a>基础框架</h3><ol><li>Semaphore 信号量<br> acquire()<br> release()</li><li>CountDownLatch 闭锁<br> // 等待事件的完成<br> await()<br> countDown()</li><li>CyclicBarrier 栅栏<br> // 等待线程的到达</li><li>Exchanger 两方栅栏<br> exchanger()</li><li>FutureTask<br> new Thread(ft); – runnable<br> ft.get();       – future</li><li>Fork-Join框架</li></ol><h3 id="原子性、可见性与有序性"><a href="#原子性、可见性与有序性" class="headerlink" title="原子性、可见性与有序性"></a>原子性、可见性与有序性</h3><ol><li><p>原子性<br> read 、write<br> assign 、store<br> load 、use</p><p> lock unlock – &gt; monitorenter 、 monitorexit<br>2        . 可见性<br> volatile synchronized final</p></li><li>有序性<br> volatile(内存屏障) synchronized<br> 必须 load &lt; – &gt; use assign &lt; – &gt; store</li><li>先行发生原则（happens - before)<ul><li>程序次序原则</li><li>线程启动、终止、中断原则</li><li>volatlie 变量原则 write –&gt; read</li><li>管程锁原则</li><li>对象终结原则 </li><li>传递性 a-&gt;b b-&gt;c –&gt; a-&gt;c</li></ul></li></ol><h3 id="偏向锁、轻量级锁、重量级锁"><a href="#偏向锁、轻量级锁、重量级锁" class="headerlink" title="偏向锁、轻量级锁、重量级锁"></a>偏向锁、轻量级锁、重量级锁</h3><p>偏向所锁，轻量级锁都是乐观锁，重量级锁是悲观锁。<br>    一个对象刚开始实例化的时候，没有任何线程来访问它的时候。它是可偏向的，意味着，它现在认为只可能有一个线程来访问它，所以当第一个线程来访问它的时候，它会偏向这个线程，此时，对象持有偏向锁。偏向第一个线程，这个线程在修改对象头成为偏向锁的时候使用CAS操作，并将对象头中的ThreadID改成自己的ID，之后再次访问这个对象时，只需要对比ID，不需要再使用CAS在进行操作。<br>    一旦有第二个线程访问这个对象，因为偏向锁不会主动释放，所以第二个线程可以看到对象时偏向状态，这时表明在这个对象上已经存在竞争了，检查原来持有该对象锁的线程是否依然存活，如果挂了，则可以将对象变为无锁状态，然后重新偏向新的线程，如果原来的线程依然存活，则马上执行那个线程的操作栈，检查该对象的使用情况，如果仍然需要持有偏向锁，则偏向锁升级为轻量级锁，（偏向锁就是这个时候升级为轻量级锁的）。如果不存在使用了，则可以将对象回复成无锁状态，然后重新偏向。<br>    轻量级锁认为竞争存在，但是竞争的程度很轻，一般两个线程对于同一个锁的操作都会错开，或者说稍微等待一下（自旋），另一个线程就会释放锁。 但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁膨胀为重量级锁，重量级锁使除了拥有锁的线程以外的线程都阻塞，防止CPU空转。</p><h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>偏向锁标志位 01<br>同时用CAS 操作将获取到这个锁的线程ID 记录到对象的 Mark Word 中。以后每次这个线程进入这个锁相关的同步块时，都不需要任何同步操作。</p><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><p>轻量级锁 00<br>如果此同步对象没有被锁定(锁标志位 为“01”)在当前线程中栈帧中建立锁记录(Lock Record) 的空间，存储锁对象的 Mark Word 拷贝（官方把这份拷贝加了一个 Dispaced 前缀）.<br>CAS 操作尝试将 对象的 Mark Word 更新为指向 Lock Record 的指针。 并将标志位 转变为 “00”</p><hr><hr><h2 id="5-框架"><a href="#5-框架" class="headerlink" title="5. 框架"></a>5. 框架</h2><h3 id="5-1-SSH-与-SSM"><a href="#5-1-SSH-与-SSM" class="headerlink" title="5.1 SSH 与 SSM"></a>5.1 SSH 与 SSM</h3><h4 id="spring-的架构"><a href="#spring-的架构" class="headerlink" title="spring 的架构"></a>spring 的架构</h4><h4 id="spring-bean"><a href="#spring-bean" class="headerlink" title="spring bean"></a>spring bean</h4><p>1、 加载过程<br>2、 实例化<br>3、 注入方式</p><h4 id="spring-中的-IOC-与-AOP"><a href="#spring-中的-IOC-与-AOP" class="headerlink" title="spring 中的 IOC 与 AOP"></a>spring 中的 IOC 与 AOP</h4><h4 id="spring-事务"><a href="#spring-事务" class="headerlink" title="spring 事务"></a>spring 事务</h4><p>1、事务<br>事务:是逻辑上一组操作，要么全都成功，要么全都失败.<br>事务特性:<br><strong>ACID:</strong></p><ol><li>原子性(Atomic):事务不可分割</li><li>一致性(Consistency):事务执行的前后，数据完整性保持一致.</li><li>隔离性(Isolation):一个事务执行的时候，不应该受到其他事务的打扰</li><li>持久性(Durability):一旦结束，数据就永久的保存到数据库.</li></ol><p>如果不考虑隔离性:</p><ol><li>脏读:一个事务读到另一个事务未提交数据</li><li>不可重复读:一个事务只能看到已经提交事务做出的修改。所以当另一个事务更新数据（update），导致一个事务多次查询结果不一致</li><li>幻读:当一个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入新的记录（insert），导致一个事务多次查询结果不一致</li></ol><p>事务的隔离级别:</p><ol><li>未提交读:以上情况都有可能发生。</li><li>已提交读:避免脏读，但不可重复读，幻读是有可能发生。</li><li>可重复读:避免脏读，不可重复读，但是幻读有可能发生。</li><li>串行的:避免以上所有情况.</li></ol><p><strong>Spring 中的代码解析：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PlatformTransactionManager:平台事务管理器.</span><br><span class="line">commit(TransactionStatus status) </span><br><span class="line">getTransaction(TransactionDefinition definition) </span><br><span class="line">rollback(TransactionStatus status)</span><br></pre></td></tr></table></figure></p><p><strong>TransactionDefinition:事务定义</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ISOLation_XXX:事务隔离级别.</span><br><span class="line">ISOLATION_DEFAULT:默认级别.  --  Mysql  repeatable_read</span><br><span class="line">ISOLATION_READ_UNCOMMITTED</span><br><span class="line">ISOLATION_READ_COMMITTED </span><br><span class="line">ISOLATION_REPEATABLE_READ </span><br><span class="line">ISOLATION_SERIALIZABLE </span><br><span class="line"></span><br><span class="line">PROPAGATION_XXX:事务的传播行为.(不是JDBC中有的，为了解决实际开发问题.)</span><br><span class="line">过期时间:</span><br><span class="line"></span><br><span class="line">TransactionStatus:事务状态</span><br><span class="line">是否有保存点</span><br><span class="line">是否一个新的事务</span><br><span class="line">事务是否已经提交</span><br></pre></td></tr></table></figure></p><p>关系:PlatformTransactionManager通过TransactionDefinition设置事务相关信息管理事务，管理事务过程中，产生一些事务状态:状态由TransactionStatus记录.</p><p>2、事务的传播行为:(不是JDBC事务管理，用来解决实际开发的问题.)传播行为：解决业务层之间的调用的事务的关系.</p><ul><li><strong>PROPAGATION_REQUIRED</strong>        :支持当前事务，如果不存在 就新建一个<br>  A,B    如果A有事务，B使用A的事务，如果A没有事务，B就开启一个新的事务.(A,B是在一个事务中。)</li><li><strong>PROPAGATION_SUPPORTS</strong>        :支持当前事务，如果不存在，就不使用事务<br>  A,B    如果A有事务，B使用A的事务，如果A没有事务，B就不使用事务.</li><li><strong>PROPAGATION_MANDATORY</strong>    :支持当前事务，如果不存在，抛出异常<br>  A,B    如果A有事务，B使用A的事务，如果A没有事务，抛出异常.</li><li><strong>PROPAGATION_REQUIRES_NEW</strong>    如果有事务存在，挂起当前事务，创建一个新的事务<br>  A,B    如果A有事务，B将A的事务挂起，重新创建一个新的事务.(A,B不在一个事务中.事务互不影响.)</li><li><strong>PROPAGATION_NESTED</strong>    如果当前事务存在，则嵌套事务执行<br>  基于SavePoint技术.A,B    A有事务，A执行之后，将A事务执行之后的内容保存到SavePoint.B事务有异常的话，用户需要自己设置事务提交还是回滚.</li><li><strong>PROPAGATION_NOT_SUPPORTED</strong>    以非事务方式运行，如果有事务存在，挂起当前事务<br>  A,B    非事务的方式运行，A有事务，就会挂起当前的事务.</li><li><strong>PROPAGATION_NEVER</strong>     以非事务方式运行，如果有事务存在，抛出异常</li></ul><h4 id="SpringMVC-与-Struts2-的原理"><a href="#SpringMVC-与-Struts2-的原理" class="headerlink" title="SpringMVC 与 Struts2 的原理"></a>SpringMVC 与 Struts2 的原理</h4><h4 id="SpringMVC-与-Struts2-区别"><a href="#SpringMVC-与-Struts2-区别" class="headerlink" title="SpringMVC 与 Struts2 区别"></a>SpringMVC 与 Struts2 区别</h4><p>1、 Struts2是<strong>类级别</strong>的拦截， 一个类对应一个request上下文，<br>    SpringMVC是<strong>方法级别</strong>的拦截，一个方法对应一个request上下文，而方法同时又跟一个url对应,<br>    所以说从架构本身上SpringMVC就容易实现restful url,<br>    而struts2的架构实现起来要费劲，因为Struts2中Action的一个方法可以对应一个url，而其类内的属性被所有方法共享，这也就无法用注解或其他方式标识其所属方法了。<br>    举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// springmvc</span><br><span class="line">@requestMapping(&quot;/test/&#123;id&#125;&quot;)</span><br><span class="line">public String springmvcTest(@pathVariable(&quot;id&quot;) int id);</span><br><span class="line"></span><br><span class="line">// struts2</span><br><span class="line">public class strutsToTest&#123;</span><br><span class="line">    int id;</span><br><span class="line">    public String test01(int id);</span><br><span class="line">    public String test02(int id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 struts2 的 id 属性是被所有的方法共享的，这样就不能将 id 标识为单独的<strong>restful url</strong> 的值。<br>2、 由上边原因，SpringMVC的方法之间基本上独立的，独享request response数据，请求数据通过参数获取，处理结果通过ModelMap交回给框架，方法之间不共享变量，<br>    而Struts2搞的就比较乱，虽然方法之间也是独立的，但其所有Action变量是共享的，这不会影响程序运行，却给我们编码 读程序时带来麻烦，每次来了请求就创建一个Action，一个Action对象对应一个request上下文。<br>3、 由于Struts2需要针对每个request进行封装，把request，session等servlet生命周期的变量封装成一个一个Map，供给每个Action使用，并保证线程安全，所以在原则上，是比较耗费内存的。<br>4、 拦截器实现机制上，Struts2有以自己的interceptor机制，<br>    SpringMVC用的是独立的AOP方式，这样导致Struts2的配置文件量还是比SpringMVC大。<br>5、 SpringMVC的入口是servlet，而Struts2是filter（这里要指出，filter和servlet是不同的。以前认为filter是servlet的一种特殊），这就导致了二者的机制不同，这里就牵涉到servlet和filter的区别了。<br>6、 SpringMVC集成了Ajax，使用非常方便，只需一个注解@ResponseBody就可以实现，然后直接返回响应文本即可，<br>    而Struts2拦截器集成了Ajax，在Action中处理时一般必须安装插件或者自己写代码集成进去，使用起来也相对不方便。<br>7、 SpringMVC验证支持JSR303，处理起来相对更加灵活方便，这里介绍一下。springmvc使用的是Hibernate Validator（和Hibernate的ORM）进行校验。<br>    通过 在 <strong>HandlerAdapter</strong> 中加入 <strong>自定义绑定 WebBinder</strong> (在 自动注解下前面都可以省略)<br>    -&gt; <strong>校验器 validator</strong> -&gt; <strong>校验文件 messageSource</strong> 的设置。 可以使用 <a href="http://www.cnblogs.com/yangzhilong/p/3724967.html" target="_blank" rel="noopener">相关的注解 </a><br>    而Struts2是通过自己的inteceptor (name = “params” .. “validation”) 提供。 有一套完备的 validator 供开发者使用。<br>8、SpringMVC开发效率和性能高于Struts2。</p><hr><h2 id="6-数据库"><a href="#6-数据库" class="headerlink" title="6. 数据库"></a>6. 数据库</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h4><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><h4 id="mysql的逻辑架构"><a href="#mysql的逻辑架构" class="headerlink" title="mysql的逻辑架构"></a>mysql的逻辑架构</h4><h4 id="mysql的事务"><a href="#mysql的事务" class="headerlink" title="mysql的事务"></a>mysql的事务</h4><p>1、事务<br>事务:是逻辑上一组操作，要么全都成功，要么全都失败.<br>事务特性:<br><strong>ACID:</strong></p><ol><li>原子性(Atomic):事务不可分割</li><li>一致性(Consistency):事务执行的前后，数据完整性保持一致.</li><li>隔离性(Isolation):一个事务执行的时候，不应该受到其他事务的打扰</li><li>持久性(Durability):一旦结束，数据就永久的保存到数据库.</li></ol><p>如果不考虑隔离性:</p><p>事务的隔离级别:</p><ol><li>未提交读:以上情况都有可能发生。<br> 脏读:一个事务读到另一个事务未提交数据</li><li>已提交读:避免脏读，但不可重复读，幻读是有可能发生。<br> 不可重复读:一个事务只能看到已经提交事务做出的修改。所以当另一个事务更新数据（update），导致一个事务多次查询结果不一致</li><li>可重复读:避免脏读，不可重复读，但是幻读有可能发生。<br> 幻读:当一个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入新的记录（insert），导致一个事务多次查询结果不一致<br> 不过 mysql 中存在 多版本并发控制 (MVCC ，Multiversion Concurrency Control) ：<br> 在每行记录的后面 保存两个隐藏的列 1、创建时间 2、过期时间 <strong>（实际为当前系统的版本号，每开启一个新的事务，版本号就会递增）</strong>。<ul><li>SELECT </li><li>INSERT</li><li>DELETE</li><li>UPDATE<br>只在 REPEATABLE_READ 与 READ_CONMMITED 两个隔离级别下工作。</li></ul></li><li>串行的:避免以上所有情况</li></ol><h4 id="mysql的主从复制"><a href="#mysql的主从复制" class="headerlink" title="mysql的主从复制"></a>mysql的主从复制</h4><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><hr><h2 id="7-服务器"><a href="#7-服务器" class="headerlink" title="7. 服务器"></a>7. 服务器</h2><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><h2 id="8-函数式编程"><a href="#8-函数式编程" class="headerlink" title="8. 函数式编程"></a>8. 函数式编程</h2><h3 id="递归优化-：-尾递优化"><a href="#递归优化-：-尾递优化" class="headerlink" title="递归优化 ： 尾递优化"></a>递归优化 ： 尾递优化</h3><p>最后一步是纯净的函数式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 递归式</span><br><span class="line">static long factorialRecursive(long n)&#123;</span><br><span class="line">    return n==1 ? 1 : n*factorialRecursive(n-1);</span><br><span class="line">&#125;</span><br><span class="line">// 纯净的函数式</span><br><span class="line">static long factorialTailRecursive(long n)&#123;</span><br><span class="line">    return factorialHelper(1,n);</span><br><span class="line">static long factorialHelper(long acc, long n)&#123;</span><br><span class="line">    return n==1?acc:factorialHelper(acc*n,n-1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>killJava系列 -- 文件类相关</title>
      <link href="/blogs/21748.html"/>
      <url>/blogs/21748.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近作项目的时候，用java获取文件。<br>虽然用框架很容易，但是其内部的原理让我很疑惑。在自己写相似的代码的时候，往往会出现各种各样的错误。所以这里，对相关的类以及方法进行一个整合。<br>比如 file 类，path 类。 绝对路径与相对路径。 getResource 方法 ， getRealPath方法等。<br><a id="more"></a></p><h3 id="绝对路径与相对路径"><a href="#绝对路径与相对路径" class="headerlink" title="绝对路径与相对路径"></a>绝对路径与相对路径</h3><p>在使用 File 类的时候，发现绝对路径和相对路径的使用有很大的区别。<br>大家都知道：File类是用来构造文件或文件夹的类,在其构造函数中要求传入一个String类型的参数,用于指示文件所在的路径<br><code>绝对路径名</code>是完整的路径名，不需要任何其他信息就可以定位自身表示的文件。<br><code>相对路径名</code>必须使用来自其他路径名的信息进行解释</p><p>因为我使用的是 idea ，所以下面，我就用idea 给大家演示一下，他们的区别。<br>废话不多说，直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 绝对路径</span></span><br><span class="line">        File fi1 = <span class="keyword">new</span> File(<span class="string">"D://sy.ini"</span>);</span><br><span class="line">        <span class="comment">// 相对路径</span></span><br><span class="line">        File fi2 = <span class="keyword">new</span> File(<span class="string">"sy.ini"</span>);</span><br><span class="line">        String test = <span class="string">"000"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将 test 分别写入 fi1 fi2</span></span><br><span class="line">            FileOutputStream fo1 = <span class="keyword">new</span> FileOutputStream(fi1);</span><br><span class="line">            FileOutputStream fo2 = <span class="keyword">new</span> FileOutputStream(fi2);</span><br><span class="line">            fo1.write(test.getBytes());</span><br><span class="line">            fo2.write(test.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 验证 getPath 与 getAbsolubtePath 的区别。</span></span><br><span class="line">        System.out.println(fi1.getPath());</span><br><span class="line">        System.out.println(fi1.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        System.out.println(fi2.getPath());</span><br><span class="line">        System.out.println(fi2.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\sy.ini</span><br><span class="line">D:\sy.ini</span><br><span class="line">sy.ini</span><br><span class="line">D:\Programme\0-Java\J_Example\Arithmetic\sy.ini</span><br></pre></td></tr></table></figure><p>用两张图片辅助结果</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709172153_892.png" alt=""></p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709172154_836.png" alt=""></p><p>从这个结果中，我们可以看出两点</p><ol><li>getPath 只是简单的返回 你赋予的String 值，不管是 相对路径还是绝对路径。</li><li>相对路径是相对于自身的项目地址。并且不加 <strong>“/“</strong>。</li></ol><h3 id="getResource"><a href="#getResource" class="headerlink" title="getResource"></a>getResource</h3><p>用代码说话。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">URL resource = testFile.class.getClassLoader().getResource(&quot;.&quot;);</span><br><span class="line">URL resource1 = testFile.class.getResource(&quot;.&quot;);</span><br><span class="line">System.out.println(resource);</span><br><span class="line">System.out.println(resource1);</span><br></pre></td></tr></table></figure></p><p>输出的结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file:/D:/Programme/0-Java/J_Example/Arithmetic/out/production/3_basic/</span><br><span class="line">file:/D:/Programme/0-Java/J_Example/Arithmetic/out/production/3_basic/test_01/</span><br></pre></td></tr></table></figure><p>所以对于 getResource 来说 。    </p><ol><li>如果使用 Class 类 ，则代表该类所在的包为 相对路径的起点。</li><li>如果使用 ClassLoader类 , 则代表该类所在的 模块为 相对路径的起点。</li></ol><h3 id="JSP-中的路径"><a href="#JSP-中的路径" class="headerlink" title="JSP 中的路径"></a>JSP 中的路径</h3><p>使用 <strong>EL</strong>  表达式<br><strong>${pageContext.request.contextPath}</strong> 这里的路径指的是 <strong>web</strong> 的根目录.</p><h3 id="File类-与-Path类"><a href="#File类-与-Path类" class="headerlink" title="File类 与 Path类"></a>File类 与 Path类</h3><p>Path 类 是 JDK 7 中加入的新内容。比File 类更快，而且有报错机制，所以更容易使用。</p><p>他们两个的 <code>区别</code> 我会写在内部的 注释中。<br>就不单独拿出来写了。</p><ol><li>创建文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 如果存在重复 会报错。</span><br><span class="line">Path path = Paths.get(&quot;D://test.txt&quot;);</span><br><span class="line">Files.createFile(path);</span><br><span class="line">// 这里有一个 方法，可直接设置文件的属性。</span><br><span class="line">Set perms= PosixFilePermissions.fromString(&quot;rw-rw-rw-&quot;)</span><br><span class="line">Files.crateFile(path,perms);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 如果存在重复，会重新创建。</span><br><span class="line">// 可以使用 file.exists() 来确认是否存在重复。</span><br><span class="line">File file = new File(&quot;D://test02.txt&quot;);</span><br><span class="line">file.createNewFile();</span><br></pre></td></tr></table></figure></li></ol><p>共同点： 想要创建多级目录下的文件，都必须先创建目录，才能创建文件。</p><ol start="2"><li><p>创建目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 可以直接创建多级目录</span><br><span class="line">Path path = Paths.get(&quot;D://test/test01/&quot;);</span><br><span class="line">Files.createDirectories(path);</span><br><span class="line"></span><br><span class="line">// mkdir 只能创建一级目录</span><br><span class="line">// mkdirs 可以创建多级目录</span><br><span class="line">File file = new File(&quot;D://test02/test3/test3&quot;);</span><br><span class="line">file.mkdir();</span><br><span class="line">file.mkdirs();</span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 如果文件夹下存在多级目录，则报错</span><br><span class="line">// DirectoryNotEmptyException</span><br><span class="line">Path path = Paths.get(&quot;D://test/&quot;);</span><br><span class="line">Files.delete(path);</span><br><span class="line"></span><br><span class="line">// 如果文件夹下存在多级目录，则没有反应。。</span><br><span class="line">File file = new File(&quot;D://test02&quot;);</span><br><span class="line">file.delete();</span><br></pre></td></tr></table></figure></li></ol><p>如果想要删除相应的文件，直接将 路径更改为文件的路径即可。</p><ol start="4"><li>遍历文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public static void fileForEach(String path) &#123;</span><br><span class="line">    File file = new File(path);</span><br><span class="line">    File[] files = file.listFiles();</span><br><span class="line">    for (File f : files) &#123;</span><br><span class="line">        // 判断是 文件还是 目录</span><br><span class="line">        if (f.isFile()) &#123;</span><br><span class="line">            System.out.println(f.getName() + &quot;是文件!&quot;);</span><br><span class="line">        &#125; else if (f.isDirectory()) &#123;</span><br><span class="line">            System.out.println(f.getName());</span><br><span class="line">            fileForEach(f.getPath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">    Path path = Paths.get(&quot;D://test/&quot;);</span><br><span class="line">    Files.walkFileTree(path, new SimpleFileVisitor&lt;Path&gt;() &#123;</span><br><span class="line">        // 访问文件夹前使用</span><br><span class="line">        @Override</span><br><span class="line">        public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException &#123;</span><br><span class="line">            System.out.println(dir.getFileName());</span><br><span class="line">            return super.preVisitDirectory(dir, attrs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 访问文件夹后使用</span><br><span class="line">        @Override</span><br><span class="line">        public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException &#123;</span><br><span class="line">            return super.postVisitDirectory(dir, exc);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 访问文件时使用</span><br><span class="line">        @Override</span><br><span class="line">        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException &#123;</span><br><span class="line">            if (file.toString().endsWith(&quot;.txt&quot;)) &#123;</span><br><span class="line">                System.out.println(file.getFileName());</span><br><span class="line">            &#125;</span><br><span class="line">            return super.visitFile(file, attrs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 访问文件失败使用</span><br><span class="line">        @Override</span><br><span class="line">        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException &#123;</span><br><span class="line">            return super.visitFileFailed(file, exc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    fileForEach(&quot;D://test02/&quot;);</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>这里出现了 <strong>SimpleFileVisitor</strong> 这个类，具体使用方法就是覆写其内部方法。<br>经过我的测试 ， 因为这个类的方法， 可以比 <strong> fileForEach</strong> 快大约 <strong> 30% </strong> 。</p><ol start="5"><li>复制与移动<br>移动的同时可以更改名字。这一点，都一样。并且与 linux 的操作也类似</li></ol><p>Path 类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(&quot;D://test/test01/cs.txt&quot;);</span><br><span class="line">Path to = Paths.get(&quot;D://test/test01/test2.txt&quot;);</span><br><span class="line">Files.move(path, to, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">Files.copy(path, to, StandardCopyOption.REPLACE_EXISTING);</span><br></pre></td></tr></table></figure></p><p>这里的 <strong> StandardCopyOption </strong> 有三个属性。<br>注意： ATOMIC_MOVE 方法只支持 move 方法。如果将之使用到 copy 方法，则会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* 如果存在则覆盖</span><br><span class="line"> * Replace an existing file if it exists. </span><br><span class="line"> */</span><br><span class="line">REPLACE_EXISTING,</span><br><span class="line">/* 将属性一同拷贝。</span><br><span class="line"> * Copy attributes to the new file.</span><br><span class="line"> */</span><br><span class="line">COPY_ATTRIBUTES,</span><br><span class="line">/* 只支持 move 方法，不支持 copy 方法</span><br><span class="line"> * Move the file as an atomic file system operation.</span><br><span class="line"> */</span><br><span class="line">ATOMIC_MOVE;</span><br></pre></td></tr></table></figure><p>下面是file 类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 拷贝 方法</span><br><span class="line">public void copyFile(String oldFile,String newFile)&#123;</span><br><span class="line">try&#123;</span><br><span class="line">int bytesum = 0;</span><br><span class="line">int byteread = 0;</span><br><span class="line">File oldfile = new File(oldFile);</span><br><span class="line">//判断文件是否存在，如果文件存在则实现该文件向新文件的复制</span><br><span class="line">if(oldfile.exists())&#123;</span><br><span class="line">    //读取原文件</span><br><span class="line">    InputStream ins = new FileInputStream(oldFile);</span><br><span class="line">    //创建文件输出流，写入文件</span><br><span class="line">    FileOutputStream outs = new FileOutputStream(newFile);</span><br><span class="line">    //创建缓冲区，大小为500字节</span><br><span class="line">    byte[] buffer = new byte[500];</span><br><span class="line">    //每次从文件流中读取500字节数据，计算当前为止读取的数据总数</span><br><span class="line">    while((byteread = ins.read(buffer)) != -1)&#123;</span><br><span class="line">    bytesum += byteread;</span><br><span class="line">    System.out.println(bytesum);</span><br><span class="line">    //把当前缓冲区中的数据写入新文件</span><br><span class="line">    outs.write(buffer,0,byteread);</span><br><span class="line">    &#125;</span><br><span class="line">    ins.close();</span><br><span class="line">&#125;</span><br><span class="line">else  //如果原文件不存在，则扔出异常</span><br><span class="line">    throw new Exception();</span><br><span class="line">&#125;catch(Exception ex)&#123;</span><br><span class="line">System.out.print(&quot;原文件不存在！&quot;);</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 移动 方法</span><br><span class="line">File file = new File(&quot;D://test02/test02/test02.txt&quot;);</span><br><span class="line">file.renameTo(new File(&quot;D://test02/test02/test.txt&quot;));</span><br></pre></td></tr></table></figure><p>从这里我们可以看出， path 类相对应的 复制方法 非常简单，不需要使用 直接使用输入输出流就可以复制文件。</p><ol start="6"><li>输入输出流</li></ol><p>Path类<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709172336_740.png" alt=""></p><p>File类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File file = new File(&quot;D://test02/test02/test02.txt&quot;);</span><br><span class="line">FileInputStream fileInputStream = new FileInputStream(file);</span><br><span class="line">FileReader fileReader = new FileReader(file);</span><br></pre></td></tr></table></figure></p><p>相对比，我们也可以看出，Path类相对 file类也简化了很多操作。更有利于开发。</p><ol start="7"><li>相互转化<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">path.toFile()</span><br><span class="line">File.toPath()</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>关于路径的使用总结。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709172357_508.png" alt=""></li><li>关于Path 与 File 类的使用总结。<br>Path 类 相比较于 File 类 ，在操作上更直观，没有涉及到更深的层面.可以看出 研发人员 从中作出了很多改进。 可以让人更专注于逻辑的编写，而非是 底层的基础。<br>虽然并没有针对其 性能作出确切的比较，不过就现有的网络统计来说， Path 类在使用中大都会比 File 类快 , 并且在最新的 lucene 中，也是用 Path 代替了 file 的操作， 相关的文章请参考 []。<br>综上，推荐使用 Path 类替代 File 类。</li></ol><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>最近作项目的时候，用java获取文件。<br>虽然用框架很容易，但是其内部的原理让我很疑惑。在自己写相似的代码的时候，往往会出现各种各样的错误。所以这里，对相关的类以及方法进行一个整合。<br>比如 file 类，path 类。 绝对路径与相对路径。 getResource 方法 ， getRealPath方法等。</p><h3 id="绝对路径与相对路径-1"><a href="#绝对路径与相对路径-1" class="headerlink" title="绝对路径与相对路径"></a>绝对路径与相对路径</h3><p>在使用 File 类的时候，发现绝对路径和相对路径的使用有很大的区别。<br>大家都知道：File类是用来构造文件或文件夹的类,在其构造函数中要求传入一个String类型的参数,用于指示文件所在的路径<br><code>绝对路径名</code>是完整的路径名，不需要任何其他信息就可以定位自身表示的文件。<br><code>相对路径名</code>必须使用来自其他路径名的信息进行解释</p><p>因为我使用的是 idea ，所以下面，我就用idea 给大家演示一下，他们的区别。<br>废话不多说，直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 绝对路径</span></span><br><span class="line">        File fi1 = <span class="keyword">new</span> File(<span class="string">"D://sy.ini"</span>);</span><br><span class="line">        <span class="comment">// 相对路径</span></span><br><span class="line">        File fi2 = <span class="keyword">new</span> File(<span class="string">"sy.ini"</span>);</span><br><span class="line">        String test = <span class="string">"000"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将 test 分别写入 fi1 fi2</span></span><br><span class="line">            FileOutputStream fo1 = <span class="keyword">new</span> FileOutputStream(fi1);</span><br><span class="line">            FileOutputStream fo2 = <span class="keyword">new</span> FileOutputStream(fi2);</span><br><span class="line">            fo1.write(test.getBytes());</span><br><span class="line">            fo2.write(test.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 验证 getPath 与 getAbsolubtePath 的区别。</span></span><br><span class="line">        System.out.println(fi1.getPath());</span><br><span class="line">        System.out.println(fi1.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        System.out.println(fi2.getPath());</span><br><span class="line">        System.out.println(fi2.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\sy.ini</span><br><span class="line">D:\sy.ini</span><br><span class="line">sy.ini</span><br><span class="line">D:\Programme\0-Java\J_Example\Arithmetic\sy.ini</span><br></pre></td></tr></table></figure><p>用两张图片辅助结果</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709172153_892.png" alt=""></p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709172154_836.png" alt=""></p><p>从这个结果中，我们可以看出两点</p><ol><li>getPath 只是简单的返回 你赋予的String 值，不管是 相对路径还是绝对路径。</li><li>相对路径是相对于自身的项目地址。并且不加 <strong>“/“</strong>。</li></ol><h3 id="getResource-1"><a href="#getResource-1" class="headerlink" title="getResource"></a>getResource</h3><p>用代码说话。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">URL resource = testFile.class.getClassLoader().getResource(&quot;.&quot;);</span><br><span class="line">URL resource1 = testFile.class.getResource(&quot;.&quot;);</span><br><span class="line">System.out.println(resource);</span><br><span class="line">System.out.println(resource1);</span><br></pre></td></tr></table></figure></p><p>输出的结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file:/D:/Programme/0-Java/J_Example/Arithmetic/out/production/3_basic/</span><br><span class="line">file:/D:/Programme/0-Java/J_Example/Arithmetic/out/production/3_basic/test_01/</span><br></pre></td></tr></table></figure><p>所以对于 getResource 来说 。    </p><ol><li>如果使用 Class 类 ，则代表该类所在的包为 相对路径的起点。</li><li>如果使用 ClassLoader类 , 则代表该类所在的 模块为 相对路径的起点。</li></ol><h3 id="JSP-中的路径-1"><a href="#JSP-中的路径-1" class="headerlink" title="JSP 中的路径"></a>JSP 中的路径</h3><p>使用 <strong>EL</strong>  表达式<br><strong>${pageContext.request.contextPath}</strong> 这里的路径指的是 <strong>web</strong> 的根目录.</p><h3 id="File类-与-Path类-1"><a href="#File类-与-Path类-1" class="headerlink" title="File类 与 Path类"></a>File类 与 Path类</h3><p>Path 类 是 JDK 7 中加入的新内容。比File 类更快，而且有报错机制，所以更容易使用。</p><p>他们两个的 <figure class="highlight plain"><figcaption><span>我会写在内部的 注释中。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">就不单独拿出来写了。</span><br><span class="line"></span><br><span class="line">1. 创建文件</span><br></pre></td></tr></table></figure></p><pre><code>// 如果存在重复 会报错。Path path = Paths.get(&quot;D://test.txt&quot;);Files.createFile(path);// 这里有一个 方法，可直接设置文件的属性。Set perms= PosixFilePermissions.fromString(&quot;rw-rw-rw-&quot;)Files.crateFile(path,perms);// 如果存在重复，会重新创建。// 可以使用 file.exists() 来确认是否存在重复。File file = new File(&quot;D://test02.txt&quot;);file.createNewFile();</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">共同点： 想要创建多级目录下的文件，都必须先创建目录，才能创建文件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 创建目录</span><br></pre></td></tr></table></figure><pre><code>// 可以直接创建多级目录Path path = Paths.get(&quot;D://test/test01/&quot;);Files.createDirectories(path);// mkdir 只能创建一级目录// mkdirs 可以创建多级目录File file = new File(&quot;D://test02/test3/test3&quot;);file.mkdir();file.mkdirs();</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 删除</span><br></pre></td></tr></table></figure><pre><code>// 如果文件夹下存在多级目录，则报错// DirectoryNotEmptyExceptionPath path = Paths.get(&quot;D://test/&quot;);Files.delete(path);// 如果文件夹下存在多级目录，则没有反应。。File file = new File(&quot;D://test02&quot;);file.delete();</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果想要删除相应的文件，直接将 路径更改为文件的路径即可。</span><br><span class="line"></span><br><span class="line">4. 遍历文件</span><br></pre></td></tr></table></figure><pre><code>public static void fileForEach(String path) {    File file = new File(path);    File[] files = file.listFiles();    for (File f : files) {        // 判断是 文件还是 目录        if (f.isFile()) {            System.out.println(f.getName() + &quot;是文件!&quot;);        } else if (f.isDirectory()) {            System.out.println(f.getName());            fileForEach(f.getPath());        }    }}public static void main(String[] args) throws IOException {    Path path = Paths.get(&quot;D://test/&quot;);    Files.walkFileTree(path, new SimpleFileVisitor&lt;Path&gt;() {        // 访问文件夹前使用        @Override        public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {            System.out.println(dir.getFileName());            return super.preVisitDirectory(dir, attrs);        }        // 访问文件夹后使用        @Override        public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {            return super.postVisitDirectory(dir, exc);        }        // 访问文件时使用        @Override        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {            if (file.toString().endsWith(&quot;.txt&quot;)) {                System.out.println(file.getFileName());            }            return super.visitFile(file, attrs);        }        // 访问文件失败使用        @Override        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {            return super.visitFileFailed(file, exc);        }    });    fileForEach(&quot;D://test02/&quot;);}}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这里出现了 **SimpleFileVisitor** 这个类，具体使用方法就是覆写其内部方法。</span><br><span class="line">经过我的测试 ， 因为这个类的方法， 可以比 ** fileForEach** 快大约 ** 30% ** 。</span><br><span class="line"></span><br><span class="line">5. 复制与移动</span><br><span class="line">移动的同时可以更改名字。这一点，都一样。并且与 linux 的操作也类似</span><br><span class="line"></span><br><span class="line">Path 类</span><br></pre></td></tr></table></figure><pre><code>Path path = Paths.get(&quot;D://test/test01/cs.txt&quot;);Path to = Paths.get(&quot;D://test/test01/test2.txt&quot;);Files.move(path, to, StandardCopyOption.REPLACE_EXISTING);Files.copy(path, to, StandardCopyOption.REPLACE_EXISTING);</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这里的 ** StandardCopyOption ** 有三个属性。</span><br><span class="line">注意： ATOMIC_MOVE 方法只支持 move 方法。如果将之使用到 copy 方法，则会报错。</span><br></pre></td></tr></table></figure><pre><code>/* 如果存在则覆盖 * Replace an existing file if it exists.  */REPLACE_EXISTING,/* 将属性一同拷贝。 * Copy attributes to the new file. */COPY_ATTRIBUTES,/* 只支持 move 方法，不支持 copy 方法 * Move the file as an atomic file system operation. */ATOMIC_MOVE;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">下面是file 类</span><br></pre></td></tr></table></figure><pre><code>// 拷贝 方法public void copyFile(String oldFile,String newFile){try{int bytesum = 0;int byteread = 0;File oldfile = new File(oldFile);//判断文件是否存在，如果文件存在则实现该文件向新文件的复制if(oldfile.exists()){    //读取原文件    InputStream ins = new FileInputStream(oldFile);    //创建文件输出流，写入文件    FileOutputStream outs = new FileOutputStream(newFile);    //创建缓冲区，大小为500字节    byte[] buffer = new byte[500];    //每次从文件流中读取500字节数据，计算当前为止读取的数据总数    while((byteread = ins.read(buffer)) != -1){    bytesum += byteread;    System.out.println(bytesum);    //把当前缓冲区中的数据写入新文件    outs.write(buffer,0,byteread);    }    ins.close();}else  //如果原文件不存在，则扔出异常    throw new Exception();}catch(Exception ex){System.out.print(&quot;原文件不存在！&quot;);ex.printStackTrace();}// 移动 方法File file = new File(&quot;D://test02/test02/test02.txt&quot;);file.renameTo(new File(&quot;D://test02/test02/test.txt&quot;));</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">从这里我们可以看出， path 类相对应的 复制方法 非常简单，不需要使用 直接使用输入输出流就可以复制文件。</span><br><span class="line"></span><br><span class="line">6. 输入输出流</span><br><span class="line"></span><br><span class="line">Path类</span><br><span class="line">![](http://ovmspkp0s.bkt.clouddn.com/201709172336_740.png)</span><br><span class="line"></span><br><span class="line">File类</span><br></pre></td></tr></table></figure><pre><code>File file = new File(&quot;D://test02/test02/test02.txt&quot;);FileInputStream fileInputStream = new FileInputStream(file);FileReader fileReader = new FileReader(file);</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">相对比，我们也可以看出，Path类相对 file类也简化了很多操作。更有利于开发。</span><br><span class="line"></span><br><span class="line">7. 相互转化</span><br></pre></td></tr></table></figure><p>path.toFile()<br>File.toPath()</p><p><code>`</code></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol><li>关于路径的使用总结。<br><img src="http://ovmspkp0s.bkt.clouddn.com/201709172357_508.png" alt=""></li><li>关于Path 与 File 类的使用总结。<br>Path 类 相比较于 File 类 ，在操作上更直观，没有涉及到更深的层面.可以看出 研发人员 从中作出了很多改进。 可以让人更专注于逻辑的编写，而非是 底层的基础。<br>虽然并没有针对其 性能作出确切的比较，不过就现有的网络统计来说， Path 类在使用中大都会比 File 类快 , 并且在最新的 lucene 中，也是用 Path 代替了 file 的操作， 相关的文章请参考 []。<br>综上，推荐使用 Path 类替代 File 类。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础</title>
      <link href="/blogs/c783f2ce.html"/>
      <url>/blogs/c783f2ce.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-计算机基础"><a href="#0-计算机基础" class="headerlink" title="0. 计算机基础"></a>0. 计算机基础</h2><h3 id="0-1-深入理解计算机系统"><a href="#0-1-深入理解计算机系统" class="headerlink" title="0.1 深入理解计算机系统"></a>0.1 深入理解计算机系统</h3><p>寄存器 ： CPU 中有 16 个存储 64位值的 通用目的寄存器。 嵌套32位 ， 16位 ， 8位。<br>%rax 返回值 %rsp 指针 %rcx %rdx %rsi %rdi 第四、三、二、一个参数。<br>操作数 ： 立即数，寄存器，内存引用 。<br>寻址模式 ：Imm(rb,ri,s) Imm 立即数偏移，rb基址寄存器，ri变址寄存器，s比例因子.<br>条件码 ：CF,XF,SF,OF 通过组合确定算术或逻辑操作。<br>对抗缓冲区溢出攻击：</p><pre><code>1. 栈随机化：程序开始前，插入一段随机大小的空间2. 栈破坏检测：随机在栈帧中插入值，每次恢复状态和返回函数前检测3. 限制可执行代码区域：通过 读、写、执行 权限执行。</code></pre><h4 id="处理器体系结构"><a href="#处理器体系结构" class="headerlink" title="处理器体系结构"></a>处理器体系结构</h4><p>ALU : 算术与逻辑单元<br>指令 ： 整数操作，跳转，条件传送，call指令返回地址，入栈出栈，指令停止。<br>顺序 ： 取指，译码，执行，访存，写回，更新PC。<br>流水线 ：<br>    数据冒险：暂停、转发、加载/使用冒险</p><h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><h4 id="现代处理器"><a href="#现代处理器" class="headerlink" title="现代处理器"></a>现代处理器</h4><p>ICU(instruction controll unit) 指令控制单元：<br>EU(executable unit) 执行单元: 分支，算术运算，加载，存储 – &gt; 数据高速缓存 </p><h4 id="存储器层次结构"><a href="#存储器层次结构" class="headerlink" title="存储器层次结构"></a>存储器层次结构</h4><p>SRAM（static random access memory) 静态随机访问存储器  – 高速缓存 L1 , L2 ,L3<br>DRAM : <strong>DDR</strong>(Double Data-Rate Synchronous DRAM ) 双倍速率同步 RAM – 主存<br>存储速度 ： SRAM &gt; DRAM</p><p>ROM (Read-Only Memory) 只读存储器<br>EPROM –&gt; 闪存(flash memory) –&gt; SSD (solid state disk)</p><p>磁盘 </p><pre><code>- 容量: 记录密度，磁道密度，面密度（前两者的乘积）。- 访问时间：寻道（传送臂定位磁道），旋转（读/写头定位扇区），传送（读/写头 读写内容)。- 逻辑块号: 盘面，磁道，扇区- 主机总线适配器- DMA (Direct memory access) 直接内存访问： 通过磁盘控制器，将逻辑块号翻译成 扇区地址传给 主存。- 局部性:时间局部性(同一个内存位置在一段时间内多次使用) 、 空间局部性(内存使用是 相近的)</code></pre><p><img src="http://ovmspkp0s.bkt.clouddn.com/201710131530_7.png" alt=""></p><p>缓存</p><h4 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h4><p>MMU ：</p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>静态链接：符号解析与重定位<br>可重定位目标文件：与静态链接库（archive 存档文件），在<strong>符号解析</strong>阶段一同解析，然后将<strong>重定位</strong>节和符号定义，与节中的符号引用，最终组成可执行目标文件。<br>可执行目标文件：<strong>加载</strong>阶段，与动态链接库的共享目标文件一起，动态加载。<br>共享目标文件：共享库 DLL(dynaic linker library)</p><h3 id="0-2-linux-知识"><a href="#0-2-linux-知识" class="headerlink" title="0.2 linux 知识"></a>0.2 linux 知识</h3><ol><li>时间、FHS <ul><li>type(判断) \info\man</li><li>shutdown\reboot\halt\poweroff</li><li>date\hwclock</li><li>cd\mkdir\pwd\rm\rmdir</li><li>cp\mv</li><li>history</li><li>echo</li></ul></li><li>用户<ul><li>alias</li><li>file/cat/head</li><li>useradd，userdel</li><li>passwd，gpasswd</li><li>usermod,chsh,chfn</li><li>groupadd,groupmod</li></ul></li><li>文件<ul><li>chown(修改文件的属主与属组)</li><li>chmod(修改文件的权限)</li></ul></li><li>系统<ul><li>ps -aux|grep ..</li><li>systemctl</li><li>nmgui</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 Socket 编程 到 OkHttp 框架</title>
      <link href="/blogs/21184.html"/>
      <url>/blogs/21184.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在做一个项目的时候，因为项目要求跨域连接。所以，使用了<strong>Okhttp</strong>框架。其内部原理是基于 socket 网络编程的。因为自己在这方面比较薄弱，所以写这一篇文章进行相关的总结。<br><a id="more"></a></p><h2 id="基础知识（参考-图解TCP-IP-与-深入理解计算机系统）"><a href="#基础知识（参考-图解TCP-IP-与-深入理解计算机系统）" class="headerlink" title="基础知识（参考 图解TCP/IP 与 深入理解计算机系统）"></a>基础知识（参考 图解TCP/IP 与 深入理解计算机系统）</h2><ol><li>TCP/IP 参考模型<br><a href="https://3dot141.cn/blogs/28952.html" target="_blank" rel="noopener">网络基础知识</a></li><li>socket 套接字<br>每个套接字都是连接的一个端点，有相应的套接字地址。由一个IP地址与16位的整数端口组成.<br>一个连接由两端的套接字地址唯一确定。叫套接字对。<br>如:(cliaddr:cliport, servaddr:servport)<br>端口号分为：<br><strong>标准既定的端口号</strong>： 0~49151. 其中<strong>知名端口号</strong>由 0~1023 <strong> 组成。FTP 一般使用 21号端口号，HTTP 通信一般使用 80 号端口号。</strong>动态分配的端口号**： 49152~65535. 操作系统为之分配不同的端口号。然后应用程序使用时，由操作系统将连接建立。</li><li>java 中的<strong>网络编程类</strong><br> InetAddress:用于标识网络上的硬件资源，主要是IP地址<br> URL：统一资源定位符，通过URL可以直接读取或写入网络上的数据<br> Sockets：使用TCP协议实现的网络通信Socket相关的类<br> Datagram:使用UDP协议，将数据保存在用户数据报中，通过网络进行通信。UDP协议中，使用 数据报 为传输单位。</li></ol><h2 id="java-网络编程类介绍"><a href="#java-网络编程类介绍" class="headerlink" title="java 网络编程类介绍"></a>java 网络编程类介绍</h2><h3 id="1-InetAddress"><a href="#1-InetAddress" class="headerlink" title="1. InetAddress"></a>1. InetAddress</h3><p>InetAddress类用于标识网络上的硬件资源，标识互联网协议(IP)地址。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取本机的InetAddress实例</span></span><br><span class="line">InetAddress address =InetAddress.getLocalHost();</span><br><span class="line"><span class="comment">//获取计算机名</span></span><br><span class="line">address.getHostName();</span><br><span class="line"><span class="comment">//获取IP地址</span></span><br><span class="line">address.getHostAddress();</span><br><span class="line"><span class="comment">//获取字节数组形式的IP地址,以点分隔的四部分</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = address.getAddress();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取其他主机的InetAddress实例</span></span><br><span class="line">InetAddress address2 =InetAddress.getByName(<span class="string">"其他主机名"</span>);</span><br><span class="line">InetAddress address3 =InetAddress.getByName(<span class="string">"IP地址"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="2-URL"><a href="#2-URL" class="headerlink" title="2. URL"></a>2. URL</h3><p>URL(Uniform Resource Locator)统一资源定位符，表示Internet上某一资源的地址，协议名：资源名称</p><ol><li><p>基础使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个URL的实例</span></span><br><span class="line">URL myBlog =<span class="keyword">new</span> URL(<span class="string">"https://3dot141.cn"</span>);</span><br><span class="line">URL url =<span class="keyword">new</span> URL(myBlog,<span class="string">"/blogs/33521.html?username=3dot141#test"</span>);<span class="comment">//？表示参数，#表示锚点</span></span><br><span class="line">url.getProtocol();<span class="comment">//获取协议</span></span><br><span class="line">url.getHost();<span class="comment">//获取主机</span></span><br><span class="line">url.getPort();<span class="comment">//如果没有指定端口号，根据协议不同使用默认端口。此时getPort()方法的返回值为 -1</span></span><br><span class="line">url.getPath();<span class="comment">//获取文件路径</span></span><br><span class="line">url.getFile();<span class="comment">//文件名，包括文件路径+参数</span></span><br><span class="line">url.getRef();<span class="comment">//相对路径，就是锚点，即#号后面的内容</span></span><br><span class="line">url.getQuery();<span class="comment">//查询字符串，即参数</span></span><br></pre></td></tr></table></figure></li><li><p>读取网页内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用URL读取网页内容</span></span><br><span class="line"><span class="comment">//创建一个URL实例</span></span><br><span class="line">URL url =<span class="keyword">new</span> URL(<span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">InputStream is = url.openStream();<span class="comment">//通过openStream方法获取资源的字节输入流</span></span><br><span class="line">InputStreamReader isr =newInputStreamReader(is,<span class="string">"UTF-8"</span>);<span class="comment">//将字节输入流转换为字符输入流,如果不指定编码，中文可能会出现乱码</span></span><br><span class="line">BufferedReader br =newBufferedReader(isr);<span class="comment">//为字符输入流添加缓冲，提高读取效率</span></span><br><span class="line">String data = br.readLine();<span class="comment">//读取数据</span></span><br><span class="line"><span class="keyword">while</span>(data!=<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(data);<span class="comment">//输出数据</span></span><br><span class="line">data = br.readerLine();</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br><span class="line">isr.colose();</span><br><span class="line">is.close();</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-Socket"><a href="#3-Socket" class="headerlink" title="3. Socket"></a>3. Socket</h3><p>首先介绍下关于 linux 下的套接字连接原理，帮助理解</p><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709181056_373.png" alt=""></p><p>下面介绍java 下 Socket的使用</p><h4 id="1-Socket-的构造方法"><a href="#1-Socket-的构造方法" class="headerlink" title="1.Socket 的构造方法"></a>1.Socket 的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）Socket()</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）Socket(InetAddress address, <span class="keyword">int</span> port)<span class="keyword">throws</span> UnknownHostException,IOException</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定远程服务器地址与客户端地址</span></span><br><span class="line">（<span class="number">3</span>）Socket(InetAddress address, <span class="keyword">int</span> port, InetAddress localAddr, <span class="keyword">int</span> localPort)<span class="keyword">throws</span> IOException</span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）Socket(String host, <span class="keyword">int</span> port) <span class="keyword">throws</span> UnknownHostException,IOException</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定远程服务器地址与客户端地址</span></span><br><span class="line">（<span class="number">5</span>）Socket(String host, <span class="keyword">int</span> port, InetAddress localAddr, <span class="keyword">int</span> localPort) <span class="keyword">throws</span> IOException</span><br></pre></td></tr></table></figure><h4 id="2-获取Socket信息"><a href="#2-获取Socket信息" class="headerlink" title="2.获取Socket信息"></a>2.获取Socket信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. getInetAddress()：获得远程服务器的IP地址。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. getPort()：获得远程服务器的端口。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. getLocalAddress()：获得客户本地的IP地址。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. getLocalPort()：获得客户本地的端口。</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. getInputStream()：获得输入流。如果Socket还没有连接，或者已经关闭，或者已经通过shutdownInput()方法关闭输入流，那么此方法会抛出IOException。</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>. getOutputStream()：获得输出流。如果Socket还没有连接，或者已经关闭，或者已经通过shutdownOutput()方法关闭输出流，那么此方法会抛出IOException。</span><br></pre></td></tr></table></figure><h4 id="3-Socket-状态"><a href="#3-Socket-状态" class="headerlink" title="3.Socket 状态"></a>3.Socket 状态</h4><ol><li><p>关闭状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态测试方法</span></span><br><span class="line"><span class="number">1</span>. isClosed()</span><br><span class="line"><span class="number">2</span>. IsConnected()</span><br><span class="line"><span class="number">3</span>. isBound()</span><br></pre></td></tr></table></figure></li><li><p>半关闭状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. shutdownInput()</span><br><span class="line"><span class="number">2</span>. shutdownOutput()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态测试方法</span></span><br><span class="line"><span class="number">1</span>. isInputShutDown()</span><br><span class="line"><span class="number">2</span>. isOutputShutdown()</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-Socket-使用实例"><a href="#4-Socket-使用实例" class="headerlink" title="4.Socket 使用实例"></a>4.Socket 使用实例</h4><p>以上就是 Socket 类的基本方法。 下面让我们进入实战，来看一下，Socket 类如何使用</p><ol><li><p>服务器端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于TCP协议的Socket通信，实现用户登录，服务端</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1、创建一个服务器端Socket，即ServerSocket，指定绑定的端口，并监听此端口</span></span><br><span class="line">ServerSocket serverSocket =newServerSocket(<span class="number">33521</span>);<span class="comment">//1024-65535的某个端口</span></span><br><span class="line"><span class="comment">//2、调用accept()方法开始监听，等待客户端的连接</span></span><br><span class="line">Socket socket = serverSocket.accept();</span><br><span class="line"><span class="comment">//3、获取输入流，并读取客户端信息</span></span><br><span class="line">InputStream is = socket.getInputStream();</span><br><span class="line">InputStreamReader isr =newInputStreamReader(is);</span><br><span class="line">BufferedReader br =newBufferedReader(isr);</span><br><span class="line">String info =<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>((info=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"我是服务器，客户端说："</span>+info)；</span><br><span class="line">&#125;</span><br><span class="line">socket.shutdownInput();<span class="comment">//关闭输入流</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、获取输出流，响应客户端的请求</span></span><br><span class="line">OutputStream os = socket.getOutputStream();</span><br><span class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(os);</span><br><span class="line">pw.write(<span class="string">"欢迎您！"</span>);</span><br><span class="line">pw.flush();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//5、关闭资源</span></span><br><span class="line">pw.close();</span><br><span class="line">os.close();</span><br><span class="line">br.close();</span><br><span class="line">isr.close();</span><br><span class="line">is.close();</span><br><span class="line">socket.close();</span><br><span class="line">serverSocket.close();</span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="comment">//1、创建客户端Socket，指定服务器地址和端口</span></span><br><span class="line">Socket socket =newSocket(<span class="string">"localhost"</span>,<span class="number">33521</span>);</span><br><span class="line"><span class="comment">//2、获取输出流，向服务器端发送信息</span></span><br><span class="line">OutputStream os = socket.getOutputStream();<span class="comment">//字节输出流</span></span><br><span class="line">PrintWriter pw =newPrintWriter(os);<span class="comment">//将输出流包装成打印流</span></span><br><span class="line">pw.write(<span class="string">"用户名：3dot141；密码：hahah"</span>);</span><br><span class="line">pw.flush();</span><br><span class="line">socket.shutdownOutput();</span><br><span class="line"><span class="comment">//3、获取输入流，并读取服务器端的响应信息</span></span><br><span class="line">InputStream is = socket.getInputStream();</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">String info = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>((info=br.readLine())!<span class="keyword">null</span>)&#123;</span><br><span class="line"> System.out.println(<span class="string">"我是客户端，服务器说："</span>+info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、关闭资源</span></span><br><span class="line">br.close();</span><br><span class="line">is.close();</span><br><span class="line">pw.close();</span><br><span class="line">os.close();</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure></li><li><p>结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是服务器，客户端说：用户名：<span class="number">3</span>dot141；密码：hahah</span><br><span class="line">我是客户端，服务器说：欢迎您!</span><br></pre></td></tr></table></figure></li><li><p>多线程中的运用</p><ul><li>服务器端创建ServerSocket，使用<strong>while(true)</strong>循环调用accept()等待客户端连接</li><li>客户端创建一个socket并请求和服务器端连接</li><li>服务器端接受请求，创建socket与该客户建立专线连接</li><li>建立连接的两个socket在一个单独的线程上对话</li><li>服务器端继续等待新的连接  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class ServerThread implements runnable&#123;</span><br><span class="line">//服务器线程处理</span><br><span class="line">//和本线程相关的socket</span><br><span class="line">Socket socket =null;</span><br><span class="line">//</span><br><span class="line">public ServerThread(Socket socket)&#123;</span><br><span class="line">this.socket = socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publicvoid run()&#123;</span><br><span class="line">//服务器处理代码</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//服务器代码</span><br><span class="line">ServerSocket serverSocket =newServerSocket(33521);</span><br><span class="line">Socket socket =null;</span><br><span class="line">int count =0;//记录客户端的数量</span><br><span class="line">while(true)&#123;</span><br><span class="line">socket = serverScoket.accept();</span><br><span class="line">ServerThread serverThread =new ServerThread(socket);</span><br><span class="line"> serverThread.start();</span><br><span class="line"> count++;</span><br><span class="line">System.out.println(&quot;客户端连接的数量：&quot;+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="4-UDP-编程"><a href="#4-UDP-编程" class="headerlink" title="4. UDP 编程"></a>4. UDP 编程</h3><h4 id="1-简单介绍"><a href="#1-简单介绍" class="headerlink" title="1. 简单介绍"></a>1. 简单介绍</h4><p>UDP 是面向无连接的协议，反应迅速，适用于适时场景，但是丢包后不能发现。<br>用于 直播等网速要求较高的应用</p><p><code>DatagramSocket</code> 端到端的通信类.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本机地址</span></span><br><span class="line"><span class="comment">// 随机</span></span><br><span class="line">DatagramSocket()</span><br><span class="line"><span class="comment">// 指定</span></span><br><span class="line">DatagramSocket(<span class="keyword">int</span> port, InetAddress)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送与接收</span></span><br><span class="line">send(DatagramPacket) </span><br><span class="line">receive(DatagramPacket)</span><br></pre></td></tr></table></figure></p><p><code>DatagramPacket</code> 数据报, 为 IP 和 UDP 等网络层以上的包的单位 。虽然这些都是包，但不同的层拥有不同的称呼。数据链路层中 叫<strong> 帧</strong> , TCP 则表示 为<strong> 段</strong> .<br><strong>方法</strong> ：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="comment">// 接收时</span></span><br><span class="line">DatagramPacket(<span class="keyword">byte</span>[] buf, <span class="keyword">int</span> length);</span><br><span class="line"><span class="comment">// 发送时</span></span><br><span class="line">DatagramPacket(<span class="keyword">byte</span>[] buf, <span class="keyword">int</span> length, InetAddress iAdrr, <span class="keyword">int</span> Port);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line"><span class="comment">// 用于服务器获得 客户端地址</span></span><br><span class="line">getAddress()</span><br><span class="line"><span class="comment">// 用于服务器获得 客户端接口</span></span><br><span class="line">getPort()</span><br></pre></td></tr></table></figure></p><h4 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h4><ol><li><p>服务器端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//服务器端，实现基于UDP的用户登录</span><br><span class="line">//1、创建服务器端DatagramSocket，指定端口</span><br><span class="line">DatagramSocket socket =new datagramSocket(33521);</span><br><span class="line">//2、创建数据报，用于接受客户端发送的数据</span><br><span class="line">byte[] data =newbyte[1024];//</span><br><span class="line">DatagramPacket packet =newDatagramPacket(data,data.length);</span><br><span class="line">//3、接受客户端发送的数据</span><br><span class="line">socket.receive(packet);//此方法在接受数据报之前会一致阻塞</span><br><span class="line">//4、读取数据</span><br><span class="line">String info =newString(data,o,data.length);</span><br><span class="line">System.out.println(&quot;我是服务器，客户端告诉我&quot;+info);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//=========================================================</span><br><span class="line">//向客户端响应数据</span><br><span class="line">//1、定义客户端的地址、端口号、数据</span><br><span class="line">// 这里也可以自己设置</span><br><span class="line">InetAddress address = packet.getAddress();</span><br><span class="line">int port = packet.getPort();</span><br><span class="line">byte[] data2 = &quot;欢迎您！&quot;.geyBytes();</span><br><span class="line">//2、创建数据报，包含响应的数据信息</span><br><span class="line">DatagramPacket packet2 = new DatagramPacket(data2,data2.length,address,port);</span><br><span class="line">//3、响应客户端</span><br><span class="line">socket.send(packet2);</span><br><span class="line">//4、关闭资源</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure></li><li><p>客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//客户端</span><br><span class="line">//1、定义服务器的地址、端口号、数据</span><br><span class="line">InetAddress address =InetAddress.getByName(&quot;localhost&quot;);</span><br><span class="line">int port =33521;</span><br><span class="line">byte[] data =&quot;用户名：3dot141;密码：hahah&quot;.getBytes();</span><br><span class="line">//2、创建数据报，包含发送的数据信息</span><br><span class="line">DatagramPacket packet = newDatagramPacket(data,data,length,address,port);</span><br><span class="line">//3、创建DatagramSocket对象</span><br><span class="line">DatagramSocket socket =newDatagramSocket();</span><br><span class="line">//4、向服务器发送数据</span><br><span class="line">socket.send(packet);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//接受服务器端响应数据</span><br><span class="line">//======================================</span><br><span class="line">//1、创建数据报，用于接受服务器端响应数据</span><br><span class="line">byte[] data2 = new byte[1024];</span><br><span class="line">DatagramPacket packet2 = new DatagramPacket(data2,data2.length);</span><br><span class="line">//2、接受服务器响应的数据</span><br><span class="line">socket.receive(packet2);</span><br><span class="line">String raply = new String(data2,0,packet2.getLenth());</span><br><span class="line">System.out.println(&quot;我是客户端，服务器说：&quot;+reply);</span><br><span class="line">//4、关闭资源</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure></li></ol><h2 id="OkHttp-框架"><a href="#OkHttp-框架" class="headerlink" title="OkHttp 框架"></a>OkHttp 框架</h2><p>在项目中，我对 <strong>OkHttp</strong> 进行了简单的封装，基本满足我在项目中的需要。<br>下面贴上我的 <strong>工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkhttpUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType JSON = MediaType.parse(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doGet</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request get = <span class="keyword">new</span> Request.Builder().url(url).build();</span><br><span class="line">        Response response = client.newCall(get).execute();</span><br><span class="line">        <span class="keyword">return</span> response.body().string();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doGet</span><span class="params">(String url, Map&lt;String, String&gt; map)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        String newUrl = url;</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> loop = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (loop == <span class="number">0</span>) &#123;</span><br><span class="line">                    newUrl = newUrl + <span class="string">"?"</span> + key + <span class="string">"="</span> + map.get(key);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    newUrl = newUrl + <span class="string">"&amp;"</span> + key + <span class="string">"="</span> + map.get(key);</span><br><span class="line">                &#125;</span><br><span class="line">                loop = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Request get = <span class="keyword">new</span> Request.Builder().url(newUrl).build();</span><br><span class="line">        Response response = client.newCall(get).execute();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response.body().string();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doPost</span><span class="params">(String url, String requestBody)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request post = <span class="keyword">new</span> Request.Builder().url(url).post(RequestBody.create(JSON, requestBody)).build();</span><br><span class="line">        Response response = client.newCall(post).execute();</span><br><span class="line">        <span class="keyword">if</span> (!response.isSuccessful()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"没能得到数据"</span> + response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response.body().string();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有对 okhttp 框架感兴趣的，可以参阅下面的网址。我就不献丑了。<br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0326/2643.html" target="_blank" rel="noopener">okhttp 源码解析</a><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0106/2275.html" target="_blank" rel="noopener">okhttp 使用教程</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>路漫漫其修远兮，吾将上下而求索。<br>在程序员的道路上，我还只是一个刚上路的小学生，怀着对代码世界的向往，砥砺前行。</p><blockquote><p>stay hungry, stay foolish<br>与诸君共勉。<br>您的每一次点赞，关注都是对我的一种激励。<br>我的个人博客 – <a href="https://3dot141.cn" target="_blank" rel="noopener">killCode</a><br>谢谢。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis逆向工程</title>
      <link href="/blogs/51669.html"/>
      <url>/blogs/51669.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为了方便使用 Mybatis 的开发，我在做一个项目的时候，在网上查阅资料，发现了这个神奇的工具，逆向工程，可以很快速的将一些基本的东西格式化的拷贝出来，很方便。所以，特意，整理出来，让大家一起看看。<br><a id="more"></a></p><h3 id="pom-文件"><a href="#pom-文件" class="headerlink" title="pom 文件"></a>pom 文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;artifactId&gt;sqlGenerator&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.5&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">                    &lt;!-- 文件位置 --&gt;</span><br><span class="line">                    &lt;configurationFile&gt;$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class="line"></span><br><span class="line">&lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">&lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">                &lt;!-- 单独配置依赖 --&gt;</span><br><span class="line">                &lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.21&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="generatorConfig-xml"><a href="#generatorConfig-xml" class="headerlink" title="generatorConfig.xml"></a>generatorConfig.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;!-- targetRuntime是一个很重要的选项，与下文生成 example 有关 --&gt;</span><br><span class="line">&lt;context id=&quot;testTables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line">&lt;commentGenerator&gt;</span><br><span class="line">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">&lt;property name=&quot;suppressAllComments&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">&lt;/commentGenerator&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL=&quot;jdbc:mysql://localhost:3306/test&quot;</span><br><span class="line">                        userId=&quot;root&quot;</span><br><span class="line">                        password=&quot;1996915&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal --&gt;</span><br><span class="line">&lt;javaTypeResolver&gt;</span><br><span class="line">&lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">&lt;/javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- targetProject:生成PO类的位置 --&gt;</span><br><span class="line">&lt;javaModelGenerator targetPackage=&quot;com.killcode.pojo&quot;</span><br><span class="line">targetProject=&quot;.\src&quot;&gt;</span><br><span class="line">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">&lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span><br><span class="line">&lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">&lt;/javaModelGenerator&gt;</span><br><span class="line">        &lt;!-- targetProject:mapper映射文件生成的位置 --&gt;</span><br><span class="line">&lt;sqlMapGenerator targetPackage=&quot;com.killcode.mapper&quot;</span><br><span class="line">targetProject=&quot;.\src&quot;&gt;</span><br><span class="line">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">&lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">&lt;/sqlMapGenerator&gt;</span><br><span class="line">&lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span><br><span class="line">&lt;javaClientGenerator type=&quot;XMLMAPPER&quot;</span><br><span class="line">targetPackage=&quot;com.killcode.mapper&quot;</span><br><span class="line">targetProject=&quot;.\src&quot;&gt;</span><br><span class="line">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">&lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;</span><br><span class="line">&lt;/javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 指定数据库表 --&gt;</span><br><span class="line">&lt;table schema=&quot;&quot; tableName=&quot;one&quot;&gt;&lt;/table&gt;</span><br><span class="line">&lt;!-- 有些表的字段需要指定java类型</span><br><span class="line"> &lt;table schema=&quot;&quot; tableName=&quot;&quot;&gt;</span><br><span class="line">&lt;columnOverride column=&quot;&quot; javaType=&quot;&quot; /&gt;</span><br><span class="line">&lt;/table&gt; --&gt;</span><br><span class="line">&lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p><img src="http://ovmspkp0s.bkt.clouddn.com/201709181719_283.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709181718_325.png" alt=""><br><img src="http://ovmspkp0s.bkt.clouddn.com/201709181719_657.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> killJava </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
